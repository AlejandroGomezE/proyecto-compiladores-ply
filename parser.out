Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     close_current_scope -> <empty>
Rule 3     set_func_return_type -> <empty>
Rule 4     new_function_scope -> <empty>
Rule 5     init_param -> <empty>
Rule 6     function_start_quad -> <empty>
Rule 7     endfunc_quad -> <empty>
Rule 8     init_func_call -> <empty>
Rule 9     increment_argument_counter -> <empty>
Rule 10    check_arg_count_type -> <empty>
Rule 11    create_gosub_quad -> <empty>
Rule 12    validate_return -> <empty>
Rule 13    add_operator_to_stack -> <empty>
Rule 14    set_current_type -> <empty>
Rule 15    init_variable -> <empty>
Rule 16    check_variable_exists -> <empty>
Rule 17    init_array -> <empty>
Rule 18    init_array_size -> <empty>
Rule 19    init_array_variable -> <empty>
Rule 20    add_id_type_to_stack -> <empty>
Rule 21    add_float_type_to_stack -> <empty>
Rule 22    add_int_type_to_stack -> <empty>
Rule 23    add_string_type_stack -> <empty>
Rule 24    add_boolean_type_to_stack -> <empty>
Rule 25    process_relational_operator -> <empty>
Rule 26    process_plus_minus_operators -> <empty>
Rule 27    process_mult_div_operators -> <empty>
Rule 28    array_name_reference -> <empty>
Rule 29    array_reference_value -> <empty>
Rule 30    add_separator -> <empty>
Rule 31    remove_separator -> <empty>
Rule 32    create_gotof_quad -> <empty>
Rule 33    goto_skip_else -> <empty>
Rule 34    goto_end_position -> <empty>
Rule 35    goto_return_position -> <empty>
Rule 36    return_end_jump_position -> <empty>
Rule 37    goto_main -> <empty>
Rule 38    main_quad -> <empty>
Rule 39    check_absolute_argument_value -> <empty>
Rule 40    check_trunc_argument_value -> <empty>
Rule 41    check_sqrt_argument_value -> <empty>
Rule 42    substr_quad -> <empty>
Rule 43    check_to_lower_argument_value -> <empty>
Rule 44    check_to_upper_argument_value -> <empty>
Rule 45    print_value -> <empty>
Rule 46    read_value -> <empty>
Rule 47    end_program -> <empty>
Rule 48    program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program
Rule 49    global_vars -> global_vars global_vars_actions
Rule 50    global_vars -> empty
Rule 51    global_vars_actions -> declare_var
Rule 52    global_vars_actions -> assign_statement
Rule 53    global_declaration -> global_declaration global_statement
Rule 54    global_declaration -> empty
Rule 55    global_statement -> declare_function
Rule 56    global_statement -> declare_function_void
Rule 57    global_statement -> print
Rule 58    main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
Rule 59    statement_list -> statement_list statement
Rule 60    statement_list -> empty
Rule 61    statement -> declare_var
Rule 62    statement -> assign_statement
Rule 63    statement -> function_call
Rule 64    statement -> if_condition
Rule 65    statement -> while_loop
Rule 66    statement -> return
Rule 67    statement -> read
Rule 68    statement -> print
Rule 69    declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 70    declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 71    function_type -> FLOAT_TYPE set_func_return_type
Rule 72    function_type -> INT_TYPE set_func_return_type
Rule 73    function_type -> STRING_TYPE set_func_return_type
Rule 74    function_type -> BOOL_TYPE set_func_return_type
Rule 75    params -> param
Rule 76    params -> param COMMA params
Rule 77    param -> var_type ID init_param
Rule 78    function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
Rule 79    function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
Rule 80    return -> RETURN mega_expression validate_return SEMICOLON
Rule 81    arg_list -> arg
Rule 82    arg_list -> arg COMMA increment_argument_counter arg_list
Rule 83    arg -> mega_expression check_arg_count_type
Rule 84    declare_var -> VAR var_type ID init_variable SEMICOLON
Rule 85    declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
Rule 86    assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 87    assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 88    var_type -> FLOAT_TYPE set_current_type
Rule 89    var_type -> INT_TYPE set_current_type
Rule 90    var_type -> STRING_TYPE set_current_type
Rule 91    var_type -> BOOL_TYPE set_current_type
Rule 92    relational_operator -> GREATERTHAN add_operator_to_stack
Rule 93    relational_operator -> LESSTHAN add_operator_to_stack
Rule 94    relational_operator -> EQUALEQUAL add_operator_to_stack
Rule 95    relational_operator -> LESSTHANOREQUAL add_operator_to_stack
Rule 96    relational_operator -> GREATERTHANOREQUAL add_operator_to_stack
Rule 97    relational_operator -> NOTEQUAL add_operator_to_stack
Rule 98    mega_expression -> expression
Rule 99    mega_expression -> expression relational_operator expression process_relational_operator
Rule 100   expression -> term process_plus_minus_operators
Rule 101   expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression
Rule 102   expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression
Rule 103   term -> factor process_mult_div_operators
Rule 104   term -> factor process_mult_div_operators TIMES add_operator_to_stack term
Rule 105   term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term
Rule 106   factor -> LPARENT add_separator mega_expression RPARENT remove_separator
Rule 107   factor -> value
Rule 108   value -> literal
Rule 109   value -> reference
Rule 110   value -> function_call_value
Rule 111   value -> absolute_call_value
Rule 112   value -> sqrt_call_value
Rule 113   value -> trunc_call_value
Rule 114   value -> substr_call_value
Rule 115   value -> to_lower_call_value
Rule 116   value -> to_upper_call_value
Rule 117   literal -> FLOAT add_float_type_to_stack
Rule 118   literal -> INT add_int_type_to_stack
Rule 119   literal -> STRING add_string_type_stack
Rule 120   literal -> TRUE add_boolean_type_to_stack
Rule 121   literal -> FALSE add_boolean_type_to_stack
Rule 122   reference -> ID check_variable_exists add_id_type_to_stack
Rule 123   reference -> array_reference
Rule 124   array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
Rule 125   if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
Rule 126   else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
Rule 127   else_condition -> empty
Rule 128   while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
Rule 129   absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
Rule 130   sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
Rule 131   trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
Rule 132   to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
Rule 133   to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
Rule 134   substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
Rule 135   print -> PRINT LPARENT print_many RPARENT SEMICOLON
Rule 136   print_many -> mega_expression print_value
Rule 137   print_many -> mega_expression print_value COMMA print_many
Rule 138   read -> READ LPARENT reference read_value RPARENT SEMICOLON
Rule 139   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 129
BOOL_TYPE            : 74 91
COMMA                : 76 82 134 134 137
DIVIDE               : 105
ELSE                 : 126
EQUAL                : 86 87
EQUALEQUAL           : 94
FALSE                : 121
FLOAT                : 117
FLOAT_TYPE           : 71 88
FUNCTION             : 69 70
GREATERTHAN          : 69 70 92
GREATERTHANOREQUAL   : 96
ID                   : 48 69 70 77 78 79 84 85 86 122 124
IF                   : 125
INT                  : 85 118
INT_TYPE             : 72 89
LBRACE               : 58 69 70 125 126 128
LBRACKET             : 85 124
LESSTHAN             : 69 70 93
LESSTHANOREQUAL      : 95
LPARENT              : 58 69 70 78 79 106 125 128 129 130 131 132 133 134 135 138
MAIN                 : 58
MINUS                : 102
NOTEQUAL             : 97
PLUS                 : 101
PRINT                : 135
PROGRAM              : 48
RBRACE               : 58 69 70 125 126 128
RBRACKET             : 85 124
READ                 : 138
RETURN               : 80
RPARENT              : 58 69 70 78 79 106 125 128 129 130 131 132 133 134 135 138
SEMICOLON            : 48 58 69 70 79 80 84 85 86 87 135 138
SQRT                 : 130
STRING               : 119
STRING_TYPE          : 73 90
SUBSTR               : 134
TIMES                : 104
TOLOWER              : 132
TOUPPER              : 133
TRUE                 : 120
TRUNC                : 131
VAR                  : 84 85 86
VOID_TYPE            : 70
WHILE                : 128
error                : 

Nonterminals, with rules where they appear

absolute_call_value  : 111
add_boolean_type_to_stack : 120 121
add_float_type_to_stack : 117
add_id_type_to_stack : 86 122
add_int_type_to_stack : 118
add_operator_to_stack : 86 87 92 93 94 95 96 97 101 102 104 105
add_separator        : 106 124
add_string_type_stack : 119
arg                  : 81 82
arg_list             : 78 79 82
array_name_reference : 124
array_reference      : 123
array_reference_value : 124
assign_statement     : 52 62
check_absolute_argument_value : 129
check_arg_count_type : 83
check_sqrt_argument_value : 130
check_to_lower_argument_value : 132
check_to_upper_argument_value : 133
check_trunc_argument_value : 131
check_variable_exists : 122
close_current_scope  : 58 69 70 125 126 128
create_gosub_quad    : 78 79
create_gotof_quad    : 125 128
declare_function     : 55
declare_function_void : 56
declare_var          : 51 61
else_condition       : 125
empty                : 50 54 60 127
end_program          : 48
endfunc_quad         : 69 70
expression           : 98 99 99 101 102
factor               : 103 104 105
function_call        : 63
function_call_value  : 110
function_start_quad  : 69 70
function_type        : 69
global_declaration   : 48 53
global_statement     : 53
global_vars          : 48 49
global_vars_actions  : 49
goto_end_position    : 125
goto_main            : 48
goto_return_position : 128
goto_skip_else       : 126
if_condition         : 64
increment_argument_counter : 82
init_array           : 85
init_array_size      : 85
init_array_variable  : 85
init_func_call       : 78 79
init_param           : 77
init_variable        : 84 86
literal              : 108
main_declaration     : 48
main_quad            : 58
mega_expression      : 80 83 86 87 106 124 125 128 129 130 131 132 133 134 134 136 137
new_function_scope   : 69 70
new_scope            : 58 125 126 128
param                : 75 76
params               : 69 70 76
print                : 57 68
print_many           : 135 137
print_value          : 136 137
process_mult_div_operators : 103 104 105
process_plus_minus_operators : 100 101 102
process_relational_operator : 99
program              : 0
read                 : 67
read_value           : 138
reference            : 87 109 134 138
relational_operator  : 99
remove_separator     : 106 124
return               : 66 69
return_end_jump_position : 128
set_current_type     : 88 89 90 91
set_func_return_type : 70 71 72 73 74
sqrt_call_value      : 112
statement            : 59
statement_list       : 58 59 69 70 125 126 128
substr_call_value    : 114
substr_quad          : 134
term                 : 100 101 102 104 105
to_lower_call_value  : 115
to_upper_call_value  : 116
trunc_call_value     : 113
validate_return      : 80
value                : 107
var_type             : 77 84 85 86
while_loop           : 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (48) program -> . PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (48) program -> PROGRAM . ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    ID              shift and go to state 3


state 3

    (48) program -> PROGRAM ID . SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    SEMICOLON       shift and go to state 4


state 4

    (48) program -> PROGRAM ID SEMICOLON . global_vars goto_main global_declaration main_declaration end_program
    (49) global_vars -> . global_vars global_vars_actions
    (50) global_vars -> . empty
    (139) empty -> .

    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    MAIN            reduce using rule 139 (empty -> .)
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    global_vars                    shift and go to state 5
    empty                          shift and go to state 6

state 5

    (48) program -> PROGRAM ID SEMICOLON global_vars . goto_main global_declaration main_declaration end_program
    (49) global_vars -> global_vars . global_vars_actions
    (37) goto_main -> .
    (51) global_vars_actions -> . declare_var
    (52) global_vars_actions -> . assign_statement
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    MAIN            reduce using rule 37 (goto_main -> .)
    FUNCTION        reduce using rule 37 (goto_main -> .)
    PRINT           reduce using rule 37 (goto_main -> .)
    VAR             shift and go to state 12
    ID              shift and go to state 7

    goto_main                      shift and go to state 8
    global_vars_actions            shift and go to state 9
    declare_var                    shift and go to state 10
    assign_statement               shift and go to state 11
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 6

    (50) global_vars -> empty .

    VAR             reduce using rule 50 (global_vars -> empty .)
    ID              reduce using rule 50 (global_vars -> empty .)
    MAIN            reduce using rule 50 (global_vars -> empty .)
    FUNCTION        reduce using rule 50 (global_vars -> empty .)
    PRINT           reduce using rule 50 (global_vars -> empty .)


state 7

    (122) reference -> ID . check_variable_exists add_id_type_to_stack
    (124) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 8

    (48) program -> PROGRAM ID SEMICOLON global_vars goto_main . global_declaration main_declaration end_program
    (53) global_declaration -> . global_declaration global_statement
    (54) global_declaration -> . empty
    (139) empty -> .

    MAIN            reduce using rule 139 (empty -> .)
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    global_declaration             shift and go to state 17
    empty                          shift and go to state 18

state 9

    (49) global_vars -> global_vars global_vars_actions .

    VAR             reduce using rule 49 (global_vars -> global_vars global_vars_actions .)
    ID              reduce using rule 49 (global_vars -> global_vars global_vars_actions .)
    MAIN            reduce using rule 49 (global_vars -> global_vars global_vars_actions .)
    FUNCTION        reduce using rule 49 (global_vars -> global_vars global_vars_actions .)
    PRINT           reduce using rule 49 (global_vars -> global_vars global_vars_actions .)


state 10

    (51) global_vars_actions -> declare_var .

    VAR             reduce using rule 51 (global_vars_actions -> declare_var .)
    ID              reduce using rule 51 (global_vars_actions -> declare_var .)
    MAIN            reduce using rule 51 (global_vars_actions -> declare_var .)
    FUNCTION        reduce using rule 51 (global_vars_actions -> declare_var .)
    PRINT           reduce using rule 51 (global_vars_actions -> declare_var .)


state 11

    (52) global_vars_actions -> assign_statement .

    VAR             reduce using rule 52 (global_vars_actions -> assign_statement .)
    ID              reduce using rule 52 (global_vars_actions -> assign_statement .)
    MAIN            reduce using rule 52 (global_vars_actions -> assign_statement .)
    FUNCTION        reduce using rule 52 (global_vars_actions -> assign_statement .)
    PRINT           reduce using rule 52 (global_vars_actions -> assign_statement .)


state 12

    (84) declare_var -> VAR . var_type ID init_variable SEMICOLON
    (85) declare_var -> VAR . var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> VAR . var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) var_type -> . FLOAT_TYPE set_current_type
    (89) var_type -> . INT_TYPE set_current_type
    (90) var_type -> . STRING_TYPE set_current_type
    (91) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    var_type                       shift and go to state 19

state 13

    (87) assign_statement -> reference . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 24


state 14

    (123) reference -> array_reference .

    EQUAL           reduce using rule 123 (reference -> array_reference .)
    TIMES           reduce using rule 123 (reference -> array_reference .)
    DIVIDE          reduce using rule 123 (reference -> array_reference .)
    PLUS            reduce using rule 123 (reference -> array_reference .)
    MINUS           reduce using rule 123 (reference -> array_reference .)
    GREATERTHAN     reduce using rule 123 (reference -> array_reference .)
    LESSTHAN        reduce using rule 123 (reference -> array_reference .)
    EQUALEQUAL      reduce using rule 123 (reference -> array_reference .)
    LESSTHANOREQUAL reduce using rule 123 (reference -> array_reference .)
    GREATERTHANOREQUAL reduce using rule 123 (reference -> array_reference .)
    NOTEQUAL        reduce using rule 123 (reference -> array_reference .)
    SEMICOLON       reduce using rule 123 (reference -> array_reference .)
    RBRACKET        reduce using rule 123 (reference -> array_reference .)
    COMMA           reduce using rule 123 (reference -> array_reference .)
    RPARENT         reduce using rule 123 (reference -> array_reference .)


state 15

    (122) reference -> ID check_variable_exists . add_id_type_to_stack
    (20) add_id_type_to_stack -> .

    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)
    TIMES           reduce using rule 20 (add_id_type_to_stack -> .)
    DIVIDE          reduce using rule 20 (add_id_type_to_stack -> .)
    PLUS            reduce using rule 20 (add_id_type_to_stack -> .)
    MINUS           reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHAN     reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHAN        reduce using rule 20 (add_id_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    NOTEQUAL        reduce using rule 20 (add_id_type_to_stack -> .)
    SEMICOLON       reduce using rule 20 (add_id_type_to_stack -> .)
    RBRACKET        reduce using rule 20 (add_id_type_to_stack -> .)
    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)
    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 25

state 16

    (124) array_reference -> ID array_name_reference . LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LBRACKET        shift and go to state 26


state 17

    (48) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration . main_declaration end_program
    (53) global_declaration -> global_declaration . global_statement
    (58) main_declaration -> . MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (55) global_statement -> . declare_function
    (56) global_statement -> . declare_function_void
    (57) global_statement -> . print
    (69) declare_function -> . FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (70) declare_function_void -> . FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON

    MAIN            shift and go to state 29
    FUNCTION        shift and go to state 33
    PRINT           shift and go to state 34

    main_declaration               shift and go to state 27
    global_statement               shift and go to state 28
    declare_function               shift and go to state 30
    declare_function_void          shift and go to state 31
    print                          shift and go to state 32

state 18

    (54) global_declaration -> empty .

    MAIN            reduce using rule 54 (global_declaration -> empty .)
    FUNCTION        reduce using rule 54 (global_declaration -> empty .)
    PRINT           reduce using rule 54 (global_declaration -> empty .)


state 19

    (84) declare_var -> VAR var_type . ID init_variable SEMICOLON
    (85) declare_var -> VAR var_type . ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> VAR var_type . ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON

    ID              shift and go to state 35


state 20

    (88) var_type -> FLOAT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 36

state 21

    (89) var_type -> INT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 37

state 22

    (90) var_type -> STRING_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 38

state 23

    (91) var_type -> BOOL_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 39

state 24

    (87) assign_statement -> reference EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 40

state 25

    (122) reference -> ID check_variable_exists add_id_type_to_stack .

    EQUAL           reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    TIMES           reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    DIVIDE          reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    PLUS            reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    MINUS           reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHAN     reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHAN        reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    EQUALEQUAL      reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    NOTEQUAL        reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    SEMICOLON       reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RBRACKET        reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    COMMA           reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RPARENT         reduce using rule 122 (reference -> ID check_variable_exists add_id_type_to_stack .)


state 26

    (124) array_reference -> ID array_name_reference LBRACKET . add_separator mega_expression RBRACKET remove_separator array_reference_value
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 41

state 27

    (48) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration . end_program
    (47) end_program -> .

    $end            reduce using rule 47 (end_program -> .)

    end_program                    shift and go to state 42

state 28

    (53) global_declaration -> global_declaration global_statement .

    MAIN            reduce using rule 53 (global_declaration -> global_declaration global_statement .)
    FUNCTION        reduce using rule 53 (global_declaration -> global_declaration global_statement .)
    PRINT           reduce using rule 53 (global_declaration -> global_declaration global_statement .)


state 29

    (58) main_declaration -> MAIN . main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (38) main_quad -> .

    LPARENT         reduce using rule 38 (main_quad -> .)

    main_quad                      shift and go to state 43

state 30

    (55) global_statement -> declare_function .

    MAIN            reduce using rule 55 (global_statement -> declare_function .)
    FUNCTION        reduce using rule 55 (global_statement -> declare_function .)
    PRINT           reduce using rule 55 (global_statement -> declare_function .)


state 31

    (56) global_statement -> declare_function_void .

    MAIN            reduce using rule 56 (global_statement -> declare_function_void .)
    FUNCTION        reduce using rule 56 (global_statement -> declare_function_void .)
    PRINT           reduce using rule 56 (global_statement -> declare_function_void .)


state 32

    (57) global_statement -> print .

    MAIN            reduce using rule 57 (global_statement -> print .)
    FUNCTION        reduce using rule 57 (global_statement -> print .)
    PRINT           reduce using rule 57 (global_statement -> print .)


state 33

    (69) declare_function -> FUNCTION . ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (70) declare_function_void -> FUNCTION . ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    ID              shift and go to state 44


state 34

    (135) print -> PRINT . LPARENT print_many RPARENT SEMICOLON

    LPARENT         shift and go to state 45


state 35

    (84) declare_var -> VAR var_type ID . init_variable SEMICOLON
    (85) declare_var -> VAR var_type ID . init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> VAR var_type ID . init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (15) init_variable -> .
    (17) init_array -> .

    SEMICOLON       reduce using rule 15 (init_variable -> .)
    EQUAL           reduce using rule 15 (init_variable -> .)
    LBRACKET        reduce using rule 17 (init_array -> .)

    init_variable                  shift and go to state 46
    init_array                     shift and go to state 47

state 36

    (88) var_type -> FLOAT_TYPE set_current_type .

    ID              reduce using rule 88 (var_type -> FLOAT_TYPE set_current_type .)


state 37

    (89) var_type -> INT_TYPE set_current_type .

    ID              reduce using rule 89 (var_type -> INT_TYPE set_current_type .)


state 38

    (90) var_type -> STRING_TYPE set_current_type .

    ID              reduce using rule 90 (var_type -> STRING_TYPE set_current_type .)


state 39

    (91) var_type -> BOOL_TYPE set_current_type .

    ID              reduce using rule 91 (var_type -> BOOL_TYPE set_current_type .)


state 40

    (87) assign_statement -> reference EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    reference                      shift and go to state 48
    mega_expression                shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 41

    (124) array_reference -> ID array_name_reference LBRACKET add_separator . mega_expression RBRACKET remove_separator array_reference_value
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 75
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 42

    (48) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .

    $end            reduce using rule 48 (program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .)


state 43

    (58) main_declaration -> MAIN main_quad . LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LPARENT         shift and go to state 76


state 44

    (69) declare_function -> FUNCTION ID . new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (70) declare_function_void -> FUNCTION ID . new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (4) new_function_scope -> .

    LESSTHAN        reduce using rule 4 (new_function_scope -> .)

    new_function_scope             shift and go to state 77

state 45

    (135) print -> PRINT LPARENT . print_many RPARENT SEMICOLON
    (136) print_many -> . mega_expression print_value
    (137) print_many -> . mega_expression print_value COMMA print_many
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    print_many                     shift and go to state 78
    mega_expression                shift and go to state 79
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 46

    (84) declare_var -> VAR var_type ID init_variable . SEMICOLON
    (86) assign_statement -> VAR var_type ID init_variable . add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (20) add_id_type_to_stack -> .

    SEMICOLON       shift and go to state 80
    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 81

state 47

    (85) declare_var -> VAR var_type ID init_array . LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON

    LBRACKET        shift and go to state 82


state 48

    (109) value -> reference .

    TIMES           reduce using rule 109 (value -> reference .)
    DIVIDE          reduce using rule 109 (value -> reference .)
    PLUS            reduce using rule 109 (value -> reference .)
    MINUS           reduce using rule 109 (value -> reference .)
    GREATERTHAN     reduce using rule 109 (value -> reference .)
    LESSTHAN        reduce using rule 109 (value -> reference .)
    EQUALEQUAL      reduce using rule 109 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 109 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 109 (value -> reference .)
    NOTEQUAL        reduce using rule 109 (value -> reference .)
    SEMICOLON       reduce using rule 109 (value -> reference .)
    RBRACKET        reduce using rule 109 (value -> reference .)
    COMMA           reduce using rule 109 (value -> reference .)
    RPARENT         reduce using rule 109 (value -> reference .)


state 49

    (87) assign_statement -> reference EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 83


state 50

    (98) mega_expression -> expression .
    (99) mega_expression -> expression . relational_operator expression process_relational_operator
    (92) relational_operator -> . GREATERTHAN add_operator_to_stack
    (93) relational_operator -> . LESSTHAN add_operator_to_stack
    (94) relational_operator -> . EQUALEQUAL add_operator_to_stack
    (95) relational_operator -> . LESSTHANOREQUAL add_operator_to_stack
    (96) relational_operator -> . GREATERTHANOREQUAL add_operator_to_stack
    (97) relational_operator -> . NOTEQUAL add_operator_to_stack

    SEMICOLON       reduce using rule 98 (mega_expression -> expression .)
    RBRACKET        reduce using rule 98 (mega_expression -> expression .)
    COMMA           reduce using rule 98 (mega_expression -> expression .)
    RPARENT         reduce using rule 98 (mega_expression -> expression .)
    GREATERTHAN     shift and go to state 85
    LESSTHAN        shift and go to state 86
    EQUALEQUAL      shift and go to state 87
    LESSTHANOREQUAL shift and go to state 88
    GREATERTHANOREQUAL shift and go to state 89
    NOTEQUAL        shift and go to state 90

    relational_operator            shift and go to state 84

state 51

    (100) expression -> term . process_plus_minus_operators
    (101) expression -> term . process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> term . process_plus_minus_operators MINUS add_operator_to_stack expression
    (26) process_plus_minus_operators -> .

    PLUS            reduce using rule 26 (process_plus_minus_operators -> .)
    MINUS           reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHAN     reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHAN        reduce using rule 26 (process_plus_minus_operators -> .)
    EQUALEQUAL      reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    NOTEQUAL        reduce using rule 26 (process_plus_minus_operators -> .)
    SEMICOLON       reduce using rule 26 (process_plus_minus_operators -> .)
    RBRACKET        reduce using rule 26 (process_plus_minus_operators -> .)
    COMMA           reduce using rule 26 (process_plus_minus_operators -> .)
    RPARENT         reduce using rule 26 (process_plus_minus_operators -> .)

    process_plus_minus_operators   shift and go to state 91

state 52

    (103) term -> factor . process_mult_div_operators
    (104) term -> factor . process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> factor . process_mult_div_operators DIVIDE add_operator_to_stack term
    (27) process_mult_div_operators -> .

    TIMES           reduce using rule 27 (process_mult_div_operators -> .)
    DIVIDE          reduce using rule 27 (process_mult_div_operators -> .)
    PLUS            reduce using rule 27 (process_mult_div_operators -> .)
    MINUS           reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHAN     reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHAN        reduce using rule 27 (process_mult_div_operators -> .)
    EQUALEQUAL      reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    NOTEQUAL        reduce using rule 27 (process_mult_div_operators -> .)
    SEMICOLON       reduce using rule 27 (process_mult_div_operators -> .)
    RBRACKET        reduce using rule 27 (process_mult_div_operators -> .)
    COMMA           reduce using rule 27 (process_mult_div_operators -> .)
    RPARENT         reduce using rule 27 (process_mult_div_operators -> .)

    process_mult_div_operators     shift and go to state 92

state 53

    (106) factor -> LPARENT . add_separator mega_expression RPARENT remove_separator
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 93

state 54

    (107) factor -> value .

    TIMES           reduce using rule 107 (factor -> value .)
    DIVIDE          reduce using rule 107 (factor -> value .)
    PLUS            reduce using rule 107 (factor -> value .)
    MINUS           reduce using rule 107 (factor -> value .)
    GREATERTHAN     reduce using rule 107 (factor -> value .)
    LESSTHAN        reduce using rule 107 (factor -> value .)
    EQUALEQUAL      reduce using rule 107 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 107 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 107 (factor -> value .)
    NOTEQUAL        reduce using rule 107 (factor -> value .)
    SEMICOLON       reduce using rule 107 (factor -> value .)
    RBRACKET        reduce using rule 107 (factor -> value .)
    COMMA           reduce using rule 107 (factor -> value .)
    RPARENT         reduce using rule 107 (factor -> value .)


state 55

    (108) value -> literal .

    TIMES           reduce using rule 108 (value -> literal .)
    DIVIDE          reduce using rule 108 (value -> literal .)
    PLUS            reduce using rule 108 (value -> literal .)
    MINUS           reduce using rule 108 (value -> literal .)
    GREATERTHAN     reduce using rule 108 (value -> literal .)
    LESSTHAN        reduce using rule 108 (value -> literal .)
    EQUALEQUAL      reduce using rule 108 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 108 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 108 (value -> literal .)
    NOTEQUAL        reduce using rule 108 (value -> literal .)
    SEMICOLON       reduce using rule 108 (value -> literal .)
    RBRACKET        reduce using rule 108 (value -> literal .)
    COMMA           reduce using rule 108 (value -> literal .)
    RPARENT         reduce using rule 108 (value -> literal .)


state 56

    (110) value -> function_call_value .

    TIMES           reduce using rule 110 (value -> function_call_value .)
    DIVIDE          reduce using rule 110 (value -> function_call_value .)
    PLUS            reduce using rule 110 (value -> function_call_value .)
    MINUS           reduce using rule 110 (value -> function_call_value .)
    GREATERTHAN     reduce using rule 110 (value -> function_call_value .)
    LESSTHAN        reduce using rule 110 (value -> function_call_value .)
    EQUALEQUAL      reduce using rule 110 (value -> function_call_value .)
    LESSTHANOREQUAL reduce using rule 110 (value -> function_call_value .)
    GREATERTHANOREQUAL reduce using rule 110 (value -> function_call_value .)
    NOTEQUAL        reduce using rule 110 (value -> function_call_value .)
    SEMICOLON       reduce using rule 110 (value -> function_call_value .)
    RBRACKET        reduce using rule 110 (value -> function_call_value .)
    COMMA           reduce using rule 110 (value -> function_call_value .)
    RPARENT         reduce using rule 110 (value -> function_call_value .)


state 57

    (111) value -> absolute_call_value .

    TIMES           reduce using rule 111 (value -> absolute_call_value .)
    DIVIDE          reduce using rule 111 (value -> absolute_call_value .)
    PLUS            reduce using rule 111 (value -> absolute_call_value .)
    MINUS           reduce using rule 111 (value -> absolute_call_value .)
    GREATERTHAN     reduce using rule 111 (value -> absolute_call_value .)
    LESSTHAN        reduce using rule 111 (value -> absolute_call_value .)
    EQUALEQUAL      reduce using rule 111 (value -> absolute_call_value .)
    LESSTHANOREQUAL reduce using rule 111 (value -> absolute_call_value .)
    GREATERTHANOREQUAL reduce using rule 111 (value -> absolute_call_value .)
    NOTEQUAL        reduce using rule 111 (value -> absolute_call_value .)
    SEMICOLON       reduce using rule 111 (value -> absolute_call_value .)
    RBRACKET        reduce using rule 111 (value -> absolute_call_value .)
    COMMA           reduce using rule 111 (value -> absolute_call_value .)
    RPARENT         reduce using rule 111 (value -> absolute_call_value .)


state 58

    (112) value -> sqrt_call_value .

    TIMES           reduce using rule 112 (value -> sqrt_call_value .)
    DIVIDE          reduce using rule 112 (value -> sqrt_call_value .)
    PLUS            reduce using rule 112 (value -> sqrt_call_value .)
    MINUS           reduce using rule 112 (value -> sqrt_call_value .)
    GREATERTHAN     reduce using rule 112 (value -> sqrt_call_value .)
    LESSTHAN        reduce using rule 112 (value -> sqrt_call_value .)
    EQUALEQUAL      reduce using rule 112 (value -> sqrt_call_value .)
    LESSTHANOREQUAL reduce using rule 112 (value -> sqrt_call_value .)
    GREATERTHANOREQUAL reduce using rule 112 (value -> sqrt_call_value .)
    NOTEQUAL        reduce using rule 112 (value -> sqrt_call_value .)
    SEMICOLON       reduce using rule 112 (value -> sqrt_call_value .)
    RBRACKET        reduce using rule 112 (value -> sqrt_call_value .)
    COMMA           reduce using rule 112 (value -> sqrt_call_value .)
    RPARENT         reduce using rule 112 (value -> sqrt_call_value .)


state 59

    (113) value -> trunc_call_value .

    TIMES           reduce using rule 113 (value -> trunc_call_value .)
    DIVIDE          reduce using rule 113 (value -> trunc_call_value .)
    PLUS            reduce using rule 113 (value -> trunc_call_value .)
    MINUS           reduce using rule 113 (value -> trunc_call_value .)
    GREATERTHAN     reduce using rule 113 (value -> trunc_call_value .)
    LESSTHAN        reduce using rule 113 (value -> trunc_call_value .)
    EQUALEQUAL      reduce using rule 113 (value -> trunc_call_value .)
    LESSTHANOREQUAL reduce using rule 113 (value -> trunc_call_value .)
    GREATERTHANOREQUAL reduce using rule 113 (value -> trunc_call_value .)
    NOTEQUAL        reduce using rule 113 (value -> trunc_call_value .)
    SEMICOLON       reduce using rule 113 (value -> trunc_call_value .)
    RBRACKET        reduce using rule 113 (value -> trunc_call_value .)
    COMMA           reduce using rule 113 (value -> trunc_call_value .)
    RPARENT         reduce using rule 113 (value -> trunc_call_value .)


state 60

    (114) value -> substr_call_value .

    TIMES           reduce using rule 114 (value -> substr_call_value .)
    DIVIDE          reduce using rule 114 (value -> substr_call_value .)
    PLUS            reduce using rule 114 (value -> substr_call_value .)
    MINUS           reduce using rule 114 (value -> substr_call_value .)
    GREATERTHAN     reduce using rule 114 (value -> substr_call_value .)
    LESSTHAN        reduce using rule 114 (value -> substr_call_value .)
    EQUALEQUAL      reduce using rule 114 (value -> substr_call_value .)
    LESSTHANOREQUAL reduce using rule 114 (value -> substr_call_value .)
    GREATERTHANOREQUAL reduce using rule 114 (value -> substr_call_value .)
    NOTEQUAL        reduce using rule 114 (value -> substr_call_value .)
    SEMICOLON       reduce using rule 114 (value -> substr_call_value .)
    RBRACKET        reduce using rule 114 (value -> substr_call_value .)
    COMMA           reduce using rule 114 (value -> substr_call_value .)
    RPARENT         reduce using rule 114 (value -> substr_call_value .)


state 61

    (115) value -> to_lower_call_value .

    TIMES           reduce using rule 115 (value -> to_lower_call_value .)
    DIVIDE          reduce using rule 115 (value -> to_lower_call_value .)
    PLUS            reduce using rule 115 (value -> to_lower_call_value .)
    MINUS           reduce using rule 115 (value -> to_lower_call_value .)
    GREATERTHAN     reduce using rule 115 (value -> to_lower_call_value .)
    LESSTHAN        reduce using rule 115 (value -> to_lower_call_value .)
    EQUALEQUAL      reduce using rule 115 (value -> to_lower_call_value .)
    LESSTHANOREQUAL reduce using rule 115 (value -> to_lower_call_value .)
    GREATERTHANOREQUAL reduce using rule 115 (value -> to_lower_call_value .)
    NOTEQUAL        reduce using rule 115 (value -> to_lower_call_value .)
    SEMICOLON       reduce using rule 115 (value -> to_lower_call_value .)
    RBRACKET        reduce using rule 115 (value -> to_lower_call_value .)
    COMMA           reduce using rule 115 (value -> to_lower_call_value .)
    RPARENT         reduce using rule 115 (value -> to_lower_call_value .)


state 62

    (116) value -> to_upper_call_value .

    TIMES           reduce using rule 116 (value -> to_upper_call_value .)
    DIVIDE          reduce using rule 116 (value -> to_upper_call_value .)
    PLUS            reduce using rule 116 (value -> to_upper_call_value .)
    MINUS           reduce using rule 116 (value -> to_upper_call_value .)
    GREATERTHAN     reduce using rule 116 (value -> to_upper_call_value .)
    LESSTHAN        reduce using rule 116 (value -> to_upper_call_value .)
    EQUALEQUAL      reduce using rule 116 (value -> to_upper_call_value .)
    LESSTHANOREQUAL reduce using rule 116 (value -> to_upper_call_value .)
    GREATERTHANOREQUAL reduce using rule 116 (value -> to_upper_call_value .)
    NOTEQUAL        reduce using rule 116 (value -> to_upper_call_value .)
    SEMICOLON       reduce using rule 116 (value -> to_upper_call_value .)
    RBRACKET        reduce using rule 116 (value -> to_upper_call_value .)
    COMMA           reduce using rule 116 (value -> to_upper_call_value .)
    RPARENT         reduce using rule 116 (value -> to_upper_call_value .)


state 63

    (117) literal -> FLOAT . add_float_type_to_stack
    (21) add_float_type_to_stack -> .

    TIMES           reduce using rule 21 (add_float_type_to_stack -> .)
    DIVIDE          reduce using rule 21 (add_float_type_to_stack -> .)
    PLUS            reduce using rule 21 (add_float_type_to_stack -> .)
    MINUS           reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHAN     reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHAN        reduce using rule 21 (add_float_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    NOTEQUAL        reduce using rule 21 (add_float_type_to_stack -> .)
    SEMICOLON       reduce using rule 21 (add_float_type_to_stack -> .)
    RBRACKET        reduce using rule 21 (add_float_type_to_stack -> .)
    COMMA           reduce using rule 21 (add_float_type_to_stack -> .)
    RPARENT         reduce using rule 21 (add_float_type_to_stack -> .)

    add_float_type_to_stack        shift and go to state 94

state 64

    (118) literal -> INT . add_int_type_to_stack
    (22) add_int_type_to_stack -> .

    TIMES           reduce using rule 22 (add_int_type_to_stack -> .)
    DIVIDE          reduce using rule 22 (add_int_type_to_stack -> .)
    PLUS            reduce using rule 22 (add_int_type_to_stack -> .)
    MINUS           reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHAN     reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHAN        reduce using rule 22 (add_int_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    NOTEQUAL        reduce using rule 22 (add_int_type_to_stack -> .)
    SEMICOLON       reduce using rule 22 (add_int_type_to_stack -> .)
    RBRACKET        reduce using rule 22 (add_int_type_to_stack -> .)
    COMMA           reduce using rule 22 (add_int_type_to_stack -> .)
    RPARENT         reduce using rule 22 (add_int_type_to_stack -> .)

    add_int_type_to_stack          shift and go to state 95

state 65

    (119) literal -> STRING . add_string_type_stack
    (23) add_string_type_stack -> .

    TIMES           reduce using rule 23 (add_string_type_stack -> .)
    DIVIDE          reduce using rule 23 (add_string_type_stack -> .)
    PLUS            reduce using rule 23 (add_string_type_stack -> .)
    MINUS           reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHAN     reduce using rule 23 (add_string_type_stack -> .)
    LESSTHAN        reduce using rule 23 (add_string_type_stack -> .)
    EQUALEQUAL      reduce using rule 23 (add_string_type_stack -> .)
    LESSTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    NOTEQUAL        reduce using rule 23 (add_string_type_stack -> .)
    SEMICOLON       reduce using rule 23 (add_string_type_stack -> .)
    RBRACKET        reduce using rule 23 (add_string_type_stack -> .)
    COMMA           reduce using rule 23 (add_string_type_stack -> .)
    RPARENT         reduce using rule 23 (add_string_type_stack -> .)

    add_string_type_stack          shift and go to state 96

state 66

    (120) literal -> TRUE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 97

state 67

    (121) literal -> FALSE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 98

state 68

    (122) reference -> ID . check_variable_exists add_id_type_to_stack
    (78) function_call_value -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (124) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (8) init_func_call -> .
    (28) array_name_reference -> .

    TIMES           reduce using rule 16 (check_variable_exists -> .)
    DIVIDE          reduce using rule 16 (check_variable_exists -> .)
    PLUS            reduce using rule 16 (check_variable_exists -> .)
    MINUS           reduce using rule 16 (check_variable_exists -> .)
    GREATERTHAN     reduce using rule 16 (check_variable_exists -> .)
    LESSTHAN        reduce using rule 16 (check_variable_exists -> .)
    EQUALEQUAL      reduce using rule 16 (check_variable_exists -> .)
    LESSTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    GREATERTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    NOTEQUAL        reduce using rule 16 (check_variable_exists -> .)
    SEMICOLON       reduce using rule 16 (check_variable_exists -> .)
    RBRACKET        reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LPARENT         reduce using rule 8 (init_func_call -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    init_func_call                 shift and go to state 99
    array_name_reference           shift and go to state 16

state 69

    (129) absolute_call_value -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_value RPARENT

    LPARENT         shift and go to state 100


state 70

    (130) sqrt_call_value -> SQRT . LPARENT mega_expression check_sqrt_argument_value RPARENT

    LPARENT         shift and go to state 101


state 71

    (131) trunc_call_value -> TRUNC . LPARENT mega_expression check_trunc_argument_value RPARENT

    LPARENT         shift and go to state 102


state 72

    (134) substr_call_value -> SUBSTR . LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    LPARENT         shift and go to state 103


state 73

    (132) to_lower_call_value -> TOLOWER . LPARENT mega_expression check_to_lower_argument_value RPARENT

    LPARENT         shift and go to state 104


state 74

    (133) to_upper_call_value -> TOUPPER . LPARENT mega_expression check_to_upper_argument_value RPARENT

    LPARENT         shift and go to state 105


state 75

    (124) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression . RBRACKET remove_separator array_reference_value

    RBRACKET        shift and go to state 106


state 76

    (58) main_declaration -> MAIN main_quad LPARENT . RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    RPARENT         shift and go to state 107


state 77

    (69) declare_function -> FUNCTION ID new_function_scope . LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (70) declare_function_void -> FUNCTION ID new_function_scope . LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LESSTHAN        shift and go to state 108


state 78

    (135) print -> PRINT LPARENT print_many . RPARENT SEMICOLON

    RPARENT         shift and go to state 109


state 79

    (136) print_many -> mega_expression . print_value
    (137) print_many -> mega_expression . print_value COMMA print_many
    (45) print_value -> .

    COMMA           reduce using rule 45 (print_value -> .)
    RPARENT         reduce using rule 45 (print_value -> .)

    print_value                    shift and go to state 110

state 80

    (84) declare_var -> VAR var_type ID init_variable SEMICOLON .

    VAR             reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ID              reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    MAIN            reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    FUNCTION        reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    PRINT           reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RBRACE          reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    IF              reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    WHILE           reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RETURN          reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    READ            reduce using rule 84 (declare_var -> VAR var_type ID init_variable SEMICOLON .)


state 81

    (86) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 111


state 82

    (85) declare_var -> VAR var_type ID init_array LBRACKET . INT init_array_size RBRACKET init_array_variable SEMICOLON

    INT             shift and go to state 112


state 83

    (87) assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 87 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 84

    (99) mega_expression -> expression relational_operator . expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    expression                     shift and go to state 113
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 85

    (92) relational_operator -> GREATERTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 114

state 86

    (93) relational_operator -> LESSTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 115

state 87

    (94) relational_operator -> EQUALEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 116

state 88

    (95) relational_operator -> LESSTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 117

state 89

    (96) relational_operator -> GREATERTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 118

state 90

    (97) relational_operator -> NOTEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 119

state 91

    (100) expression -> term process_plus_minus_operators .
    (101) expression -> term process_plus_minus_operators . PLUS add_operator_to_stack expression
    (102) expression -> term process_plus_minus_operators . MINUS add_operator_to_stack expression

    GREATERTHAN     reduce using rule 100 (expression -> term process_plus_minus_operators .)
    LESSTHAN        reduce using rule 100 (expression -> term process_plus_minus_operators .)
    EQUALEQUAL      reduce using rule 100 (expression -> term process_plus_minus_operators .)
    LESSTHANOREQUAL reduce using rule 100 (expression -> term process_plus_minus_operators .)
    GREATERTHANOREQUAL reduce using rule 100 (expression -> term process_plus_minus_operators .)
    NOTEQUAL        reduce using rule 100 (expression -> term process_plus_minus_operators .)
    SEMICOLON       reduce using rule 100 (expression -> term process_plus_minus_operators .)
    RBRACKET        reduce using rule 100 (expression -> term process_plus_minus_operators .)
    COMMA           reduce using rule 100 (expression -> term process_plus_minus_operators .)
    RPARENT         reduce using rule 100 (expression -> term process_plus_minus_operators .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121


state 92

    (103) term -> factor process_mult_div_operators .
    (104) term -> factor process_mult_div_operators . TIMES add_operator_to_stack term
    (105) term -> factor process_mult_div_operators . DIVIDE add_operator_to_stack term

    PLUS            reduce using rule 103 (term -> factor process_mult_div_operators .)
    MINUS           reduce using rule 103 (term -> factor process_mult_div_operators .)
    GREATERTHAN     reduce using rule 103 (term -> factor process_mult_div_operators .)
    LESSTHAN        reduce using rule 103 (term -> factor process_mult_div_operators .)
    EQUALEQUAL      reduce using rule 103 (term -> factor process_mult_div_operators .)
    LESSTHANOREQUAL reduce using rule 103 (term -> factor process_mult_div_operators .)
    GREATERTHANOREQUAL reduce using rule 103 (term -> factor process_mult_div_operators .)
    NOTEQUAL        reduce using rule 103 (term -> factor process_mult_div_operators .)
    SEMICOLON       reduce using rule 103 (term -> factor process_mult_div_operators .)
    RBRACKET        reduce using rule 103 (term -> factor process_mult_div_operators .)
    COMMA           reduce using rule 103 (term -> factor process_mult_div_operators .)
    RPARENT         reduce using rule 103 (term -> factor process_mult_div_operators .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123


state 93

    (106) factor -> LPARENT add_separator . mega_expression RPARENT remove_separator
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 124
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 94

    (117) literal -> FLOAT add_float_type_to_stack .

    TIMES           reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    DIVIDE          reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    PLUS            reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    MINUS           reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHAN     reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHAN        reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    EQUALEQUAL      reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    NOTEQUAL        reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    SEMICOLON       reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    RBRACKET        reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    COMMA           reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)
    RPARENT         reduce using rule 117 (literal -> FLOAT add_float_type_to_stack .)


state 95

    (118) literal -> INT add_int_type_to_stack .

    TIMES           reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    DIVIDE          reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    PLUS            reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    MINUS           reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    GREATERTHAN     reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    LESSTHAN        reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    EQUALEQUAL      reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    NOTEQUAL        reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    SEMICOLON       reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    RBRACKET        reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    COMMA           reduce using rule 118 (literal -> INT add_int_type_to_stack .)
    RPARENT         reduce using rule 118 (literal -> INT add_int_type_to_stack .)


state 96

    (119) literal -> STRING add_string_type_stack .

    TIMES           reduce using rule 119 (literal -> STRING add_string_type_stack .)
    DIVIDE          reduce using rule 119 (literal -> STRING add_string_type_stack .)
    PLUS            reduce using rule 119 (literal -> STRING add_string_type_stack .)
    MINUS           reduce using rule 119 (literal -> STRING add_string_type_stack .)
    GREATERTHAN     reduce using rule 119 (literal -> STRING add_string_type_stack .)
    LESSTHAN        reduce using rule 119 (literal -> STRING add_string_type_stack .)
    EQUALEQUAL      reduce using rule 119 (literal -> STRING add_string_type_stack .)
    LESSTHANOREQUAL reduce using rule 119 (literal -> STRING add_string_type_stack .)
    GREATERTHANOREQUAL reduce using rule 119 (literal -> STRING add_string_type_stack .)
    NOTEQUAL        reduce using rule 119 (literal -> STRING add_string_type_stack .)
    SEMICOLON       reduce using rule 119 (literal -> STRING add_string_type_stack .)
    RBRACKET        reduce using rule 119 (literal -> STRING add_string_type_stack .)
    COMMA           reduce using rule 119 (literal -> STRING add_string_type_stack .)
    RPARENT         reduce using rule 119 (literal -> STRING add_string_type_stack .)


state 97

    (120) literal -> TRUE add_boolean_type_to_stack .

    TIMES           reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    PLUS            reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    MINUS           reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    COMMA           reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 120 (literal -> TRUE add_boolean_type_to_stack .)


state 98

    (121) literal -> FALSE add_boolean_type_to_stack .

    TIMES           reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    PLUS            reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    MINUS           reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    COMMA           reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 121 (literal -> FALSE add_boolean_type_to_stack .)


state 99

    (78) function_call_value -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad

    LPARENT         shift and go to state 125


state 100

    (129) absolute_call_value -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_value RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 126
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 101

    (130) sqrt_call_value -> SQRT LPARENT . mega_expression check_sqrt_argument_value RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 127
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 102

    (131) trunc_call_value -> TRUNC LPARENT . mega_expression check_trunc_argument_value RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 128
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 103

    (134) substr_call_value -> SUBSTR LPARENT . reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 129
    array_reference                shift and go to state 14

state 104

    (132) to_lower_call_value -> TOLOWER LPARENT . mega_expression check_to_lower_argument_value RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 130
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 105

    (133) to_upper_call_value -> TOUPPER LPARENT . mega_expression check_to_upper_argument_value RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 131
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 106

    (124) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET . remove_separator array_reference_value
    (31) remove_separator -> .

    EQUAL           reduce using rule 31 (remove_separator -> .)
    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 132

state 107

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT . LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LBRACE          shift and go to state 133


state 108

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN . function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN . VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) function_type -> . FLOAT_TYPE set_func_return_type
    (72) function_type -> . INT_TYPE set_func_return_type
    (73) function_type -> . STRING_TYPE set_func_return_type
    (74) function_type -> . BOOL_TYPE set_func_return_type

    VOID_TYPE       shift and go to state 135
    FLOAT_TYPE      shift and go to state 136
    INT_TYPE        shift and go to state 137
    STRING_TYPE     shift and go to state 138
    BOOL_TYPE       shift and go to state 139

    function_type                  shift and go to state 134

state 109

    (135) print -> PRINT LPARENT print_many RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 140


state 110

    (136) print_many -> mega_expression print_value .
    (137) print_many -> mega_expression print_value . COMMA print_many

    RPARENT         reduce using rule 136 (print_many -> mega_expression print_value .)
    COMMA           shift and go to state 141


state 111

    (86) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 142

state 112

    (85) declare_var -> VAR var_type ID init_array LBRACKET INT . init_array_size RBRACKET init_array_variable SEMICOLON
    (18) init_array_size -> .

    RBRACKET        reduce using rule 18 (init_array_size -> .)

    init_array_size                shift and go to state 143

state 113

    (99) mega_expression -> expression relational_operator expression . process_relational_operator
    (25) process_relational_operator -> .

    SEMICOLON       reduce using rule 25 (process_relational_operator -> .)
    RBRACKET        reduce using rule 25 (process_relational_operator -> .)
    COMMA           reduce using rule 25 (process_relational_operator -> .)
    RPARENT         reduce using rule 25 (process_relational_operator -> .)

    process_relational_operator    shift and go to state 144

state 114

    (92) relational_operator -> GREATERTHAN add_operator_to_stack .

    LPARENT         reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    INT             reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    STRING          reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUE            reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FALSE           reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ID              reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SQRT            reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 92 (relational_operator -> GREATERTHAN add_operator_to_stack .)


state 115

    (93) relational_operator -> LESSTHAN add_operator_to_stack .

    LPARENT         reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    INT             reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    STRING          reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUE            reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FALSE           reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ID              reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SQRT            reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 93 (relational_operator -> LESSTHAN add_operator_to_stack .)


state 116

    (94) relational_operator -> EQUALEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    INT             reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    STRING          reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ID              reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 94 (relational_operator -> EQUALEQUAL add_operator_to_stack .)


state 117

    (95) relational_operator -> LESSTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 95 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)


state 118

    (96) relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 96 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)


state 119

    (97) relational_operator -> NOTEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    INT             reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    STRING          reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ID              reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 97 (relational_operator -> NOTEQUAL add_operator_to_stack .)


state 120

    (101) expression -> term process_plus_minus_operators PLUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 145

state 121

    (102) expression -> term process_plus_minus_operators MINUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 146

state 122

    (104) term -> factor process_mult_div_operators TIMES . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 147

state 123

    (105) term -> factor process_mult_div_operators DIVIDE . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 148

state 124

    (106) factor -> LPARENT add_separator mega_expression . RPARENT remove_separator

    RPARENT         shift and go to state 149


state 125

    (78) function_call_value -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad
    (81) arg_list -> . arg
    (82) arg_list -> . arg COMMA increment_argument_counter arg_list
    (83) arg -> . mega_expression check_arg_count_type
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    arg_list                       shift and go to state 150
    arg                            shift and go to state 151
    mega_expression                shift and go to state 152
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 126

    (129) absolute_call_value -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_value RPARENT
    (39) check_absolute_argument_value -> .

    RPARENT         reduce using rule 39 (check_absolute_argument_value -> .)

    check_absolute_argument_value  shift and go to state 153

state 127

    (130) sqrt_call_value -> SQRT LPARENT mega_expression . check_sqrt_argument_value RPARENT
    (41) check_sqrt_argument_value -> .

    RPARENT         reduce using rule 41 (check_sqrt_argument_value -> .)

    check_sqrt_argument_value      shift and go to state 154

state 128

    (131) trunc_call_value -> TRUNC LPARENT mega_expression . check_trunc_argument_value RPARENT
    (40) check_trunc_argument_value -> .

    RPARENT         reduce using rule 40 (check_trunc_argument_value -> .)

    check_trunc_argument_value     shift and go to state 155

state 129

    (134) substr_call_value -> SUBSTR LPARENT reference . COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 156


state 130

    (132) to_lower_call_value -> TOLOWER LPARENT mega_expression . check_to_lower_argument_value RPARENT
    (43) check_to_lower_argument_value -> .

    RPARENT         reduce using rule 43 (check_to_lower_argument_value -> .)

    check_to_lower_argument_value  shift and go to state 157

state 131

    (133) to_upper_call_value -> TOUPPER LPARENT mega_expression . check_to_upper_argument_value RPARENT
    (44) check_to_upper_argument_value -> .

    RPARENT         reduce using rule 44 (check_to_upper_argument_value -> .)

    check_to_upper_argument_value  shift and go to state 158

state 132

    (124) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator . array_reference_value
    (29) array_reference_value -> .

    EQUAL           reduce using rule 29 (array_reference_value -> .)
    TIMES           reduce using rule 29 (array_reference_value -> .)
    DIVIDE          reduce using rule 29 (array_reference_value -> .)
    PLUS            reduce using rule 29 (array_reference_value -> .)
    MINUS           reduce using rule 29 (array_reference_value -> .)
    GREATERTHAN     reduce using rule 29 (array_reference_value -> .)
    LESSTHAN        reduce using rule 29 (array_reference_value -> .)
    EQUALEQUAL      reduce using rule 29 (array_reference_value -> .)
    LESSTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    GREATERTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    NOTEQUAL        reduce using rule 29 (array_reference_value -> .)
    SEMICOLON       reduce using rule 29 (array_reference_value -> .)
    RBRACKET        reduce using rule 29 (array_reference_value -> .)
    COMMA           reduce using rule 29 (array_reference_value -> .)
    RPARENT         reduce using rule 29 (array_reference_value -> .)

    array_reference_value          shift and go to state 159

state 133

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE . new_scope statement_list RBRACE close_current_scope SEMICOLON
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 160

state 134

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 161


state 135

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE . set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 162

state 136

    (71) function_type -> FLOAT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 163

state 137

    (72) function_type -> INT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 164

state 138

    (73) function_type -> STRING_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 165

state 139

    (74) function_type -> BOOL_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 166

state 140

    (135) print -> PRINT LPARENT print_many RPARENT SEMICOLON .

    MAIN            reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    PRINT           reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RBRACE          reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    VAR             reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ID              reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    IF              reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    WHILE           reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RETURN          reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    READ            reduce using rule 135 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)


state 141

    (137) print_many -> mega_expression print_value COMMA . print_many
    (136) print_many -> . mega_expression print_value
    (137) print_many -> . mega_expression print_value COMMA print_many
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 79
    print_many                     shift and go to state 167
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 142

    (86) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 168
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 143

    (85) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size . RBRACKET init_array_variable SEMICOLON

    RBRACKET        shift and go to state 169


state 144

    (99) mega_expression -> expression relational_operator expression process_relational_operator .

    SEMICOLON       reduce using rule 99 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RBRACKET        reduce using rule 99 (mega_expression -> expression relational_operator expression process_relational_operator .)
    COMMA           reduce using rule 99 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RPARENT         reduce using rule 99 (mega_expression -> expression relational_operator expression process_relational_operator .)


state 145

    (101) expression -> term process_plus_minus_operators PLUS add_operator_to_stack . expression
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    term                           shift and go to state 51
    expression                     shift and go to state 170
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 146

    (102) expression -> term process_plus_minus_operators MINUS add_operator_to_stack . expression
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    term                           shift and go to state 51
    expression                     shift and go to state 171
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 147

    (104) term -> factor process_mult_div_operators TIMES add_operator_to_stack . term
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    factor                         shift and go to state 52
    term                           shift and go to state 172
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 148

    (105) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack . term
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    factor                         shift and go to state 52
    term                           shift and go to state 173
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 149

    (106) factor -> LPARENT add_separator mega_expression RPARENT . remove_separator
    (31) remove_separator -> .

    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 174

state 150

    (78) function_call_value -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad

    RPARENT         shift and go to state 175


state 151

    (81) arg_list -> arg .
    (82) arg_list -> arg . COMMA increment_argument_counter arg_list

    RPARENT         reduce using rule 81 (arg_list -> arg .)
    COMMA           shift and go to state 176


state 152

    (83) arg -> mega_expression . check_arg_count_type
    (10) check_arg_count_type -> .

    COMMA           reduce using rule 10 (check_arg_count_type -> .)
    RPARENT         reduce using rule 10 (check_arg_count_type -> .)

    check_arg_count_type           shift and go to state 177

state 153

    (129) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value . RPARENT

    RPARENT         shift and go to state 178


state 154

    (130) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value . RPARENT

    RPARENT         shift and go to state 179


state 155

    (131) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value . RPARENT

    RPARENT         shift and go to state 180


state 156

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA . mega_expression COMMA mega_expression substr_quad RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    reference                      shift and go to state 48
    mega_expression                shift and go to state 181
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 157

    (132) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value . RPARENT

    RPARENT         shift and go to state 182


state 158

    (133) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value . RPARENT

    RPARENT         shift and go to state 183


state 159

    (124) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .

    EQUAL           reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    TIMES           reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    DIVIDE          reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    PLUS            reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    MINUS           reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHAN     reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHAN        reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    EQUALEQUAL      reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHANOREQUAL reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHANOREQUAL reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    NOTEQUAL        reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    SEMICOLON       reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RBRACKET        reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    COMMA           reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RPARENT         reduce using rule 124 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)


state 160

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope . statement_list RBRACE close_current_scope SEMICOLON
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 184
    empty                          shift and go to state 185

state 161

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 186


state 162

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 187


state 163

    (71) function_type -> FLOAT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 71 (function_type -> FLOAT_TYPE set_func_return_type .)


state 164

    (72) function_type -> INT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 72 (function_type -> INT_TYPE set_func_return_type .)


state 165

    (73) function_type -> STRING_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 73 (function_type -> STRING_TYPE set_func_return_type .)


state 166

    (74) function_type -> BOOL_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 74 (function_type -> BOOL_TYPE set_func_return_type .)


state 167

    (137) print_many -> mega_expression print_value COMMA print_many .

    RPARENT         reduce using rule 137 (print_many -> mega_expression print_value COMMA print_many .)


state 168

    (86) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 188


state 169

    (85) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET . init_array_variable SEMICOLON
    (19) init_array_variable -> .

    SEMICOLON       reduce using rule 19 (init_array_variable -> .)

    init_array_variable            shift and go to state 189

state 170

    (101) expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    COMMA           reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 101 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)


state 171

    (102) expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    COMMA           reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 102 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)


state 172

    (104) term -> factor process_mult_div_operators TIMES add_operator_to_stack term .

    PLUS            reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    MINUS           reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHAN        reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    SEMICOLON       reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RBRACKET        reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    COMMA           reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RPARENT         reduce using rule 104 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)


state 173

    (105) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .

    PLUS            reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    MINUS           reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHAN        reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    SEMICOLON       reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RBRACKET        reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    COMMA           reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RPARENT         reduce using rule 105 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)


state 174

    (106) factor -> LPARENT add_separator mega_expression RPARENT remove_separator .

    TIMES           reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    DIVIDE          reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    PLUS            reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    MINUS           reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHAN     reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHAN        reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    EQUALEQUAL      reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHANOREQUAL reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHANOREQUAL reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    NOTEQUAL        reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    SEMICOLON       reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RBRACKET        reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    COMMA           reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RPARENT         reduce using rule 106 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)


state 175

    (78) function_call_value -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad
    (11) create_gosub_quad -> .

    TIMES           reduce using rule 11 (create_gosub_quad -> .)
    DIVIDE          reduce using rule 11 (create_gosub_quad -> .)
    PLUS            reduce using rule 11 (create_gosub_quad -> .)
    MINUS           reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHAN     reduce using rule 11 (create_gosub_quad -> .)
    LESSTHAN        reduce using rule 11 (create_gosub_quad -> .)
    EQUALEQUAL      reduce using rule 11 (create_gosub_quad -> .)
    LESSTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    NOTEQUAL        reduce using rule 11 (create_gosub_quad -> .)
    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)
    RBRACKET        reduce using rule 11 (create_gosub_quad -> .)
    COMMA           reduce using rule 11 (create_gosub_quad -> .)
    RPARENT         reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 190

state 176

    (82) arg_list -> arg COMMA . increment_argument_counter arg_list
    (9) increment_argument_counter -> .

    LPARENT         reduce using rule 9 (increment_argument_counter -> .)
    FLOAT           reduce using rule 9 (increment_argument_counter -> .)
    INT             reduce using rule 9 (increment_argument_counter -> .)
    STRING          reduce using rule 9 (increment_argument_counter -> .)
    TRUE            reduce using rule 9 (increment_argument_counter -> .)
    FALSE           reduce using rule 9 (increment_argument_counter -> .)
    ID              reduce using rule 9 (increment_argument_counter -> .)
    ABSOLUTE        reduce using rule 9 (increment_argument_counter -> .)
    SQRT            reduce using rule 9 (increment_argument_counter -> .)
    TRUNC           reduce using rule 9 (increment_argument_counter -> .)
    SUBSTR          reduce using rule 9 (increment_argument_counter -> .)
    TOLOWER         reduce using rule 9 (increment_argument_counter -> .)
    TOUPPER         reduce using rule 9 (increment_argument_counter -> .)

    increment_argument_counter     shift and go to state 191

state 177

    (83) arg -> mega_expression check_arg_count_type .

    COMMA           reduce using rule 83 (arg -> mega_expression check_arg_count_type .)
    RPARENT         reduce using rule 83 (arg -> mega_expression check_arg_count_type .)


state 178

    (129) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .

    TIMES           reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    DIVIDE          reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    PLUS            reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    MINUS           reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHAN        reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    SEMICOLON       reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RBRACKET        reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    COMMA           reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RPARENT         reduce using rule 129 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)


state 179

    (130) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .

    TIMES           reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    DIVIDE          reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    PLUS            reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    MINUS           reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHAN        reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    SEMICOLON       reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RBRACKET        reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    COMMA           reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RPARENT         reduce using rule 130 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)


state 180

    (131) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .

    TIMES           reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    DIVIDE          reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    PLUS            reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    MINUS           reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHAN        reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    SEMICOLON       reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RBRACKET        reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    COMMA           reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RPARENT         reduce using rule 131 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)


state 181

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression . COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 192


state 182

    (132) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .

    TIMES           reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    DIVIDE          reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    PLUS            reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    MINUS           reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHAN        reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    SEMICOLON       reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RBRACKET        reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    COMMA           reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RPARENT         reduce using rule 132 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)


state 183

    (133) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .

    TIMES           reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    DIVIDE          reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    PLUS            reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    MINUS           reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHAN        reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    SEMICOLON       reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RBRACKET        reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    COMMA           reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RPARENT         reduce using rule 133 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)


state 184

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list . RBRACE close_current_scope SEMICOLON
    (59) statement_list -> statement_list . statement
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 193
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    RETURN          shift and go to state 206
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    return                         shift and go to state 200
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 185

    (60) statement_list -> empty .

    RBRACE          reduce using rule 60 (statement_list -> empty .)
    VAR             reduce using rule 60 (statement_list -> empty .)
    ID              reduce using rule 60 (statement_list -> empty .)
    IF              reduce using rule 60 (statement_list -> empty .)
    WHILE           reduce using rule 60 (statement_list -> empty .)
    RETURN          reduce using rule 60 (statement_list -> empty .)
    READ            reduce using rule 60 (statement_list -> empty .)
    PRINT           reduce using rule 60 (statement_list -> empty .)


state 186

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (75) params -> . param
    (76) params -> . param COMMA params
    (77) param -> . var_type ID init_param
    (88) var_type -> . FLOAT_TYPE set_current_type
    (89) var_type -> . INT_TYPE set_current_type
    (90) var_type -> . STRING_TYPE set_current_type
    (91) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 208
    param                          shift and go to state 209
    var_type                       shift and go to state 210

state 187

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 211


state 188

    (86) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 86 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 189

    (85) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable . SEMICOLON

    SEMICOLON       shift and go to state 212


state 190

    (78) function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .

    TIMES           reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    DIVIDE          reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    PLUS            reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    MINUS           reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHAN     reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHAN        reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    EQUALEQUAL      reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHANOREQUAL reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHANOREQUAL reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    NOTEQUAL        reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    SEMICOLON       reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RBRACKET        reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    COMMA           reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RPARENT         reduce using rule 78 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)


state 191

    (82) arg_list -> arg COMMA increment_argument_counter . arg_list
    (81) arg_list -> . arg
    (82) arg_list -> . arg COMMA increment_argument_counter arg_list
    (83) arg -> . mega_expression check_arg_count_type
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    arg                            shift and go to state 151
    arg_list                       shift and go to state 213
    mega_expression                shift and go to state 152
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 192

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA . mega_expression substr_quad RPARENT
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    reference                      shift and go to state 48
    mega_expression                shift and go to state 214
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 193

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 215

state 194

    (59) statement_list -> statement_list statement .

    RBRACE          reduce using rule 59 (statement_list -> statement_list statement .)
    VAR             reduce using rule 59 (statement_list -> statement_list statement .)
    ID              reduce using rule 59 (statement_list -> statement_list statement .)
    IF              reduce using rule 59 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 59 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 59 (statement_list -> statement_list statement .)
    READ            reduce using rule 59 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 59 (statement_list -> statement_list statement .)


state 195

    (61) statement -> declare_var .

    RBRACE          reduce using rule 61 (statement -> declare_var .)
    VAR             reduce using rule 61 (statement -> declare_var .)
    ID              reduce using rule 61 (statement -> declare_var .)
    IF              reduce using rule 61 (statement -> declare_var .)
    WHILE           reduce using rule 61 (statement -> declare_var .)
    RETURN          reduce using rule 61 (statement -> declare_var .)
    READ            reduce using rule 61 (statement -> declare_var .)
    PRINT           reduce using rule 61 (statement -> declare_var .)


state 196

    (62) statement -> assign_statement .

    RBRACE          reduce using rule 62 (statement -> assign_statement .)
    VAR             reduce using rule 62 (statement -> assign_statement .)
    ID              reduce using rule 62 (statement -> assign_statement .)
    IF              reduce using rule 62 (statement -> assign_statement .)
    WHILE           reduce using rule 62 (statement -> assign_statement .)
    RETURN          reduce using rule 62 (statement -> assign_statement .)
    READ            reduce using rule 62 (statement -> assign_statement .)
    PRINT           reduce using rule 62 (statement -> assign_statement .)


state 197

    (63) statement -> function_call .

    RBRACE          reduce using rule 63 (statement -> function_call .)
    VAR             reduce using rule 63 (statement -> function_call .)
    ID              reduce using rule 63 (statement -> function_call .)
    IF              reduce using rule 63 (statement -> function_call .)
    WHILE           reduce using rule 63 (statement -> function_call .)
    RETURN          reduce using rule 63 (statement -> function_call .)
    READ            reduce using rule 63 (statement -> function_call .)
    PRINT           reduce using rule 63 (statement -> function_call .)


state 198

    (64) statement -> if_condition .

    RBRACE          reduce using rule 64 (statement -> if_condition .)
    VAR             reduce using rule 64 (statement -> if_condition .)
    ID              reduce using rule 64 (statement -> if_condition .)
    IF              reduce using rule 64 (statement -> if_condition .)
    WHILE           reduce using rule 64 (statement -> if_condition .)
    RETURN          reduce using rule 64 (statement -> if_condition .)
    READ            reduce using rule 64 (statement -> if_condition .)
    PRINT           reduce using rule 64 (statement -> if_condition .)


state 199

    (65) statement -> while_loop .

    RBRACE          reduce using rule 65 (statement -> while_loop .)
    VAR             reduce using rule 65 (statement -> while_loop .)
    ID              reduce using rule 65 (statement -> while_loop .)
    IF              reduce using rule 65 (statement -> while_loop .)
    WHILE           reduce using rule 65 (statement -> while_loop .)
    RETURN          reduce using rule 65 (statement -> while_loop .)
    READ            reduce using rule 65 (statement -> while_loop .)
    PRINT           reduce using rule 65 (statement -> while_loop .)


state 200

    (66) statement -> return .

    RBRACE          reduce using rule 66 (statement -> return .)
    VAR             reduce using rule 66 (statement -> return .)
    ID              reduce using rule 66 (statement -> return .)
    IF              reduce using rule 66 (statement -> return .)
    WHILE           reduce using rule 66 (statement -> return .)
    RETURN          reduce using rule 66 (statement -> return .)
    READ            reduce using rule 66 (statement -> return .)
    PRINT           reduce using rule 66 (statement -> return .)


state 201

    (67) statement -> read .

    RBRACE          reduce using rule 67 (statement -> read .)
    VAR             reduce using rule 67 (statement -> read .)
    ID              reduce using rule 67 (statement -> read .)
    IF              reduce using rule 67 (statement -> read .)
    WHILE           reduce using rule 67 (statement -> read .)
    RETURN          reduce using rule 67 (statement -> read .)
    READ            reduce using rule 67 (statement -> read .)
    PRINT           reduce using rule 67 (statement -> read .)


state 202

    (68) statement -> print .

    RBRACE          reduce using rule 68 (statement -> print .)
    VAR             reduce using rule 68 (statement -> print .)
    ID              reduce using rule 68 (statement -> print .)
    IF              reduce using rule 68 (statement -> print .)
    WHILE           reduce using rule 68 (statement -> print .)
    RETURN          reduce using rule 68 (statement -> print .)
    READ            reduce using rule 68 (statement -> print .)
    PRINT           reduce using rule 68 (statement -> print .)


state 203

    (79) function_call -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (122) reference -> ID . check_variable_exists add_id_type_to_stack
    (124) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (8) init_func_call -> .
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    LPARENT         reduce using rule 8 (init_func_call -> .)
    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    init_func_call                 shift and go to state 216
    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 204

    (125) if_condition -> IF . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LPARENT         shift and go to state 217


state 205

    (128) while_loop -> WHILE . goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (35) goto_return_position -> .

    LPARENT         reduce using rule 35 (goto_return_position -> .)

    goto_return_position           shift and go to state 218

state 206

    (80) return -> RETURN . mega_expression validate_return SEMICOLON
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 219
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 207

    (138) read -> READ . LPARENT reference read_value RPARENT SEMICOLON

    LPARENT         shift and go to state 220


state 208

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 221


state 209

    (75) params -> param .
    (76) params -> param . COMMA params

    RPARENT         reduce using rule 75 (params -> param .)
    COMMA           shift and go to state 222


state 210

    (77) param -> var_type . ID init_param

    ID              shift and go to state 223


state 211

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (75) params -> . param
    (76) params -> . param COMMA params
    (77) param -> . var_type ID init_param
    (88) var_type -> . FLOAT_TYPE set_current_type
    (89) var_type -> . INT_TYPE set_current_type
    (90) var_type -> . STRING_TYPE set_current_type
    (91) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 224
    param                          shift and go to state 209
    var_type                       shift and go to state 210

state 212

    (85) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .

    VAR             reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ID              reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    MAIN            reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    FUNCTION        reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    PRINT           reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RBRACE          reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    IF              reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    WHILE           reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RETURN          reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    READ            reduce using rule 85 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)


state 213

    (82) arg_list -> arg COMMA increment_argument_counter arg_list .

    RPARENT         reduce using rule 82 (arg_list -> arg COMMA increment_argument_counter arg_list .)


state 214

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression . substr_quad RPARENT
    (42) substr_quad -> .

    RPARENT         reduce using rule 42 (substr_quad -> .)

    substr_quad                    shift and go to state 225

state 215

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 226


state 216

    (79) function_call -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad SEMICOLON

    LPARENT         shift and go to state 227


state 217

    (125) if_condition -> IF LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 228
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 218

    (128) while_loop -> WHILE goto_return_position . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LPARENT         shift and go to state 229


state 219

    (80) return -> RETURN mega_expression . validate_return SEMICOLON
    (12) validate_return -> .

    SEMICOLON       reduce using rule 12 (validate_return -> .)

    validate_return                shift and go to state 230

state 220

    (138) read -> READ LPARENT . reference read_value RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 231
    array_reference                shift and go to state 14

state 221

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 232


state 222

    (76) params -> param COMMA . params
    (75) params -> . param
    (76) params -> . param COMMA params
    (77) param -> . var_type ID init_param
    (88) var_type -> . FLOAT_TYPE set_current_type
    (89) var_type -> . INT_TYPE set_current_type
    (90) var_type -> . STRING_TYPE set_current_type
    (91) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    param                          shift and go to state 209
    params                         shift and go to state 233
    var_type                       shift and go to state 210

state 223

    (77) param -> var_type ID . init_param
    (5) init_param -> .

    COMMA           reduce using rule 5 (init_param -> .)
    RPARENT         reduce using rule 5 (init_param -> .)

    init_param                     shift and go to state 234

state 224

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 235


state 225

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad . RPARENT

    RPARENT         shift and go to state 236


state 226

    (58) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .

    $end            reduce using rule 58 (main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .)


state 227

    (79) function_call -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad SEMICOLON
    (81) arg_list -> . arg
    (82) arg_list -> . arg COMMA increment_argument_counter arg_list
    (83) arg -> . mega_expression check_arg_count_type
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    arg_list                       shift and go to state 237
    arg                            shift and go to state 151
    mega_expression                shift and go to state 152
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 228

    (125) if_condition -> IF LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    RPARENT         shift and go to state 238


state 229

    (128) while_loop -> WHILE goto_return_position LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (98) mega_expression -> . expression
    (99) mega_expression -> . expression relational_operator expression process_relational_operator
    (100) expression -> . term process_plus_minus_operators
    (101) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (102) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (103) term -> . factor process_mult_div_operators
    (104) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (105) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (106) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (107) factor -> . value
    (108) value -> . literal
    (109) value -> . reference
    (110) value -> . function_call_value
    (111) value -> . absolute_call_value
    (112) value -> . sqrt_call_value
    (113) value -> . trunc_call_value
    (114) value -> . substr_call_value
    (115) value -> . to_lower_call_value
    (116) value -> . to_upper_call_value
    (117) literal -> . FLOAT add_float_type_to_stack
    (118) literal -> . INT add_int_type_to_stack
    (119) literal -> . STRING add_string_type_stack
    (120) literal -> . TRUE add_boolean_type_to_stack
    (121) literal -> . FALSE add_boolean_type_to_stack
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (78) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (129) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (130) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (131) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (134) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (132) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (133) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    ID              shift and go to state 68
    ABSOLUTE        shift and go to state 69
    SQRT            shift and go to state 70
    TRUNC           shift and go to state 71
    SUBSTR          shift and go to state 72
    TOLOWER         shift and go to state 73
    TOUPPER         shift and go to state 74

    mega_expression                shift and go to state 239
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    array_reference                shift and go to state 14

state 230

    (80) return -> RETURN mega_expression validate_return . SEMICOLON

    SEMICOLON       shift and go to state 240


state 231

    (138) read -> READ LPARENT reference . read_value RPARENT SEMICOLON
    (46) read_value -> .

    RPARENT         reduce using rule 46 (read_value -> .)

    read_value                     shift and go to state 241

state 232

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RETURN          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 242

state 233

    (76) params -> param COMMA params .

    RPARENT         reduce using rule 76 (params -> param COMMA params .)


state 234

    (77) param -> var_type ID init_param .

    COMMA           reduce using rule 77 (param -> var_type ID init_param .)
    RPARENT         reduce using rule 77 (param -> var_type ID init_param .)


state 235

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 243


state 236

    (134) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .

    TIMES           reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    DIVIDE          reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    PLUS            reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    MINUS           reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHAN     reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHAN        reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    EQUALEQUAL      reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHANOREQUAL reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHANOREQUAL reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    NOTEQUAL        reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    SEMICOLON       reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RBRACKET        reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    COMMA           reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RPARENT         reduce using rule 134 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)


state 237

    (79) function_call -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad SEMICOLON

    RPARENT         shift and go to state 244


state 238

    (125) if_condition -> IF LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LBRACE          shift and go to state 245


state 239

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    RPARENT         shift and go to state 246


state 240

    (80) return -> RETURN mega_expression validate_return SEMICOLON .

    RBRACE          reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    VAR             reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ID              reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    IF              reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    WHILE           reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    RETURN          reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    READ            reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)
    PRINT           reduce using rule 80 (return -> RETURN mega_expression validate_return SEMICOLON .)


state 241

    (138) read -> READ LPARENT reference read_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 247


state 242

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RETURN          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 248
    empty                          shift and go to state 185

state 243

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RBRACE          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    RETURN          reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 249

state 244

    (79) function_call -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad SEMICOLON
    (11) create_gosub_quad -> .

    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 250

state 245

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 251

state 246

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LBRACE          shift and go to state 252


state 247

    (138) read -> READ LPARENT reference read_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 253


state 248

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . return RBRACE endfunc_quad close_current_scope SEMICOLON
    (59) statement_list -> statement_list . statement
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RETURN          shift and go to state 206
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    return                         shift and go to state 254
    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 249

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 255
    empty                          shift and go to state 185

state 250

    (79) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad . SEMICOLON

    SEMICOLON       shift and go to state 256


state 251

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 257

state 252

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 258

state 253

    (138) read -> READ LPARENT reference read_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    VAR             reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ID              reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    IF              reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    READ            reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 138 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)


state 254

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return . RBRACE endfunc_quad close_current_scope SEMICOLON
    (66) statement -> return .

    RBRACE          shift and go to state 259
    RETURN          reduce using rule 66 (statement -> return .)
    VAR             reduce using rule 66 (statement -> return .)
    ID              reduce using rule 66 (statement -> return .)
    IF              reduce using rule 66 (statement -> return .)
    WHILE           reduce using rule 66 (statement -> return .)
    READ            reduce using rule 66 (statement -> return .)
    PRINT           reduce using rule 66 (statement -> return .)


state 255

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . RBRACE endfunc_quad close_current_scope SEMICOLON
    (59) statement_list -> statement_list . statement
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 260
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    RETURN          shift and go to state 206
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    return                         shift and go to state 200
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 256

    (79) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .

    RBRACE          reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    VAR             reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ID              reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    IF              reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    WHILE           reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    RETURN          reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    READ            reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    PRINT           reduce using rule 79 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)


state 257

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE close_current_scope else_condition goto_end_position
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 261
    empty                          shift and go to state 185

state 258

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 262

state 259

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 263

state 260

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 264

state 261

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE close_current_scope else_condition goto_end_position
    (59) statement_list -> statement_list . statement
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 265
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    RETURN          shift and go to state 206
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    return                         shift and go to state 200
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 262

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE return_end_jump_position close_current_scope
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 266
    empty                          shift and go to state 185

state 263

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 267

state 264

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 268

state 265

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . close_current_scope else_condition goto_end_position
    (2) close_current_scope -> .

    ELSE            reduce using rule 2 (close_current_scope -> .)
    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 269

state 266

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE return_end_jump_position close_current_scope
    (59) statement_list -> statement_list . statement
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 270
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    RETURN          shift and go to state 206
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    return                         shift and go to state 200
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 267

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 271


state 268

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 272


state 269

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope . else_condition goto_end_position
    (126) else_condition -> . ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (127) else_condition -> . empty
    (139) empty -> .

    ELSE            shift and go to state 274
    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    else_condition                 shift and go to state 273
    empty                          shift and go to state 275

state 270

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . return_end_jump_position close_current_scope
    (36) return_end_jump_position -> .

    RBRACE          reduce using rule 36 (return_end_jump_position -> .)
    VAR             reduce using rule 36 (return_end_jump_position -> .)
    ID              reduce using rule 36 (return_end_jump_position -> .)
    IF              reduce using rule 36 (return_end_jump_position -> .)
    WHILE           reduce using rule 36 (return_end_jump_position -> .)
    RETURN          reduce using rule 36 (return_end_jump_position -> .)
    READ            reduce using rule 36 (return_end_jump_position -> .)
    PRINT           reduce using rule 36 (return_end_jump_position -> .)

    return_end_jump_position       shift and go to state 276

state 271

    (69) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 69 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 69 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 69 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 272

    (70) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 70 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 70 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 70 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 273

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition . goto_end_position
    (34) goto_end_position -> .

    RBRACE          reduce using rule 34 (goto_end_position -> .)
    VAR             reduce using rule 34 (goto_end_position -> .)
    ID              reduce using rule 34 (goto_end_position -> .)
    IF              reduce using rule 34 (goto_end_position -> .)
    WHILE           reduce using rule 34 (goto_end_position -> .)
    RETURN          reduce using rule 34 (goto_end_position -> .)
    READ            reduce using rule 34 (goto_end_position -> .)
    PRINT           reduce using rule 34 (goto_end_position -> .)

    goto_end_position              shift and go to state 277

state 274

    (126) else_condition -> ELSE . goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (33) goto_skip_else -> .

    LBRACE          reduce using rule 33 (goto_skip_else -> .)

    goto_skip_else                 shift and go to state 278

state 275

    (127) else_condition -> empty .

    RBRACE          reduce using rule 127 (else_condition -> empty .)
    VAR             reduce using rule 127 (else_condition -> empty .)
    ID              reduce using rule 127 (else_condition -> empty .)
    IF              reduce using rule 127 (else_condition -> empty .)
    WHILE           reduce using rule 127 (else_condition -> empty .)
    RETURN          reduce using rule 127 (else_condition -> empty .)
    READ            reduce using rule 127 (else_condition -> empty .)
    PRINT           reduce using rule 127 (else_condition -> empty .)


state 276

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 279

state 277

    (125) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .

    RBRACE          reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    VAR             reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ID              reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    IF              reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    WHILE           reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    RETURN          reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    READ            reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    PRINT           reduce using rule 125 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)


state 278

    (126) else_condition -> ELSE goto_skip_else . LBRACE new_scope statement_list RBRACE close_current_scope

    LBRACE          shift and go to state 280


state 279

    (128) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .

    RBRACE          reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    VAR             reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ID              reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    IF              reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    WHILE           reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    RETURN          reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    READ            reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    PRINT           reduce using rule 128 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)


state 280

    (126) else_condition -> ELSE goto_skip_else LBRACE . new_scope statement_list RBRACE close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 281

state 281

    (126) else_condition -> ELSE goto_skip_else LBRACE new_scope . statement_list RBRACE close_current_scope
    (59) statement_list -> . statement_list statement
    (60) statement_list -> . empty
    (139) empty -> .

    RBRACE          reduce using rule 139 (empty -> .)
    VAR             reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)

    statement_list                 shift and go to state 282
    empty                          shift and go to state 185

state 282

    (126) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list . RBRACE close_current_scope
    (59) statement_list -> statement_list . statement
    (61) statement -> . declare_var
    (62) statement -> . assign_statement
    (63) statement -> . function_call
    (64) statement -> . if_condition
    (65) statement -> . while_loop
    (66) statement -> . return
    (67) statement -> . read
    (68) statement -> . print
    (84) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (85) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (86) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (79) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (125) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (128) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (80) return -> . RETURN mega_expression validate_return SEMICOLON
    (138) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (135) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (122) reference -> . ID check_variable_exists add_id_type_to_stack
    (123) reference -> . array_reference
    (124) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 283
    VAR             shift and go to state 12
    ID              shift and go to state 203
    IF              shift and go to state 204
    WHILE           shift and go to state 205
    RETURN          shift and go to state 206
    READ            shift and go to state 207
    PRINT           shift and go to state 34

    statement                      shift and go to state 194
    declare_var                    shift and go to state 195
    assign_statement               shift and go to state 196
    function_call                  shift and go to state 197
    if_condition                   shift and go to state 198
    while_loop                     shift and go to state 199
    return                         shift and go to state 200
    read                           shift and go to state 201
    print                          shift and go to state 202
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 283

    (126) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 284

state 284

    (126) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .

    RBRACE          reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    VAR             reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ID              reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    IF              reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    WHILE           reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    RETURN          reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    READ            reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    PRINT           reduce using rule 126 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)

