Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     close_current_scope -> <empty>
Rule 3     set_func_return_type -> <empty>
Rule 4     new_function_scope -> <empty>
Rule 5     init_param -> <empty>
Rule 6     function_start_quad -> <empty>
Rule 7     endfunc_quad -> <empty>
Rule 8     init_func_call -> <empty>
Rule 9     increment_argument_counter -> <empty>
Rule 10    check_arg_count_type -> <empty>
Rule 11    create_gosub_quad -> <empty>
Rule 12    validate_return -> <empty>
Rule 13    add_operator_to_stack -> <empty>
Rule 14    set_current_type -> <empty>
Rule 15    init_variable -> <empty>
Rule 16    check_variable_exists -> <empty>
Rule 17    init_array -> <empty>
Rule 18    init_array_size -> <empty>
Rule 19    init_array_variable -> <empty>
Rule 20    add_id_type_to_stack -> <empty>
Rule 21    add_float_type_to_stack -> <empty>
Rule 22    add_int_type_to_stack -> <empty>
Rule 23    add_string_type_stack -> <empty>
Rule 24    add_boolean_type_to_stack -> <empty>
Rule 25    process_relational_operator -> <empty>
Rule 26    process_plus_minus_operators -> <empty>
Rule 27    process_mult_div_operators -> <empty>
Rule 28    array_name_reference -> <empty>
Rule 29    array_reference_value -> <empty>
Rule 30    add_separator -> <empty>
Rule 31    remove_separator -> <empty>
Rule 32    create_gotof_quad -> <empty>
Rule 33    goto_skip_else -> <empty>
Rule 34    goto_end_position -> <empty>
Rule 35    goto_return_position -> <empty>
Rule 36    return_end_jump_position -> <empty>
Rule 37    goto_main -> <empty>
Rule 38    main_quad -> <empty>
Rule 39    check_absolute_argument_call -> <empty>
Rule 40    check_absolute_argument_value -> <empty>
Rule 41    print_value -> <empty>
Rule 42    read_value -> <empty>
Rule 43    end_program -> <empty>
Rule 44    program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program
Rule 45    global_vars -> global_vars global_vars_actions
Rule 46    global_vars -> empty
Rule 47    global_vars_actions -> declare_var
Rule 48    global_vars_actions -> assign_statement
Rule 49    global_declaration -> global_declaration global_statement
Rule 50    global_declaration -> empty
Rule 51    global_statement -> declare_function
Rule 52    global_statement -> declare_function_void
Rule 53    global_statement -> print
Rule 54    main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
Rule 55    statement_list -> statement_list statement
Rule 56    statement_list -> empty
Rule 57    statement -> declare_var
Rule 58    statement -> assign_statement
Rule 59    statement -> function_call
Rule 60    statement -> if_condition
Rule 61    statement -> while_loop
Rule 62    statement -> absolute_call
Rule 63    statement -> return
Rule 64    statement -> read
Rule 65    statement -> print
Rule 66    declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 67    declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 68    function_type -> FLOAT_TYPE set_func_return_type
Rule 69    function_type -> INT_TYPE set_func_return_type
Rule 70    function_type -> STRING_TYPE set_func_return_type
Rule 71    function_type -> BOOL_TYPE set_func_return_type
Rule 72    params -> param
Rule 73    params -> param COMMA params
Rule 74    param -> var_type ID init_param
Rule 75    function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
Rule 76    function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
Rule 77    return -> RETURN mega_expression validate_return SEMICOLON
Rule 78    arg_list -> arg
Rule 79    arg_list -> arg COMMA increment_argument_counter arg_list
Rule 80    arg -> mega_expression check_arg_count_type
Rule 81    declare_var -> VAR var_type ID init_variable SEMICOLON
Rule 82    declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
Rule 83    assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 84    assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 85    var_type -> FLOAT_TYPE set_current_type
Rule 86    var_type -> INT_TYPE set_current_type
Rule 87    var_type -> STRING_TYPE set_current_type
Rule 88    var_type -> BOOL_TYPE set_current_type
Rule 89    relational_operator -> GREATERTHAN add_operator_to_stack
Rule 90    relational_operator -> LESSTHAN add_operator_to_stack
Rule 91    relational_operator -> EQUALEQUAL add_operator_to_stack
Rule 92    relational_operator -> LESSTHANOREQUAL add_operator_to_stack
Rule 93    relational_operator -> GREATERTHANOREQUAL add_operator_to_stack
Rule 94    relational_operator -> NOTEQUAL add_operator_to_stack
Rule 95    mega_expression -> expression
Rule 96    mega_expression -> expression relational_operator expression process_relational_operator
Rule 97    expression -> term process_plus_minus_operators
Rule 98    expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression
Rule 99    expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression
Rule 100   term -> factor process_mult_div_operators
Rule 101   term -> factor process_mult_div_operators TIMES add_operator_to_stack term
Rule 102   term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term
Rule 103   factor -> LPARENT add_separator mega_expression RPARENT remove_separator
Rule 104   factor -> value
Rule 105   value -> literal
Rule 106   value -> reference
Rule 107   value -> function_call_value
Rule 108   value -> absolute_call_value
Rule 109   literal -> FLOAT add_float_type_to_stack
Rule 110   literal -> INT add_int_type_to_stack
Rule 111   literal -> STRING add_string_type_stack
Rule 112   literal -> TRUE add_boolean_type_to_stack
Rule 113   literal -> FALSE add_boolean_type_to_stack
Rule 114   reference -> ID check_variable_exists add_id_type_to_stack
Rule 115   reference -> array_reference
Rule 116   array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value
Rule 117   if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
Rule 118   else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
Rule 119   else_condition -> empty
Rule 120   while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
Rule 121   absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
Rule 122   absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
Rule 123   print -> PRINT LPARENT print_many RPARENT SEMICOLON
Rule 124   print_many -> mega_expression print_value
Rule 125   print_many -> mega_expression print_value COMMA print_many
Rule 126   read -> READ LPARENT reference read_value RPARENT SEMICOLON
Rule 127   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 121 122
BOOL_TYPE            : 71 88
COMMA                : 73 79 125
DIVIDE               : 102
ELSE                 : 118
EQUAL                : 83 84
EQUALEQUAL           : 91
FALSE                : 113
FLOAT                : 109
FLOAT_TYPE           : 68 85
FUNCTION             : 66 67
GREATERTHAN          : 66 67 89
GREATERTHANOREQUAL   : 93
ID                   : 44 66 67 74 75 76 81 82 83 114 116
IF                   : 117
INT                  : 82 110
INT_TYPE             : 69 86
LBRACE               : 54 66 67 117 118 120
LBRACKET             : 82 116
LESSTHAN             : 66 67 90
LESSTHANOREQUAL      : 92
LPARENT              : 54 66 67 75 76 103 117 120 121 122 123 126
MAIN                 : 54
MINUS                : 99
NOTEQUAL             : 94
PLUS                 : 98
PRINT                : 123
PROGRAM              : 44
RBRACE               : 54 66 67 117 118 120
RBRACKET             : 82 116
READ                 : 126
RETURN               : 77
RPARENT              : 54 66 67 75 76 103 117 120 121 122 123 126
SEMICOLON            : 44 54 66 67 76 77 81 82 83 84 121 123 126
STRING               : 111
STRING_TYPE          : 70 87
TIMES                : 101
TRUE                 : 112
VAR                  : 81 82 83
VOID_TYPE            : 67
WHILE                : 120
error                : 

Nonterminals, with rules where they appear

absolute_call        : 62
absolute_call_value  : 108
add_boolean_type_to_stack : 112 113
add_float_type_to_stack : 109
add_id_type_to_stack : 83 114
add_int_type_to_stack : 110
add_operator_to_stack : 83 84 89 90 91 92 93 94 98 99 101 102
add_separator        : 103 116
add_string_type_stack : 111
arg                  : 78 79
arg_list             : 75 76 79
array_name_reference : 116
array_reference      : 115
array_reference_value : 116
assign_statement     : 48 58
check_absolute_argument_call : 121
check_absolute_argument_value : 122
check_arg_count_type : 80
check_variable_exists : 114
close_current_scope  : 54 66 67 117 118 120
create_gosub_quad    : 75 76
create_gotof_quad    : 117 120
declare_function     : 51
declare_function_void : 52
declare_var          : 47 57
else_condition       : 117
empty                : 46 50 56 119
end_program          : 44
endfunc_quad         : 66 67
expression           : 95 96 96 98 99 116
factor               : 100 101 102
function_call        : 59
function_call_value  : 107
function_start_quad  : 66 67
function_type        : 66
global_declaration   : 44 49
global_statement     : 49
global_vars          : 44 45
global_vars_actions  : 45
goto_end_position    : 117
goto_main            : 44
goto_return_position : 120
goto_skip_else       : 118
if_condition         : 60
increment_argument_counter : 79
init_array           : 82
init_array_size      : 82
init_array_variable  : 82
init_func_call       : 75 76
init_param           : 74
init_variable        : 81 83
literal              : 105
main_declaration     : 44
main_quad            : 54
mega_expression      : 77 80 83 84 103 117 120 121 122 124 125
new_function_scope   : 66 67
new_scope            : 54 117 118 120
param                : 72 73
params               : 66 67 73
print                : 53 65
print_many           : 123 125
print_value          : 124 125
process_mult_div_operators : 100 101 102
process_plus_minus_operators : 97 98 99
process_relational_operator : 96
program              : 0
read                 : 64
read_value           : 126
reference            : 84 106 126
relational_operator  : 96
remove_separator     : 103 116
return               : 63 66
return_end_jump_position : 120
set_current_type     : 85 86 87 88
set_func_return_type : 67 68 69 70 71
statement            : 55
statement_list       : 54 55 66 67 117 118 120
term                 : 97 98 99 101 102
validate_return      : 77
value                : 104
var_type             : 74 81 82 83
while_loop           : 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (44) program -> . PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (44) program -> PROGRAM . ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    ID              shift and go to state 3


state 3

    (44) program -> PROGRAM ID . SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    SEMICOLON       shift and go to state 4


state 4

    (44) program -> PROGRAM ID SEMICOLON . global_vars goto_main global_declaration main_declaration end_program
    (45) global_vars -> . global_vars global_vars_actions
    (46) global_vars -> . empty
    (127) empty -> .

    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    FUNCTION        reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    global_vars                    shift and go to state 5
    empty                          shift and go to state 6

state 5

    (44) program -> PROGRAM ID SEMICOLON global_vars . goto_main global_declaration main_declaration end_program
    (45) global_vars -> global_vars . global_vars_actions
    (37) goto_main -> .
    (47) global_vars_actions -> . declare_var
    (48) global_vars_actions -> . assign_statement
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    MAIN            reduce using rule 37 (goto_main -> .)
    FUNCTION        reduce using rule 37 (goto_main -> .)
    PRINT           reduce using rule 37 (goto_main -> .)
    VAR             shift and go to state 12
    ID              shift and go to state 7

    goto_main                      shift and go to state 8
    global_vars_actions            shift and go to state 9
    declare_var                    shift and go to state 10
    assign_statement               shift and go to state 11
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 6

    (46) global_vars -> empty .

    VAR             reduce using rule 46 (global_vars -> empty .)
    ID              reduce using rule 46 (global_vars -> empty .)
    MAIN            reduce using rule 46 (global_vars -> empty .)
    FUNCTION        reduce using rule 46 (global_vars -> empty .)
    PRINT           reduce using rule 46 (global_vars -> empty .)


state 7

    (114) reference -> ID . check_variable_exists add_id_type_to_stack
    (116) array_reference -> ID . array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 8

    (44) program -> PROGRAM ID SEMICOLON global_vars goto_main . global_declaration main_declaration end_program
    (49) global_declaration -> . global_declaration global_statement
    (50) global_declaration -> . empty
    (127) empty -> .

    MAIN            reduce using rule 127 (empty -> .)
    FUNCTION        reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    global_declaration             shift and go to state 17
    empty                          shift and go to state 18

state 9

    (45) global_vars -> global_vars global_vars_actions .

    VAR             reduce using rule 45 (global_vars -> global_vars global_vars_actions .)
    ID              reduce using rule 45 (global_vars -> global_vars global_vars_actions .)
    MAIN            reduce using rule 45 (global_vars -> global_vars global_vars_actions .)
    FUNCTION        reduce using rule 45 (global_vars -> global_vars global_vars_actions .)
    PRINT           reduce using rule 45 (global_vars -> global_vars global_vars_actions .)


state 10

    (47) global_vars_actions -> declare_var .

    VAR             reduce using rule 47 (global_vars_actions -> declare_var .)
    ID              reduce using rule 47 (global_vars_actions -> declare_var .)
    MAIN            reduce using rule 47 (global_vars_actions -> declare_var .)
    FUNCTION        reduce using rule 47 (global_vars_actions -> declare_var .)
    PRINT           reduce using rule 47 (global_vars_actions -> declare_var .)


state 11

    (48) global_vars_actions -> assign_statement .

    VAR             reduce using rule 48 (global_vars_actions -> assign_statement .)
    ID              reduce using rule 48 (global_vars_actions -> assign_statement .)
    MAIN            reduce using rule 48 (global_vars_actions -> assign_statement .)
    FUNCTION        reduce using rule 48 (global_vars_actions -> assign_statement .)
    PRINT           reduce using rule 48 (global_vars_actions -> assign_statement .)


state 12

    (81) declare_var -> VAR . var_type ID init_variable SEMICOLON
    (82) declare_var -> VAR . var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> VAR . var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (85) var_type -> . FLOAT_TYPE set_current_type
    (86) var_type -> . INT_TYPE set_current_type
    (87) var_type -> . STRING_TYPE set_current_type
    (88) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    var_type                       shift and go to state 19

state 13

    (84) assign_statement -> reference . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 24


state 14

    (115) reference -> array_reference .

    EQUAL           reduce using rule 115 (reference -> array_reference .)
    TIMES           reduce using rule 115 (reference -> array_reference .)
    DIVIDE          reduce using rule 115 (reference -> array_reference .)
    PLUS            reduce using rule 115 (reference -> array_reference .)
    MINUS           reduce using rule 115 (reference -> array_reference .)
    GREATERTHAN     reduce using rule 115 (reference -> array_reference .)
    LESSTHAN        reduce using rule 115 (reference -> array_reference .)
    EQUALEQUAL      reduce using rule 115 (reference -> array_reference .)
    LESSTHANOREQUAL reduce using rule 115 (reference -> array_reference .)
    GREATERTHANOREQUAL reduce using rule 115 (reference -> array_reference .)
    NOTEQUAL        reduce using rule 115 (reference -> array_reference .)
    SEMICOLON       reduce using rule 115 (reference -> array_reference .)
    RBRACKET        reduce using rule 115 (reference -> array_reference .)
    COMMA           reduce using rule 115 (reference -> array_reference .)
    RPARENT         reduce using rule 115 (reference -> array_reference .)


state 15

    (114) reference -> ID check_variable_exists . add_id_type_to_stack
    (20) add_id_type_to_stack -> .

    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)
    TIMES           reduce using rule 20 (add_id_type_to_stack -> .)
    DIVIDE          reduce using rule 20 (add_id_type_to_stack -> .)
    PLUS            reduce using rule 20 (add_id_type_to_stack -> .)
    MINUS           reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHAN     reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHAN        reduce using rule 20 (add_id_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    NOTEQUAL        reduce using rule 20 (add_id_type_to_stack -> .)
    SEMICOLON       reduce using rule 20 (add_id_type_to_stack -> .)
    RBRACKET        reduce using rule 20 (add_id_type_to_stack -> .)
    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)
    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 25

state 16

    (116) array_reference -> ID array_name_reference . LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LBRACKET        shift and go to state 26


state 17

    (44) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration . main_declaration end_program
    (49) global_declaration -> global_declaration . global_statement
    (54) main_declaration -> . MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (51) global_statement -> . declare_function
    (52) global_statement -> . declare_function_void
    (53) global_statement -> . print
    (66) declare_function -> . FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) declare_function_void -> . FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON

    MAIN            shift and go to state 29
    FUNCTION        shift and go to state 33
    PRINT           shift and go to state 34

    main_declaration               shift and go to state 27
    global_statement               shift and go to state 28
    declare_function               shift and go to state 30
    declare_function_void          shift and go to state 31
    print                          shift and go to state 32

state 18

    (50) global_declaration -> empty .

    MAIN            reduce using rule 50 (global_declaration -> empty .)
    FUNCTION        reduce using rule 50 (global_declaration -> empty .)
    PRINT           reduce using rule 50 (global_declaration -> empty .)


state 19

    (81) declare_var -> VAR var_type . ID init_variable SEMICOLON
    (82) declare_var -> VAR var_type . ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> VAR var_type . ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON

    ID              shift and go to state 35


state 20

    (85) var_type -> FLOAT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 36

state 21

    (86) var_type -> INT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 37

state 22

    (87) var_type -> STRING_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 38

state 23

    (88) var_type -> BOOL_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 39

state 24

    (84) assign_statement -> reference EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 40

state 25

    (114) reference -> ID check_variable_exists add_id_type_to_stack .

    EQUAL           reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    TIMES           reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    DIVIDE          reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    PLUS            reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    MINUS           reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHAN     reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHAN        reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    EQUALEQUAL      reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    NOTEQUAL        reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    SEMICOLON       reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RBRACKET        reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    COMMA           reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RPARENT         reduce using rule 114 (reference -> ID check_variable_exists add_id_type_to_stack .)


state 26

    (116) array_reference -> ID array_name_reference LBRACKET . add_separator expression RBRACKET remove_separator array_reference_value
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 41

state 27

    (44) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration . end_program
    (43) end_program -> .

    $end            reduce using rule 43 (end_program -> .)

    end_program                    shift and go to state 42

state 28

    (49) global_declaration -> global_declaration global_statement .

    MAIN            reduce using rule 49 (global_declaration -> global_declaration global_statement .)
    FUNCTION        reduce using rule 49 (global_declaration -> global_declaration global_statement .)
    PRINT           reduce using rule 49 (global_declaration -> global_declaration global_statement .)


state 29

    (54) main_declaration -> MAIN . main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (38) main_quad -> .

    LPARENT         reduce using rule 38 (main_quad -> .)

    main_quad                      shift and go to state 43

state 30

    (51) global_statement -> declare_function .

    MAIN            reduce using rule 51 (global_statement -> declare_function .)
    FUNCTION        reduce using rule 51 (global_statement -> declare_function .)
    PRINT           reduce using rule 51 (global_statement -> declare_function .)


state 31

    (52) global_statement -> declare_function_void .

    MAIN            reduce using rule 52 (global_statement -> declare_function_void .)
    FUNCTION        reduce using rule 52 (global_statement -> declare_function_void .)
    PRINT           reduce using rule 52 (global_statement -> declare_function_void .)


state 32

    (53) global_statement -> print .

    MAIN            reduce using rule 53 (global_statement -> print .)
    FUNCTION        reduce using rule 53 (global_statement -> print .)
    PRINT           reduce using rule 53 (global_statement -> print .)


state 33

    (66) declare_function -> FUNCTION . ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) declare_function_void -> FUNCTION . ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    ID              shift and go to state 44


state 34

    (123) print -> PRINT . LPARENT print_many RPARENT SEMICOLON

    LPARENT         shift and go to state 45


state 35

    (81) declare_var -> VAR var_type ID . init_variable SEMICOLON
    (82) declare_var -> VAR var_type ID . init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> VAR var_type ID . init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (15) init_variable -> .
    (17) init_array -> .

    SEMICOLON       reduce using rule 15 (init_variable -> .)
    EQUAL           reduce using rule 15 (init_variable -> .)
    LBRACKET        reduce using rule 17 (init_array -> .)

    init_variable                  shift and go to state 46
    init_array                     shift and go to state 47

state 36

    (85) var_type -> FLOAT_TYPE set_current_type .

    ID              reduce using rule 85 (var_type -> FLOAT_TYPE set_current_type .)


state 37

    (86) var_type -> INT_TYPE set_current_type .

    ID              reduce using rule 86 (var_type -> INT_TYPE set_current_type .)


state 38

    (87) var_type -> STRING_TYPE set_current_type .

    ID              reduce using rule 87 (var_type -> STRING_TYPE set_current_type .)


state 39

    (88) var_type -> BOOL_TYPE set_current_type .

    ID              reduce using rule 88 (var_type -> BOOL_TYPE set_current_type .)


state 40

    (84) assign_statement -> reference EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    reference                      shift and go to state 48
    mega_expression                shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 41

    (116) array_reference -> ID array_name_reference LBRACKET add_separator . expression RBRACKET remove_separator array_reference_value
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    expression                     shift and go to state 65
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 42

    (44) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .

    $end            reduce using rule 44 (program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .)


state 43

    (54) main_declaration -> MAIN main_quad . LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LPARENT         shift and go to state 66


state 44

    (66) declare_function -> FUNCTION ID . new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) declare_function_void -> FUNCTION ID . new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (4) new_function_scope -> .

    LESSTHAN        reduce using rule 4 (new_function_scope -> .)

    new_function_scope             shift and go to state 67

state 45

    (123) print -> PRINT LPARENT . print_many RPARENT SEMICOLON
    (124) print_many -> . mega_expression print_value
    (125) print_many -> . mega_expression print_value COMMA print_many
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    print_many                     shift and go to state 68
    mega_expression                shift and go to state 69
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 46

    (81) declare_var -> VAR var_type ID init_variable . SEMICOLON
    (83) assign_statement -> VAR var_type ID init_variable . add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (20) add_id_type_to_stack -> .

    SEMICOLON       shift and go to state 70
    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 71

state 47

    (82) declare_var -> VAR var_type ID init_array . LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON

    LBRACKET        shift and go to state 72


state 48

    (106) value -> reference .

    TIMES           reduce using rule 106 (value -> reference .)
    DIVIDE          reduce using rule 106 (value -> reference .)
    PLUS            reduce using rule 106 (value -> reference .)
    MINUS           reduce using rule 106 (value -> reference .)
    GREATERTHAN     reduce using rule 106 (value -> reference .)
    LESSTHAN        reduce using rule 106 (value -> reference .)
    EQUALEQUAL      reduce using rule 106 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 106 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 106 (value -> reference .)
    NOTEQUAL        reduce using rule 106 (value -> reference .)
    SEMICOLON       reduce using rule 106 (value -> reference .)
    RBRACKET        reduce using rule 106 (value -> reference .)
    COMMA           reduce using rule 106 (value -> reference .)
    RPARENT         reduce using rule 106 (value -> reference .)


state 49

    (84) assign_statement -> reference EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 73


state 50

    (95) mega_expression -> expression .
    (96) mega_expression -> expression . relational_operator expression process_relational_operator
    (89) relational_operator -> . GREATERTHAN add_operator_to_stack
    (90) relational_operator -> . LESSTHAN add_operator_to_stack
    (91) relational_operator -> . EQUALEQUAL add_operator_to_stack
    (92) relational_operator -> . LESSTHANOREQUAL add_operator_to_stack
    (93) relational_operator -> . GREATERTHANOREQUAL add_operator_to_stack
    (94) relational_operator -> . NOTEQUAL add_operator_to_stack

    SEMICOLON       reduce using rule 95 (mega_expression -> expression .)
    COMMA           reduce using rule 95 (mega_expression -> expression .)
    RPARENT         reduce using rule 95 (mega_expression -> expression .)
    GREATERTHAN     shift and go to state 75
    LESSTHAN        shift and go to state 76
    EQUALEQUAL      shift and go to state 77
    LESSTHANOREQUAL shift and go to state 78
    GREATERTHANOREQUAL shift and go to state 79
    NOTEQUAL        shift and go to state 80

    relational_operator            shift and go to state 74

state 51

    (97) expression -> term . process_plus_minus_operators
    (98) expression -> term . process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> term . process_plus_minus_operators MINUS add_operator_to_stack expression
    (26) process_plus_minus_operators -> .

    PLUS            reduce using rule 26 (process_plus_minus_operators -> .)
    MINUS           reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHAN     reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHAN        reduce using rule 26 (process_plus_minus_operators -> .)
    EQUALEQUAL      reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    NOTEQUAL        reduce using rule 26 (process_plus_minus_operators -> .)
    SEMICOLON       reduce using rule 26 (process_plus_minus_operators -> .)
    RBRACKET        reduce using rule 26 (process_plus_minus_operators -> .)
    COMMA           reduce using rule 26 (process_plus_minus_operators -> .)
    RPARENT         reduce using rule 26 (process_plus_minus_operators -> .)

    process_plus_minus_operators   shift and go to state 81

state 52

    (100) term -> factor . process_mult_div_operators
    (101) term -> factor . process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> factor . process_mult_div_operators DIVIDE add_operator_to_stack term
    (27) process_mult_div_operators -> .

    TIMES           reduce using rule 27 (process_mult_div_operators -> .)
    DIVIDE          reduce using rule 27 (process_mult_div_operators -> .)
    PLUS            reduce using rule 27 (process_mult_div_operators -> .)
    MINUS           reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHAN     reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHAN        reduce using rule 27 (process_mult_div_operators -> .)
    EQUALEQUAL      reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    NOTEQUAL        reduce using rule 27 (process_mult_div_operators -> .)
    SEMICOLON       reduce using rule 27 (process_mult_div_operators -> .)
    RBRACKET        reduce using rule 27 (process_mult_div_operators -> .)
    COMMA           reduce using rule 27 (process_mult_div_operators -> .)
    RPARENT         reduce using rule 27 (process_mult_div_operators -> .)

    process_mult_div_operators     shift and go to state 82

state 53

    (103) factor -> LPARENT . add_separator mega_expression RPARENT remove_separator
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 83

state 54

    (104) factor -> value .

    TIMES           reduce using rule 104 (factor -> value .)
    DIVIDE          reduce using rule 104 (factor -> value .)
    PLUS            reduce using rule 104 (factor -> value .)
    MINUS           reduce using rule 104 (factor -> value .)
    GREATERTHAN     reduce using rule 104 (factor -> value .)
    LESSTHAN        reduce using rule 104 (factor -> value .)
    EQUALEQUAL      reduce using rule 104 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 104 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 104 (factor -> value .)
    NOTEQUAL        reduce using rule 104 (factor -> value .)
    SEMICOLON       reduce using rule 104 (factor -> value .)
    RBRACKET        reduce using rule 104 (factor -> value .)
    COMMA           reduce using rule 104 (factor -> value .)
    RPARENT         reduce using rule 104 (factor -> value .)


state 55

    (105) value -> literal .

    TIMES           reduce using rule 105 (value -> literal .)
    DIVIDE          reduce using rule 105 (value -> literal .)
    PLUS            reduce using rule 105 (value -> literal .)
    MINUS           reduce using rule 105 (value -> literal .)
    GREATERTHAN     reduce using rule 105 (value -> literal .)
    LESSTHAN        reduce using rule 105 (value -> literal .)
    EQUALEQUAL      reduce using rule 105 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 105 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 105 (value -> literal .)
    NOTEQUAL        reduce using rule 105 (value -> literal .)
    SEMICOLON       reduce using rule 105 (value -> literal .)
    RBRACKET        reduce using rule 105 (value -> literal .)
    COMMA           reduce using rule 105 (value -> literal .)
    RPARENT         reduce using rule 105 (value -> literal .)


state 56

    (107) value -> function_call_value .

    TIMES           reduce using rule 107 (value -> function_call_value .)
    DIVIDE          reduce using rule 107 (value -> function_call_value .)
    PLUS            reduce using rule 107 (value -> function_call_value .)
    MINUS           reduce using rule 107 (value -> function_call_value .)
    GREATERTHAN     reduce using rule 107 (value -> function_call_value .)
    LESSTHAN        reduce using rule 107 (value -> function_call_value .)
    EQUALEQUAL      reduce using rule 107 (value -> function_call_value .)
    LESSTHANOREQUAL reduce using rule 107 (value -> function_call_value .)
    GREATERTHANOREQUAL reduce using rule 107 (value -> function_call_value .)
    NOTEQUAL        reduce using rule 107 (value -> function_call_value .)
    SEMICOLON       reduce using rule 107 (value -> function_call_value .)
    RBRACKET        reduce using rule 107 (value -> function_call_value .)
    COMMA           reduce using rule 107 (value -> function_call_value .)
    RPARENT         reduce using rule 107 (value -> function_call_value .)


state 57

    (108) value -> absolute_call_value .

    TIMES           reduce using rule 108 (value -> absolute_call_value .)
    DIVIDE          reduce using rule 108 (value -> absolute_call_value .)
    PLUS            reduce using rule 108 (value -> absolute_call_value .)
    MINUS           reduce using rule 108 (value -> absolute_call_value .)
    GREATERTHAN     reduce using rule 108 (value -> absolute_call_value .)
    LESSTHAN        reduce using rule 108 (value -> absolute_call_value .)
    EQUALEQUAL      reduce using rule 108 (value -> absolute_call_value .)
    LESSTHANOREQUAL reduce using rule 108 (value -> absolute_call_value .)
    GREATERTHANOREQUAL reduce using rule 108 (value -> absolute_call_value .)
    NOTEQUAL        reduce using rule 108 (value -> absolute_call_value .)
    SEMICOLON       reduce using rule 108 (value -> absolute_call_value .)
    RBRACKET        reduce using rule 108 (value -> absolute_call_value .)
    COMMA           reduce using rule 108 (value -> absolute_call_value .)
    RPARENT         reduce using rule 108 (value -> absolute_call_value .)


state 58

    (109) literal -> FLOAT . add_float_type_to_stack
    (21) add_float_type_to_stack -> .

    TIMES           reduce using rule 21 (add_float_type_to_stack -> .)
    DIVIDE          reduce using rule 21 (add_float_type_to_stack -> .)
    PLUS            reduce using rule 21 (add_float_type_to_stack -> .)
    MINUS           reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHAN     reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHAN        reduce using rule 21 (add_float_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    NOTEQUAL        reduce using rule 21 (add_float_type_to_stack -> .)
    SEMICOLON       reduce using rule 21 (add_float_type_to_stack -> .)
    RBRACKET        reduce using rule 21 (add_float_type_to_stack -> .)
    COMMA           reduce using rule 21 (add_float_type_to_stack -> .)
    RPARENT         reduce using rule 21 (add_float_type_to_stack -> .)

    add_float_type_to_stack        shift and go to state 84

state 59

    (110) literal -> INT . add_int_type_to_stack
    (22) add_int_type_to_stack -> .

    TIMES           reduce using rule 22 (add_int_type_to_stack -> .)
    DIVIDE          reduce using rule 22 (add_int_type_to_stack -> .)
    PLUS            reduce using rule 22 (add_int_type_to_stack -> .)
    MINUS           reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHAN     reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHAN        reduce using rule 22 (add_int_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    NOTEQUAL        reduce using rule 22 (add_int_type_to_stack -> .)
    SEMICOLON       reduce using rule 22 (add_int_type_to_stack -> .)
    RBRACKET        reduce using rule 22 (add_int_type_to_stack -> .)
    COMMA           reduce using rule 22 (add_int_type_to_stack -> .)
    RPARENT         reduce using rule 22 (add_int_type_to_stack -> .)

    add_int_type_to_stack          shift and go to state 85

state 60

    (111) literal -> STRING . add_string_type_stack
    (23) add_string_type_stack -> .

    TIMES           reduce using rule 23 (add_string_type_stack -> .)
    DIVIDE          reduce using rule 23 (add_string_type_stack -> .)
    PLUS            reduce using rule 23 (add_string_type_stack -> .)
    MINUS           reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHAN     reduce using rule 23 (add_string_type_stack -> .)
    LESSTHAN        reduce using rule 23 (add_string_type_stack -> .)
    EQUALEQUAL      reduce using rule 23 (add_string_type_stack -> .)
    LESSTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    NOTEQUAL        reduce using rule 23 (add_string_type_stack -> .)
    SEMICOLON       reduce using rule 23 (add_string_type_stack -> .)
    RBRACKET        reduce using rule 23 (add_string_type_stack -> .)
    COMMA           reduce using rule 23 (add_string_type_stack -> .)
    RPARENT         reduce using rule 23 (add_string_type_stack -> .)

    add_string_type_stack          shift and go to state 86

state 61

    (112) literal -> TRUE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 87

state 62

    (113) literal -> FALSE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 88

state 63

    (114) reference -> ID . check_variable_exists add_id_type_to_stack
    (75) function_call_value -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (116) array_reference -> ID . array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (8) init_func_call -> .
    (28) array_name_reference -> .

    TIMES           reduce using rule 16 (check_variable_exists -> .)
    DIVIDE          reduce using rule 16 (check_variable_exists -> .)
    PLUS            reduce using rule 16 (check_variable_exists -> .)
    MINUS           reduce using rule 16 (check_variable_exists -> .)
    GREATERTHAN     reduce using rule 16 (check_variable_exists -> .)
    LESSTHAN        reduce using rule 16 (check_variable_exists -> .)
    EQUALEQUAL      reduce using rule 16 (check_variable_exists -> .)
    LESSTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    GREATERTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    NOTEQUAL        reduce using rule 16 (check_variable_exists -> .)
    SEMICOLON       reduce using rule 16 (check_variable_exists -> .)
    RBRACKET        reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LPARENT         reduce using rule 8 (init_func_call -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    init_func_call                 shift and go to state 89
    array_name_reference           shift and go to state 16

state 64

    (122) absolute_call_value -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_value RPARENT

    LPARENT         shift and go to state 90


state 65

    (116) array_reference -> ID array_name_reference LBRACKET add_separator expression . RBRACKET remove_separator array_reference_value

    RBRACKET        shift and go to state 91


state 66

    (54) main_declaration -> MAIN main_quad LPARENT . RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    RPARENT         shift and go to state 92


state 67

    (66) declare_function -> FUNCTION ID new_function_scope . LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) declare_function_void -> FUNCTION ID new_function_scope . LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LESSTHAN        shift and go to state 93


state 68

    (123) print -> PRINT LPARENT print_many . RPARENT SEMICOLON

    RPARENT         shift and go to state 94


state 69

    (124) print_many -> mega_expression . print_value
    (125) print_many -> mega_expression . print_value COMMA print_many
    (41) print_value -> .

    COMMA           reduce using rule 41 (print_value -> .)
    RPARENT         reduce using rule 41 (print_value -> .)

    print_value                    shift and go to state 95

state 70

    (81) declare_var -> VAR var_type ID init_variable SEMICOLON .

    VAR             reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ID              reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    MAIN            reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    FUNCTION        reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    PRINT           reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RBRACE          reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    IF              reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    WHILE           reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ABSOLUTE        reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RETURN          reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    READ            reduce using rule 81 (declare_var -> VAR var_type ID init_variable SEMICOLON .)


state 71

    (83) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 96


state 72

    (82) declare_var -> VAR var_type ID init_array LBRACKET . INT init_array_size RBRACKET init_array_variable SEMICOLON

    INT             shift and go to state 97


state 73

    (84) assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ABSOLUTE        reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 84 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 74

    (96) mega_expression -> expression relational_operator . expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    expression                     shift and go to state 98
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 75

    (89) relational_operator -> GREATERTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 99

state 76

    (90) relational_operator -> LESSTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 100

state 77

    (91) relational_operator -> EQUALEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 101

state 78

    (92) relational_operator -> LESSTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 102

state 79

    (93) relational_operator -> GREATERTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 103

state 80

    (94) relational_operator -> NOTEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 104

state 81

    (97) expression -> term process_plus_minus_operators .
    (98) expression -> term process_plus_minus_operators . PLUS add_operator_to_stack expression
    (99) expression -> term process_plus_minus_operators . MINUS add_operator_to_stack expression

    GREATERTHAN     reduce using rule 97 (expression -> term process_plus_minus_operators .)
    LESSTHAN        reduce using rule 97 (expression -> term process_plus_minus_operators .)
    EQUALEQUAL      reduce using rule 97 (expression -> term process_plus_minus_operators .)
    LESSTHANOREQUAL reduce using rule 97 (expression -> term process_plus_minus_operators .)
    GREATERTHANOREQUAL reduce using rule 97 (expression -> term process_plus_minus_operators .)
    NOTEQUAL        reduce using rule 97 (expression -> term process_plus_minus_operators .)
    SEMICOLON       reduce using rule 97 (expression -> term process_plus_minus_operators .)
    RBRACKET        reduce using rule 97 (expression -> term process_plus_minus_operators .)
    COMMA           reduce using rule 97 (expression -> term process_plus_minus_operators .)
    RPARENT         reduce using rule 97 (expression -> term process_plus_minus_operators .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106


state 82

    (100) term -> factor process_mult_div_operators .
    (101) term -> factor process_mult_div_operators . TIMES add_operator_to_stack term
    (102) term -> factor process_mult_div_operators . DIVIDE add_operator_to_stack term

    PLUS            reduce using rule 100 (term -> factor process_mult_div_operators .)
    MINUS           reduce using rule 100 (term -> factor process_mult_div_operators .)
    GREATERTHAN     reduce using rule 100 (term -> factor process_mult_div_operators .)
    LESSTHAN        reduce using rule 100 (term -> factor process_mult_div_operators .)
    EQUALEQUAL      reduce using rule 100 (term -> factor process_mult_div_operators .)
    LESSTHANOREQUAL reduce using rule 100 (term -> factor process_mult_div_operators .)
    GREATERTHANOREQUAL reduce using rule 100 (term -> factor process_mult_div_operators .)
    NOTEQUAL        reduce using rule 100 (term -> factor process_mult_div_operators .)
    SEMICOLON       reduce using rule 100 (term -> factor process_mult_div_operators .)
    RBRACKET        reduce using rule 100 (term -> factor process_mult_div_operators .)
    COMMA           reduce using rule 100 (term -> factor process_mult_div_operators .)
    RPARENT         reduce using rule 100 (term -> factor process_mult_div_operators .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108


state 83

    (103) factor -> LPARENT add_separator . mega_expression RPARENT remove_separator
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 109
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 84

    (109) literal -> FLOAT add_float_type_to_stack .

    TIMES           reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    DIVIDE          reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    PLUS            reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    MINUS           reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHAN     reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHAN        reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    EQUALEQUAL      reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    NOTEQUAL        reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    SEMICOLON       reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    RBRACKET        reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    COMMA           reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)
    RPARENT         reduce using rule 109 (literal -> FLOAT add_float_type_to_stack .)


state 85

    (110) literal -> INT add_int_type_to_stack .

    TIMES           reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    DIVIDE          reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    PLUS            reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    MINUS           reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    GREATERTHAN     reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    LESSTHAN        reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    EQUALEQUAL      reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    NOTEQUAL        reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    SEMICOLON       reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    RBRACKET        reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    COMMA           reduce using rule 110 (literal -> INT add_int_type_to_stack .)
    RPARENT         reduce using rule 110 (literal -> INT add_int_type_to_stack .)


state 86

    (111) literal -> STRING add_string_type_stack .

    TIMES           reduce using rule 111 (literal -> STRING add_string_type_stack .)
    DIVIDE          reduce using rule 111 (literal -> STRING add_string_type_stack .)
    PLUS            reduce using rule 111 (literal -> STRING add_string_type_stack .)
    MINUS           reduce using rule 111 (literal -> STRING add_string_type_stack .)
    GREATERTHAN     reduce using rule 111 (literal -> STRING add_string_type_stack .)
    LESSTHAN        reduce using rule 111 (literal -> STRING add_string_type_stack .)
    EQUALEQUAL      reduce using rule 111 (literal -> STRING add_string_type_stack .)
    LESSTHANOREQUAL reduce using rule 111 (literal -> STRING add_string_type_stack .)
    GREATERTHANOREQUAL reduce using rule 111 (literal -> STRING add_string_type_stack .)
    NOTEQUAL        reduce using rule 111 (literal -> STRING add_string_type_stack .)
    SEMICOLON       reduce using rule 111 (literal -> STRING add_string_type_stack .)
    RBRACKET        reduce using rule 111 (literal -> STRING add_string_type_stack .)
    COMMA           reduce using rule 111 (literal -> STRING add_string_type_stack .)
    RPARENT         reduce using rule 111 (literal -> STRING add_string_type_stack .)


state 87

    (112) literal -> TRUE add_boolean_type_to_stack .

    TIMES           reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    PLUS            reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    MINUS           reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    COMMA           reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 112 (literal -> TRUE add_boolean_type_to_stack .)


state 88

    (113) literal -> FALSE add_boolean_type_to_stack .

    TIMES           reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    PLUS            reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    MINUS           reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    COMMA           reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 113 (literal -> FALSE add_boolean_type_to_stack .)


state 89

    (75) function_call_value -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad

    LPARENT         shift and go to state 110


state 90

    (122) absolute_call_value -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_value RPARENT
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 111
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 91

    (116) array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET . remove_separator array_reference_value
    (31) remove_separator -> .

    EQUAL           reduce using rule 31 (remove_separator -> .)
    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 112

state 92

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT . LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LBRACE          shift and go to state 113


state 93

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN . function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN . VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (68) function_type -> . FLOAT_TYPE set_func_return_type
    (69) function_type -> . INT_TYPE set_func_return_type
    (70) function_type -> . STRING_TYPE set_func_return_type
    (71) function_type -> . BOOL_TYPE set_func_return_type

    VOID_TYPE       shift and go to state 115
    FLOAT_TYPE      shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119

    function_type                  shift and go to state 114

state 94

    (123) print -> PRINT LPARENT print_many RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 120


state 95

    (124) print_many -> mega_expression print_value .
    (125) print_many -> mega_expression print_value . COMMA print_many

    RPARENT         reduce using rule 124 (print_many -> mega_expression print_value .)
    COMMA           shift and go to state 121


state 96

    (83) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 122

state 97

    (82) declare_var -> VAR var_type ID init_array LBRACKET INT . init_array_size RBRACKET init_array_variable SEMICOLON
    (18) init_array_size -> .

    RBRACKET        reduce using rule 18 (init_array_size -> .)

    init_array_size                shift and go to state 123

state 98

    (96) mega_expression -> expression relational_operator expression . process_relational_operator
    (25) process_relational_operator -> .

    SEMICOLON       reduce using rule 25 (process_relational_operator -> .)
    COMMA           reduce using rule 25 (process_relational_operator -> .)
    RPARENT         reduce using rule 25 (process_relational_operator -> .)

    process_relational_operator    shift and go to state 124

state 99

    (89) relational_operator -> GREATERTHAN add_operator_to_stack .

    LPARENT         reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    INT             reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    STRING          reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUE            reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FALSE           reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ID              reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 89 (relational_operator -> GREATERTHAN add_operator_to_stack .)


state 100

    (90) relational_operator -> LESSTHAN add_operator_to_stack .

    LPARENT         reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    INT             reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    STRING          reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUE            reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FALSE           reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ID              reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 90 (relational_operator -> LESSTHAN add_operator_to_stack .)


state 101

    (91) relational_operator -> EQUALEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    INT             reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    STRING          reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ID              reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 91 (relational_operator -> EQUALEQUAL add_operator_to_stack .)


state 102

    (92) relational_operator -> LESSTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 92 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)


state 103

    (93) relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 93 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)


state 104

    (94) relational_operator -> NOTEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    INT             reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    STRING          reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ID              reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 94 (relational_operator -> NOTEQUAL add_operator_to_stack .)


state 105

    (98) expression -> term process_plus_minus_operators PLUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 125

state 106

    (99) expression -> term process_plus_minus_operators MINUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 126

state 107

    (101) term -> factor process_mult_div_operators TIMES . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 127

state 108

    (102) term -> factor process_mult_div_operators DIVIDE . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 128

state 109

    (103) factor -> LPARENT add_separator mega_expression . RPARENT remove_separator

    RPARENT         shift and go to state 129


state 110

    (75) function_call_value -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad
    (78) arg_list -> . arg
    (79) arg_list -> . arg COMMA increment_argument_counter arg_list
    (80) arg -> . mega_expression check_arg_count_type
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    arg_list                       shift and go to state 130
    arg                            shift and go to state 131
    mega_expression                shift and go to state 132
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 111

    (122) absolute_call_value -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_value RPARENT
    (40) check_absolute_argument_value -> .

    RPARENT         reduce using rule 40 (check_absolute_argument_value -> .)

    check_absolute_argument_value  shift and go to state 133

state 112

    (116) array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator . array_reference_value
    (29) array_reference_value -> .

    EQUAL           reduce using rule 29 (array_reference_value -> .)
    TIMES           reduce using rule 29 (array_reference_value -> .)
    DIVIDE          reduce using rule 29 (array_reference_value -> .)
    PLUS            reduce using rule 29 (array_reference_value -> .)
    MINUS           reduce using rule 29 (array_reference_value -> .)
    GREATERTHAN     reduce using rule 29 (array_reference_value -> .)
    LESSTHAN        reduce using rule 29 (array_reference_value -> .)
    EQUALEQUAL      reduce using rule 29 (array_reference_value -> .)
    LESSTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    GREATERTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    NOTEQUAL        reduce using rule 29 (array_reference_value -> .)
    SEMICOLON       reduce using rule 29 (array_reference_value -> .)
    RBRACKET        reduce using rule 29 (array_reference_value -> .)
    COMMA           reduce using rule 29 (array_reference_value -> .)
    RPARENT         reduce using rule 29 (array_reference_value -> .)

    array_reference_value          shift and go to state 134

state 113

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE . new_scope statement_list RBRACE close_current_scope SEMICOLON
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    ABSOLUTE        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 135

state 114

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 136


state 115

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE . set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 137

state 116

    (68) function_type -> FLOAT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 138

state 117

    (69) function_type -> INT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 139

state 118

    (70) function_type -> STRING_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 140

state 119

    (71) function_type -> BOOL_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 141

state 120

    (123) print -> PRINT LPARENT print_many RPARENT SEMICOLON .

    MAIN            reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    PRINT           reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RBRACE          reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    VAR             reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ID              reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    IF              reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    WHILE           reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ABSOLUTE        reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RETURN          reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    READ            reduce using rule 123 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)


state 121

    (125) print_many -> mega_expression print_value COMMA . print_many
    (124) print_many -> . mega_expression print_value
    (125) print_many -> . mega_expression print_value COMMA print_many
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 69
    print_many                     shift and go to state 142
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 122

    (83) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 143
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 123

    (82) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size . RBRACKET init_array_variable SEMICOLON

    RBRACKET        shift and go to state 144


state 124

    (96) mega_expression -> expression relational_operator expression process_relational_operator .

    SEMICOLON       reduce using rule 96 (mega_expression -> expression relational_operator expression process_relational_operator .)
    COMMA           reduce using rule 96 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RPARENT         reduce using rule 96 (mega_expression -> expression relational_operator expression process_relational_operator .)


state 125

    (98) expression -> term process_plus_minus_operators PLUS add_operator_to_stack . expression
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    term                           shift and go to state 51
    expression                     shift and go to state 145
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 126

    (99) expression -> term process_plus_minus_operators MINUS add_operator_to_stack . expression
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    term                           shift and go to state 51
    expression                     shift and go to state 146
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 127

    (101) term -> factor process_mult_div_operators TIMES add_operator_to_stack . term
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    factor                         shift and go to state 52
    term                           shift and go to state 147
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 128

    (102) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack . term
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    factor                         shift and go to state 52
    term                           shift and go to state 148
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 129

    (103) factor -> LPARENT add_separator mega_expression RPARENT . remove_separator
    (31) remove_separator -> .

    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 149

state 130

    (75) function_call_value -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad

    RPARENT         shift and go to state 150


state 131

    (78) arg_list -> arg .
    (79) arg_list -> arg . COMMA increment_argument_counter arg_list

    RPARENT         reduce using rule 78 (arg_list -> arg .)
    COMMA           shift and go to state 151


state 132

    (80) arg -> mega_expression . check_arg_count_type
    (10) check_arg_count_type -> .

    COMMA           reduce using rule 10 (check_arg_count_type -> .)
    RPARENT         reduce using rule 10 (check_arg_count_type -> .)

    check_arg_count_type           shift and go to state 152

state 133

    (122) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value . RPARENT

    RPARENT         shift and go to state 153


state 134

    (116) array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .

    EQUAL           reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    TIMES           reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    DIVIDE          reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    PLUS            reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    MINUS           reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    GREATERTHAN     reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    LESSTHAN        reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    EQUALEQUAL      reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    LESSTHANOREQUAL reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    GREATERTHANOREQUAL reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    NOTEQUAL        reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    SEMICOLON       reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    RBRACKET        reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    COMMA           reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)
    RPARENT         reduce using rule 116 (array_reference -> ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value .)


state 135

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope . statement_list RBRACE close_current_scope SEMICOLON
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 154
    empty                          shift and go to state 155

state 136

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 156


state 137

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 157


state 138

    (68) function_type -> FLOAT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 68 (function_type -> FLOAT_TYPE set_func_return_type .)


state 139

    (69) function_type -> INT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 69 (function_type -> INT_TYPE set_func_return_type .)


state 140

    (70) function_type -> STRING_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 70 (function_type -> STRING_TYPE set_func_return_type .)


state 141

    (71) function_type -> BOOL_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 71 (function_type -> BOOL_TYPE set_func_return_type .)


state 142

    (125) print_many -> mega_expression print_value COMMA print_many .

    RPARENT         reduce using rule 125 (print_many -> mega_expression print_value COMMA print_many .)


state 143

    (83) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 158


state 144

    (82) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET . init_array_variable SEMICOLON
    (19) init_array_variable -> .

    SEMICOLON       reduce using rule 19 (init_array_variable -> .)

    init_array_variable            shift and go to state 159

state 145

    (98) expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    COMMA           reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 98 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)


state 146

    (99) expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    COMMA           reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 99 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)


state 147

    (101) term -> factor process_mult_div_operators TIMES add_operator_to_stack term .

    PLUS            reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    MINUS           reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHAN        reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    SEMICOLON       reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RBRACKET        reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    COMMA           reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RPARENT         reduce using rule 101 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)


state 148

    (102) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .

    PLUS            reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    MINUS           reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHAN        reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    SEMICOLON       reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RBRACKET        reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    COMMA           reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RPARENT         reduce using rule 102 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)


state 149

    (103) factor -> LPARENT add_separator mega_expression RPARENT remove_separator .

    TIMES           reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    DIVIDE          reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    PLUS            reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    MINUS           reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHAN     reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHAN        reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    EQUALEQUAL      reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHANOREQUAL reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHANOREQUAL reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    NOTEQUAL        reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    SEMICOLON       reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RBRACKET        reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    COMMA           reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RPARENT         reduce using rule 103 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)


state 150

    (75) function_call_value -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad
    (11) create_gosub_quad -> .

    TIMES           reduce using rule 11 (create_gosub_quad -> .)
    DIVIDE          reduce using rule 11 (create_gosub_quad -> .)
    PLUS            reduce using rule 11 (create_gosub_quad -> .)
    MINUS           reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHAN     reduce using rule 11 (create_gosub_quad -> .)
    LESSTHAN        reduce using rule 11 (create_gosub_quad -> .)
    EQUALEQUAL      reduce using rule 11 (create_gosub_quad -> .)
    LESSTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    NOTEQUAL        reduce using rule 11 (create_gosub_quad -> .)
    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)
    RBRACKET        reduce using rule 11 (create_gosub_quad -> .)
    COMMA           reduce using rule 11 (create_gosub_quad -> .)
    RPARENT         reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 160

state 151

    (79) arg_list -> arg COMMA . increment_argument_counter arg_list
    (9) increment_argument_counter -> .

    LPARENT         reduce using rule 9 (increment_argument_counter -> .)
    FLOAT           reduce using rule 9 (increment_argument_counter -> .)
    INT             reduce using rule 9 (increment_argument_counter -> .)
    STRING          reduce using rule 9 (increment_argument_counter -> .)
    TRUE            reduce using rule 9 (increment_argument_counter -> .)
    FALSE           reduce using rule 9 (increment_argument_counter -> .)
    ID              reduce using rule 9 (increment_argument_counter -> .)
    ABSOLUTE        reduce using rule 9 (increment_argument_counter -> .)

    increment_argument_counter     shift and go to state 161

state 152

    (80) arg -> mega_expression check_arg_count_type .

    COMMA           reduce using rule 80 (arg -> mega_expression check_arg_count_type .)
    RPARENT         reduce using rule 80 (arg -> mega_expression check_arg_count_type .)


state 153

    (122) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .

    TIMES           reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    DIVIDE          reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    PLUS            reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    MINUS           reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHAN        reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    SEMICOLON       reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RBRACKET        reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    COMMA           reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RPARENT         reduce using rule 122 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)


state 154

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list . RBRACE close_current_scope SEMICOLON
    (55) statement_list -> statement_list . statement
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 162
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    RETURN          shift and go to state 177
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    return                         shift and go to state 170
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 155

    (56) statement_list -> empty .

    RBRACE          reduce using rule 56 (statement_list -> empty .)
    VAR             reduce using rule 56 (statement_list -> empty .)
    ID              reduce using rule 56 (statement_list -> empty .)
    IF              reduce using rule 56 (statement_list -> empty .)
    WHILE           reduce using rule 56 (statement_list -> empty .)
    ABSOLUTE        reduce using rule 56 (statement_list -> empty .)
    RETURN          reduce using rule 56 (statement_list -> empty .)
    READ            reduce using rule 56 (statement_list -> empty .)
    PRINT           reduce using rule 56 (statement_list -> empty .)


state 156

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (72) params -> . param
    (73) params -> . param COMMA params
    (74) param -> . var_type ID init_param
    (85) var_type -> . FLOAT_TYPE set_current_type
    (86) var_type -> . INT_TYPE set_current_type
    (87) var_type -> . STRING_TYPE set_current_type
    (88) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 179
    param                          shift and go to state 180
    var_type                       shift and go to state 181

state 157

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 182


state 158

    (83) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ABSOLUTE        reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 83 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 159

    (82) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable . SEMICOLON

    SEMICOLON       shift and go to state 183


state 160

    (75) function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .

    TIMES           reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    DIVIDE          reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    PLUS            reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    MINUS           reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHAN     reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHAN        reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    EQUALEQUAL      reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHANOREQUAL reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHANOREQUAL reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    NOTEQUAL        reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    SEMICOLON       reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RBRACKET        reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    COMMA           reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RPARENT         reduce using rule 75 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)


state 161

    (79) arg_list -> arg COMMA increment_argument_counter . arg_list
    (78) arg_list -> . arg
    (79) arg_list -> . arg COMMA increment_argument_counter arg_list
    (80) arg -> . mega_expression check_arg_count_type
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    arg                            shift and go to state 131
    arg_list                       shift and go to state 184
    mega_expression                shift and go to state 132
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 162

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 185

state 163

    (55) statement_list -> statement_list statement .

    RBRACE          reduce using rule 55 (statement_list -> statement_list statement .)
    VAR             reduce using rule 55 (statement_list -> statement_list statement .)
    ID              reduce using rule 55 (statement_list -> statement_list statement .)
    IF              reduce using rule 55 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 55 (statement_list -> statement_list statement .)
    ABSOLUTE        reduce using rule 55 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 55 (statement_list -> statement_list statement .)
    READ            reduce using rule 55 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 55 (statement_list -> statement_list statement .)


state 164

    (57) statement -> declare_var .

    RBRACE          reduce using rule 57 (statement -> declare_var .)
    VAR             reduce using rule 57 (statement -> declare_var .)
    ID              reduce using rule 57 (statement -> declare_var .)
    IF              reduce using rule 57 (statement -> declare_var .)
    WHILE           reduce using rule 57 (statement -> declare_var .)
    ABSOLUTE        reduce using rule 57 (statement -> declare_var .)
    RETURN          reduce using rule 57 (statement -> declare_var .)
    READ            reduce using rule 57 (statement -> declare_var .)
    PRINT           reduce using rule 57 (statement -> declare_var .)


state 165

    (58) statement -> assign_statement .

    RBRACE          reduce using rule 58 (statement -> assign_statement .)
    VAR             reduce using rule 58 (statement -> assign_statement .)
    ID              reduce using rule 58 (statement -> assign_statement .)
    IF              reduce using rule 58 (statement -> assign_statement .)
    WHILE           reduce using rule 58 (statement -> assign_statement .)
    ABSOLUTE        reduce using rule 58 (statement -> assign_statement .)
    RETURN          reduce using rule 58 (statement -> assign_statement .)
    READ            reduce using rule 58 (statement -> assign_statement .)
    PRINT           reduce using rule 58 (statement -> assign_statement .)


state 166

    (59) statement -> function_call .

    RBRACE          reduce using rule 59 (statement -> function_call .)
    VAR             reduce using rule 59 (statement -> function_call .)
    ID              reduce using rule 59 (statement -> function_call .)
    IF              reduce using rule 59 (statement -> function_call .)
    WHILE           reduce using rule 59 (statement -> function_call .)
    ABSOLUTE        reduce using rule 59 (statement -> function_call .)
    RETURN          reduce using rule 59 (statement -> function_call .)
    READ            reduce using rule 59 (statement -> function_call .)
    PRINT           reduce using rule 59 (statement -> function_call .)


state 167

    (60) statement -> if_condition .

    RBRACE          reduce using rule 60 (statement -> if_condition .)
    VAR             reduce using rule 60 (statement -> if_condition .)
    ID              reduce using rule 60 (statement -> if_condition .)
    IF              reduce using rule 60 (statement -> if_condition .)
    WHILE           reduce using rule 60 (statement -> if_condition .)
    ABSOLUTE        reduce using rule 60 (statement -> if_condition .)
    RETURN          reduce using rule 60 (statement -> if_condition .)
    READ            reduce using rule 60 (statement -> if_condition .)
    PRINT           reduce using rule 60 (statement -> if_condition .)


state 168

    (61) statement -> while_loop .

    RBRACE          reduce using rule 61 (statement -> while_loop .)
    VAR             reduce using rule 61 (statement -> while_loop .)
    ID              reduce using rule 61 (statement -> while_loop .)
    IF              reduce using rule 61 (statement -> while_loop .)
    WHILE           reduce using rule 61 (statement -> while_loop .)
    ABSOLUTE        reduce using rule 61 (statement -> while_loop .)
    RETURN          reduce using rule 61 (statement -> while_loop .)
    READ            reduce using rule 61 (statement -> while_loop .)
    PRINT           reduce using rule 61 (statement -> while_loop .)


state 169

    (62) statement -> absolute_call .

    RBRACE          reduce using rule 62 (statement -> absolute_call .)
    VAR             reduce using rule 62 (statement -> absolute_call .)
    ID              reduce using rule 62 (statement -> absolute_call .)
    IF              reduce using rule 62 (statement -> absolute_call .)
    WHILE           reduce using rule 62 (statement -> absolute_call .)
    ABSOLUTE        reduce using rule 62 (statement -> absolute_call .)
    RETURN          reduce using rule 62 (statement -> absolute_call .)
    READ            reduce using rule 62 (statement -> absolute_call .)
    PRINT           reduce using rule 62 (statement -> absolute_call .)


state 170

    (63) statement -> return .

    RBRACE          reduce using rule 63 (statement -> return .)
    VAR             reduce using rule 63 (statement -> return .)
    ID              reduce using rule 63 (statement -> return .)
    IF              reduce using rule 63 (statement -> return .)
    WHILE           reduce using rule 63 (statement -> return .)
    ABSOLUTE        reduce using rule 63 (statement -> return .)
    RETURN          reduce using rule 63 (statement -> return .)
    READ            reduce using rule 63 (statement -> return .)
    PRINT           reduce using rule 63 (statement -> return .)


state 171

    (64) statement -> read .

    RBRACE          reduce using rule 64 (statement -> read .)
    VAR             reduce using rule 64 (statement -> read .)
    ID              reduce using rule 64 (statement -> read .)
    IF              reduce using rule 64 (statement -> read .)
    WHILE           reduce using rule 64 (statement -> read .)
    ABSOLUTE        reduce using rule 64 (statement -> read .)
    RETURN          reduce using rule 64 (statement -> read .)
    READ            reduce using rule 64 (statement -> read .)
    PRINT           reduce using rule 64 (statement -> read .)


state 172

    (65) statement -> print .

    RBRACE          reduce using rule 65 (statement -> print .)
    VAR             reduce using rule 65 (statement -> print .)
    ID              reduce using rule 65 (statement -> print .)
    IF              reduce using rule 65 (statement -> print .)
    WHILE           reduce using rule 65 (statement -> print .)
    ABSOLUTE        reduce using rule 65 (statement -> print .)
    RETURN          reduce using rule 65 (statement -> print .)
    READ            reduce using rule 65 (statement -> print .)
    PRINT           reduce using rule 65 (statement -> print .)


state 173

    (76) function_call -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (114) reference -> ID . check_variable_exists add_id_type_to_stack
    (116) array_reference -> ID . array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value
    (8) init_func_call -> .
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    LPARENT         reduce using rule 8 (init_func_call -> .)
    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    init_func_call                 shift and go to state 186
    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 174

    (117) if_condition -> IF . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LPARENT         shift and go to state 187


state 175

    (120) while_loop -> WHILE . goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (35) goto_return_position -> .

    LPARENT         reduce using rule 35 (goto_return_position -> .)

    goto_return_position           shift and go to state 188

state 176

    (121) absolute_call -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON

    LPARENT         shift and go to state 189


state 177

    (77) return -> RETURN . mega_expression validate_return SEMICOLON
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 190
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 178

    (126) read -> READ . LPARENT reference read_value RPARENT SEMICOLON

    LPARENT         shift and go to state 191


state 179

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 192


state 180

    (72) params -> param .
    (73) params -> param . COMMA params

    RPARENT         reduce using rule 72 (params -> param .)
    COMMA           shift and go to state 193


state 181

    (74) param -> var_type . ID init_param

    ID              shift and go to state 194


state 182

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (72) params -> . param
    (73) params -> . param COMMA params
    (74) param -> . var_type ID init_param
    (85) var_type -> . FLOAT_TYPE set_current_type
    (86) var_type -> . INT_TYPE set_current_type
    (87) var_type -> . STRING_TYPE set_current_type
    (88) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 195
    param                          shift and go to state 180
    var_type                       shift and go to state 181

state 183

    (82) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .

    VAR             reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ID              reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    MAIN            reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    FUNCTION        reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    PRINT           reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RBRACE          reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    IF              reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    WHILE           reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ABSOLUTE        reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RETURN          reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    READ            reduce using rule 82 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)


state 184

    (79) arg_list -> arg COMMA increment_argument_counter arg_list .

    RPARENT         reduce using rule 79 (arg_list -> arg COMMA increment_argument_counter arg_list .)


state 185

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 196


state 186

    (76) function_call -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad SEMICOLON

    LPARENT         shift and go to state 197


state 187

    (117) if_condition -> IF LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 198
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 188

    (120) while_loop -> WHILE goto_return_position . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LPARENT         shift and go to state 199


state 189

    (121) absolute_call -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 200
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 190

    (77) return -> RETURN mega_expression . validate_return SEMICOLON
    (12) validate_return -> .

    SEMICOLON       reduce using rule 12 (validate_return -> .)

    validate_return                shift and go to state 201

state 191

    (126) read -> READ LPARENT . reference read_value RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 202
    array_reference                shift and go to state 14

state 192

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 203


state 193

    (73) params -> param COMMA . params
    (72) params -> . param
    (73) params -> . param COMMA params
    (74) param -> . var_type ID init_param
    (85) var_type -> . FLOAT_TYPE set_current_type
    (86) var_type -> . INT_TYPE set_current_type
    (87) var_type -> . STRING_TYPE set_current_type
    (88) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    param                          shift and go to state 180
    params                         shift and go to state 204
    var_type                       shift and go to state 181

state 194

    (74) param -> var_type ID . init_param
    (5) init_param -> .

    COMMA           reduce using rule 5 (init_param -> .)
    RPARENT         reduce using rule 5 (init_param -> .)

    init_param                     shift and go to state 205

state 195

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 206


state 196

    (54) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .

    $end            reduce using rule 54 (main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .)


state 197

    (76) function_call -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad SEMICOLON
    (78) arg_list -> . arg
    (79) arg_list -> . arg COMMA increment_argument_counter arg_list
    (80) arg -> . mega_expression check_arg_count_type
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    arg_list                       shift and go to state 207
    arg                            shift and go to state 131
    mega_expression                shift and go to state 132
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 198

    (117) if_condition -> IF LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    RPARENT         shift and go to state 208


state 199

    (120) while_loop -> WHILE goto_return_position LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (95) mega_expression -> . expression
    (96) mega_expression -> . expression relational_operator expression process_relational_operator
    (97) expression -> . term process_plus_minus_operators
    (98) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (99) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (100) term -> . factor process_mult_div_operators
    (101) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (102) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (103) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (104) factor -> . value
    (105) value -> . literal
    (106) value -> . reference
    (107) value -> . function_call_value
    (108) value -> . absolute_call_value
    (109) literal -> . FLOAT add_float_type_to_stack
    (110) literal -> . INT add_int_type_to_stack
    (111) literal -> . STRING add_string_type_stack
    (112) literal -> . TRUE add_boolean_type_to_stack
    (113) literal -> . FALSE add_boolean_type_to_stack
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (75) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (122) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 58
    INT             shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 63
    ABSOLUTE        shift and go to state 64

    mega_expression                shift and go to state 209
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    array_reference                shift and go to state 14

state 200

    (121) absolute_call -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_call RPARENT SEMICOLON
    (39) check_absolute_argument_call -> .

    RPARENT         reduce using rule 39 (check_absolute_argument_call -> .)

    check_absolute_argument_call   shift and go to state 210

state 201

    (77) return -> RETURN mega_expression validate_return . SEMICOLON

    SEMICOLON       shift and go to state 211


state 202

    (126) read -> READ LPARENT reference . read_value RPARENT SEMICOLON
    (42) read_value -> .

    RPARENT         reduce using rule 42 (read_value -> .)

    read_value                     shift and go to state 212

state 203

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RETURN          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    ABSOLUTE        reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 213

state 204

    (73) params -> param COMMA params .

    RPARENT         reduce using rule 73 (params -> param COMMA params .)


state 205

    (74) param -> var_type ID init_param .

    COMMA           reduce using rule 74 (param -> var_type ID init_param .)
    RPARENT         reduce using rule 74 (param -> var_type ID init_param .)


state 206

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 214


state 207

    (76) function_call -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad SEMICOLON

    RPARENT         shift and go to state 215


state 208

    (117) if_condition -> IF LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LBRACE          shift and go to state 216


state 209

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    RPARENT         shift and go to state 217


state 210

    (121) absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call . RPARENT SEMICOLON

    RPARENT         shift and go to state 218


state 211

    (77) return -> RETURN mega_expression validate_return SEMICOLON .

    RBRACE          reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    VAR             reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ID              reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    IF              reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    WHILE           reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ABSOLUTE        reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    RETURN          reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    READ            reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)
    PRINT           reduce using rule 77 (return -> RETURN mega_expression validate_return SEMICOLON .)


state 212

    (126) read -> READ LPARENT reference read_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 219


state 213

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RETURN          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 220
    empty                          shift and go to state 155

state 214

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RBRACE          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    ABSOLUTE        reduce using rule 6 (function_start_quad -> .)
    RETURN          reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 221

state 215

    (76) function_call -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad SEMICOLON
    (11) create_gosub_quad -> .

    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 222

state 216

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    ABSOLUTE        reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 223

state 217

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LBRACE          shift and go to state 224


state 218

    (121) absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 225


state 219

    (126) read -> READ LPARENT reference read_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 226


state 220

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . return RBRACE endfunc_quad close_current_scope SEMICOLON
    (55) statement_list -> statement_list . statement
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RETURN          shift and go to state 177
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    return                         shift and go to state 227
    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 221

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 228
    empty                          shift and go to state 155

state 222

    (76) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad . SEMICOLON

    SEMICOLON       shift and go to state 229


state 223

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    ABSOLUTE        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 230

state 224

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    ABSOLUTE        reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 231

state 225

    (121) absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .

    RBRACE          reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    VAR             reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    ID              reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    IF              reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    WHILE           reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    ABSOLUTE        reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    RETURN          reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    READ            reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)
    PRINT           reduce using rule 121 (absolute_call -> ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON .)


state 226

    (126) read -> READ LPARENT reference read_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    VAR             reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ID              reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    IF              reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ABSOLUTE        reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    READ            reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 126 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)


state 227

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return . RBRACE endfunc_quad close_current_scope SEMICOLON
    (63) statement -> return .

    RBRACE          shift and go to state 232
    RETURN          reduce using rule 63 (statement -> return .)
    VAR             reduce using rule 63 (statement -> return .)
    ID              reduce using rule 63 (statement -> return .)
    IF              reduce using rule 63 (statement -> return .)
    WHILE           reduce using rule 63 (statement -> return .)
    ABSOLUTE        reduce using rule 63 (statement -> return .)
    READ            reduce using rule 63 (statement -> return .)
    PRINT           reduce using rule 63 (statement -> return .)


state 228

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . RBRACE endfunc_quad close_current_scope SEMICOLON
    (55) statement_list -> statement_list . statement
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 233
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    RETURN          shift and go to state 177
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    return                         shift and go to state 170
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 229

    (76) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .

    RBRACE          reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    VAR             reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ID              reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    IF              reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    WHILE           reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ABSOLUTE        reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    RETURN          reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    READ            reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    PRINT           reduce using rule 76 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)


state 230

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE close_current_scope else_condition goto_end_position
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 234
    empty                          shift and go to state 155

state 231

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    ABSOLUTE        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 235

state 232

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 236

state 233

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 237

state 234

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE close_current_scope else_condition goto_end_position
    (55) statement_list -> statement_list . statement
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 238
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    RETURN          shift and go to state 177
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    return                         shift and go to state 170
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 235

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE return_end_jump_position close_current_scope
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 239
    empty                          shift and go to state 155

state 236

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 240

state 237

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 241

state 238

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . close_current_scope else_condition goto_end_position
    (2) close_current_scope -> .

    ELSE            reduce using rule 2 (close_current_scope -> .)
    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    ABSOLUTE        reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 242

state 239

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE return_end_jump_position close_current_scope
    (55) statement_list -> statement_list . statement
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 243
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    RETURN          shift and go to state 177
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    return                         shift and go to state 170
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 240

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 244


state 241

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 245


state 242

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope . else_condition goto_end_position
    (118) else_condition -> . ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (119) else_condition -> . empty
    (127) empty -> .

    ELSE            shift and go to state 247
    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    else_condition                 shift and go to state 246
    empty                          shift and go to state 248

state 243

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . return_end_jump_position close_current_scope
    (36) return_end_jump_position -> .

    RBRACE          reduce using rule 36 (return_end_jump_position -> .)
    VAR             reduce using rule 36 (return_end_jump_position -> .)
    ID              reduce using rule 36 (return_end_jump_position -> .)
    IF              reduce using rule 36 (return_end_jump_position -> .)
    WHILE           reduce using rule 36 (return_end_jump_position -> .)
    ABSOLUTE        reduce using rule 36 (return_end_jump_position -> .)
    RETURN          reduce using rule 36 (return_end_jump_position -> .)
    READ            reduce using rule 36 (return_end_jump_position -> .)
    PRINT           reduce using rule 36 (return_end_jump_position -> .)

    return_end_jump_position       shift and go to state 249

state 244

    (66) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 66 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 66 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 66 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 245

    (67) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 67 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 67 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 67 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 246

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition . goto_end_position
    (34) goto_end_position -> .

    RBRACE          reduce using rule 34 (goto_end_position -> .)
    VAR             reduce using rule 34 (goto_end_position -> .)
    ID              reduce using rule 34 (goto_end_position -> .)
    IF              reduce using rule 34 (goto_end_position -> .)
    WHILE           reduce using rule 34 (goto_end_position -> .)
    ABSOLUTE        reduce using rule 34 (goto_end_position -> .)
    RETURN          reduce using rule 34 (goto_end_position -> .)
    READ            reduce using rule 34 (goto_end_position -> .)
    PRINT           reduce using rule 34 (goto_end_position -> .)

    goto_end_position              shift and go to state 250

state 247

    (118) else_condition -> ELSE . goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (33) goto_skip_else -> .

    LBRACE          reduce using rule 33 (goto_skip_else -> .)

    goto_skip_else                 shift and go to state 251

state 248

    (119) else_condition -> empty .

    RBRACE          reduce using rule 119 (else_condition -> empty .)
    VAR             reduce using rule 119 (else_condition -> empty .)
    ID              reduce using rule 119 (else_condition -> empty .)
    IF              reduce using rule 119 (else_condition -> empty .)
    WHILE           reduce using rule 119 (else_condition -> empty .)
    ABSOLUTE        reduce using rule 119 (else_condition -> empty .)
    RETURN          reduce using rule 119 (else_condition -> empty .)
    READ            reduce using rule 119 (else_condition -> empty .)
    PRINT           reduce using rule 119 (else_condition -> empty .)


state 249

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    ABSOLUTE        reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 252

state 250

    (117) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .

    RBRACE          reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    VAR             reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ID              reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    IF              reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    WHILE           reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ABSOLUTE        reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    RETURN          reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    READ            reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    PRINT           reduce using rule 117 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)


state 251

    (118) else_condition -> ELSE goto_skip_else . LBRACE new_scope statement_list RBRACE close_current_scope

    LBRACE          shift and go to state 253


state 252

    (120) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .

    RBRACE          reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    VAR             reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ID              reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    IF              reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    WHILE           reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ABSOLUTE        reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    RETURN          reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    READ            reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    PRINT           reduce using rule 120 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)


state 253

    (118) else_condition -> ELSE goto_skip_else LBRACE . new_scope statement_list RBRACE close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    ABSOLUTE        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 254

state 254

    (118) else_condition -> ELSE goto_skip_else LBRACE new_scope . statement_list RBRACE close_current_scope
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (127) empty -> .

    RBRACE          reduce using rule 127 (empty -> .)
    VAR             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    ABSOLUTE        reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)

    statement_list                 shift and go to state 255
    empty                          shift and go to state 155

state 255

    (118) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list . RBRACE close_current_scope
    (55) statement_list -> statement_list . statement
    (57) statement -> . declare_var
    (58) statement -> . assign_statement
    (59) statement -> . function_call
    (60) statement -> . if_condition
    (61) statement -> . while_loop
    (62) statement -> . absolute_call
    (63) statement -> . return
    (64) statement -> . read
    (65) statement -> . print
    (81) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (82) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (83) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (84) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (76) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (117) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (120) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (121) absolute_call -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_call RPARENT SEMICOLON
    (77) return -> . RETURN mega_expression validate_return SEMICOLON
    (126) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (123) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (114) reference -> . ID check_variable_exists add_id_type_to_stack
    (115) reference -> . array_reference
    (116) array_reference -> . ID array_name_reference LBRACKET add_separator expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 256
    VAR             shift and go to state 12
    ID              shift and go to state 173
    IF              shift and go to state 174
    WHILE           shift and go to state 175
    ABSOLUTE        shift and go to state 176
    RETURN          shift and go to state 177
    READ            shift and go to state 178
    PRINT           shift and go to state 34

    statement                      shift and go to state 163
    declare_var                    shift and go to state 164
    assign_statement               shift and go to state 165
    function_call                  shift and go to state 166
    if_condition                   shift and go to state 167
    while_loop                     shift and go to state 168
    absolute_call                  shift and go to state 169
    return                         shift and go to state 170
    read                           shift and go to state 171
    print                          shift and go to state 172
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 256

    (118) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    ABSOLUTE        reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 257

state 257

    (118) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .

    RBRACE          reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    VAR             reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ID              reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    IF              reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    WHILE           reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ABSOLUTE        reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    RETURN          reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    READ            reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    PRINT           reduce using rule 118 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)

