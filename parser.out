Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     close_current_scope -> <empty>
Rule 3     set_func_return_type -> <empty>
Rule 4     new_function_scope -> <empty>
Rule 5     init_param -> <empty>
Rule 6     function_start_quad -> <empty>
Rule 7     endfunc_quad -> <empty>
Rule 8     init_func_call -> <empty>
Rule 9     increment_argument_counter -> <empty>
Rule 10    check_arg_count_type -> <empty>
Rule 11    create_gosub_quad -> <empty>
Rule 12    validate_return -> <empty>
Rule 13    add_operator_to_stack -> <empty>
Rule 14    set_current_type -> <empty>
Rule 15    init_variable -> <empty>
Rule 16    check_variable_exists -> <empty>
Rule 17    init_array -> <empty>
Rule 18    init_array_size -> <empty>
Rule 19    init_array_variable -> <empty>
Rule 20    add_id_type_to_stack -> <empty>
Rule 21    add_float_type_to_stack -> <empty>
Rule 22    add_int_type_to_stack -> <empty>
Rule 23    add_string_type_stack -> <empty>
Rule 24    add_boolean_type_to_stack -> <empty>
Rule 25    process_relational_operator -> <empty>
Rule 26    process_plus_minus_operators -> <empty>
Rule 27    process_mult_div_operators -> <empty>
Rule 28    array_name_reference -> <empty>
Rule 29    array_reference_value -> <empty>
Rule 30    add_separator -> <empty>
Rule 31    remove_separator -> <empty>
Rule 32    create_gotof_quad -> <empty>
Rule 33    goto_skip_else -> <empty>
Rule 34    goto_end_position -> <empty>
Rule 35    goto_return_position -> <empty>
Rule 36    return_end_jump_position -> <empty>
Rule 37    goto_main -> <empty>
Rule 38    main_quad -> <empty>
Rule 39    check_absolute_argument_value -> <empty>
Rule 40    check_trunc_argument_value -> <empty>
Rule 41    check_sqrt_argument_value -> <empty>
Rule 42    substr_quad -> <empty>
Rule 43    check_to_lower_argument_value -> <empty>
Rule 44    check_to_upper_argument_value -> <empty>
Rule 45    check_avg_argument_value -> <empty>
Rule 46    print_value -> <empty>
Rule 47    read_value -> <empty>
Rule 48    end_program -> <empty>
Rule 49    program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program
Rule 50    global_vars -> global_vars global_vars_actions
Rule 51    global_vars -> empty
Rule 52    global_vars_actions -> declare_var
Rule 53    global_vars_actions -> assign_statement
Rule 54    global_declaration -> global_declaration global_statement
Rule 55    global_declaration -> empty
Rule 56    global_statement -> declare_function
Rule 57    global_statement -> declare_function_void
Rule 58    global_statement -> print
Rule 59    main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
Rule 60    statement_list -> statement_list statement
Rule 61    statement_list -> empty
Rule 62    statement -> declare_var
Rule 63    statement -> assign_statement
Rule 64    statement -> function_call
Rule 65    statement -> if_condition
Rule 66    statement -> while_loop
Rule 67    statement -> return
Rule 68    statement -> read
Rule 69    statement -> print
Rule 70    declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 71    declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 72    function_type -> FLOAT_TYPE set_func_return_type
Rule 73    function_type -> INT_TYPE set_func_return_type
Rule 74    function_type -> STRING_TYPE set_func_return_type
Rule 75    function_type -> BOOL_TYPE set_func_return_type
Rule 76    params -> param
Rule 77    params -> param COMMA params
Rule 78    param -> var_type ID init_param
Rule 79    function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
Rule 80    function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
Rule 81    return -> RETURN mega_expression validate_return SEMICOLON
Rule 82    arg_list -> arg
Rule 83    arg_list -> arg COMMA increment_argument_counter arg_list
Rule 84    arg -> mega_expression check_arg_count_type
Rule 85    declare_var -> VAR var_type ID init_variable SEMICOLON
Rule 86    declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
Rule 87    assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 88    assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 89    var_type -> FLOAT_TYPE set_current_type
Rule 90    var_type -> INT_TYPE set_current_type
Rule 91    var_type -> STRING_TYPE set_current_type
Rule 92    var_type -> BOOL_TYPE set_current_type
Rule 93    relational_operator -> GREATERTHAN add_operator_to_stack
Rule 94    relational_operator -> LESSTHAN add_operator_to_stack
Rule 95    relational_operator -> EQUALEQUAL add_operator_to_stack
Rule 96    relational_operator -> LESSTHANOREQUAL add_operator_to_stack
Rule 97    relational_operator -> GREATERTHANOREQUAL add_operator_to_stack
Rule 98    relational_operator -> NOTEQUAL add_operator_to_stack
Rule 99    mega_expression -> expression
Rule 100   mega_expression -> expression relational_operator expression process_relational_operator
Rule 101   expression -> term process_plus_minus_operators
Rule 102   expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression
Rule 103   expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression
Rule 104   term -> factor process_mult_div_operators
Rule 105   term -> factor process_mult_div_operators TIMES add_operator_to_stack term
Rule 106   term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term
Rule 107   factor -> LPARENT add_separator mega_expression RPARENT remove_separator
Rule 108   factor -> value
Rule 109   value -> literal
Rule 110   value -> reference
Rule 111   value -> function_call_value
Rule 112   value -> absolute_call_value
Rule 113   value -> sqrt_call_value
Rule 114   value -> trunc_call_value
Rule 115   value -> substr_call_value
Rule 116   value -> to_lower_call_value
Rule 117   value -> to_upper_call_value
Rule 118   value -> avg_call_value
Rule 119   literal -> FLOAT add_float_type_to_stack
Rule 120   literal -> INT add_int_type_to_stack
Rule 121   literal -> STRING add_string_type_stack
Rule 122   literal -> TRUE add_boolean_type_to_stack
Rule 123   literal -> FALSE add_boolean_type_to_stack
Rule 124   reference -> ID check_variable_exists add_id_type_to_stack
Rule 125   reference -> array_reference
Rule 126   array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
Rule 127   if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
Rule 128   else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
Rule 129   else_condition -> empty
Rule 130   while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
Rule 131   absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
Rule 132   sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
Rule 133   trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
Rule 134   to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
Rule 135   to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
Rule 136   substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
Rule 137   avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
Rule 138   print -> PRINT LPARENT print_many RPARENT SEMICOLON
Rule 139   print_many -> mega_expression print_value
Rule 140   print_many -> mega_expression print_value COMMA print_many
Rule 141   read -> READ LPARENT reference read_value RPARENT SEMICOLON
Rule 142   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 131
AVG                  : 137
BOOL_TYPE            : 75 92
COMMA                : 77 83 136 136 140
DIVIDE               : 106
ELSE                 : 128
EQUAL                : 87 88
EQUALEQUAL           : 95
FALSE                : 123
FLOAT                : 119
FLOAT_TYPE           : 72 89
FUNCTION             : 70 71
GREATERTHAN          : 70 71 93
GREATERTHANOREQUAL   : 97
ID                   : 49 70 71 78 79 80 85 86 87 124 126 137
IF                   : 127
INT                  : 86 120
INT_TYPE             : 73 90
LBRACE               : 59 70 71 127 128 130
LBRACKET             : 86 126
LESSTHAN             : 70 71 94
LESSTHANOREQUAL      : 96
LPARENT              : 59 70 71 79 80 107 127 130 131 132 133 134 135 136 137 138 141
MAIN                 : 59
MINUS                : 103
NOTEQUAL             : 98
PLUS                 : 102
PRINT                : 138
PROGRAM              : 49
RBRACE               : 59 70 71 127 128 130
RBRACKET             : 86 126
READ                 : 141
RETURN               : 81
RPARENT              : 59 70 71 79 80 107 127 130 131 132 133 134 135 136 137 138 141
SEMICOLON            : 49 59 70 71 80 81 85 86 87 88 138 141
SQRT                 : 132
STRING               : 121
STRING_TYPE          : 74 91
SUBSTR               : 136
TIMES                : 105
TOLOWER              : 134
TOUPPER              : 135
TRUE                 : 122
TRUNC                : 133
VAR                  : 85 86 87
VOID_TYPE            : 71
WHILE                : 130
error                : 

Nonterminals, with rules where they appear

absolute_call_value  : 112
add_boolean_type_to_stack : 122 123
add_float_type_to_stack : 119
add_id_type_to_stack : 87 124 137
add_int_type_to_stack : 120
add_operator_to_stack : 87 88 93 94 95 96 97 98 102 103 105 106
add_separator        : 107 126
add_string_type_stack : 121
arg                  : 82 83
arg_list             : 79 80 83
array_name_reference : 126
array_reference      : 125
array_reference_value : 126
assign_statement     : 53 63
avg_call_value       : 118
check_absolute_argument_value : 131
check_arg_count_type : 84
check_avg_argument_value : 137
check_sqrt_argument_value : 132
check_to_lower_argument_value : 134
check_to_upper_argument_value : 135
check_trunc_argument_value : 133
check_variable_exists : 124
close_current_scope  : 59 70 71 127 128 130
create_gosub_quad    : 79 80
create_gotof_quad    : 127 130
declare_function     : 56
declare_function_void : 57
declare_var          : 52 62
else_condition       : 127
empty                : 51 55 61 129
end_program          : 49
endfunc_quad         : 70 71
expression           : 99 100 100 102 103
factor               : 104 105 106
function_call        : 64
function_call_value  : 111
function_start_quad  : 70 71
function_type        : 70
global_declaration   : 49 54
global_statement     : 54
global_vars          : 49 50
global_vars_actions  : 50
goto_end_position    : 127
goto_main            : 49
goto_return_position : 130
goto_skip_else       : 128
if_condition         : 65
increment_argument_counter : 83
init_array           : 86
init_array_size      : 86
init_array_variable  : 86
init_func_call       : 79 80
init_param           : 78
init_variable        : 85 87
literal              : 109
main_declaration     : 49
main_quad            : 59
mega_expression      : 81 84 87 88 107 126 127 130 131 132 133 134 135 136 136 139 140
new_function_scope   : 70 71
new_scope            : 59 127 128 130
param                : 76 77
params               : 70 71 77
print                : 58 69
print_many           : 138 140
print_value          : 139 140
process_mult_div_operators : 104 105 106
process_plus_minus_operators : 101 102 103
process_relational_operator : 100
program              : 0
read                 : 68
read_value           : 141
reference            : 88 110 136 141
relational_operator  : 100
remove_separator     : 107 126
return               : 67 70
return_end_jump_position : 130
set_current_type     : 89 90 91 92
set_func_return_type : 71 72 73 74 75
sqrt_call_value      : 113
statement            : 60
statement_list       : 59 60 70 71 127 128 130
substr_call_value    : 115
substr_quad          : 136
term                 : 101 102 103 105 106
to_lower_call_value  : 116
to_upper_call_value  : 117
trunc_call_value     : 114
validate_return      : 81
value                : 108
var_type             : 78 85 86 87
while_loop           : 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (49) program -> . PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (49) program -> PROGRAM . ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    ID              shift and go to state 3


state 3

    (49) program -> PROGRAM ID . SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    SEMICOLON       shift and go to state 4


state 4

    (49) program -> PROGRAM ID SEMICOLON . global_vars goto_main global_declaration main_declaration end_program
    (50) global_vars -> . global_vars global_vars_actions
    (51) global_vars -> . empty
    (142) empty -> .

    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    MAIN            reduce using rule 142 (empty -> .)
    FUNCTION        reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    global_vars                    shift and go to state 5
    empty                          shift and go to state 6

state 5

    (49) program -> PROGRAM ID SEMICOLON global_vars . goto_main global_declaration main_declaration end_program
    (50) global_vars -> global_vars . global_vars_actions
    (37) goto_main -> .
    (52) global_vars_actions -> . declare_var
    (53) global_vars_actions -> . assign_statement
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    MAIN            reduce using rule 37 (goto_main -> .)
    FUNCTION        reduce using rule 37 (goto_main -> .)
    PRINT           reduce using rule 37 (goto_main -> .)
    VAR             shift and go to state 12
    ID              shift and go to state 7

    goto_main                      shift and go to state 8
    global_vars_actions            shift and go to state 9
    declare_var                    shift and go to state 10
    assign_statement               shift and go to state 11
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 6

    (51) global_vars -> empty .

    VAR             reduce using rule 51 (global_vars -> empty .)
    ID              reduce using rule 51 (global_vars -> empty .)
    MAIN            reduce using rule 51 (global_vars -> empty .)
    FUNCTION        reduce using rule 51 (global_vars -> empty .)
    PRINT           reduce using rule 51 (global_vars -> empty .)


state 7

    (124) reference -> ID . check_variable_exists add_id_type_to_stack
    (126) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 8

    (49) program -> PROGRAM ID SEMICOLON global_vars goto_main . global_declaration main_declaration end_program
    (54) global_declaration -> . global_declaration global_statement
    (55) global_declaration -> . empty
    (142) empty -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNCTION        reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    global_declaration             shift and go to state 17
    empty                          shift and go to state 18

state 9

    (50) global_vars -> global_vars global_vars_actions .

    VAR             reduce using rule 50 (global_vars -> global_vars global_vars_actions .)
    ID              reduce using rule 50 (global_vars -> global_vars global_vars_actions .)
    MAIN            reduce using rule 50 (global_vars -> global_vars global_vars_actions .)
    FUNCTION        reduce using rule 50 (global_vars -> global_vars global_vars_actions .)
    PRINT           reduce using rule 50 (global_vars -> global_vars global_vars_actions .)


state 10

    (52) global_vars_actions -> declare_var .

    VAR             reduce using rule 52 (global_vars_actions -> declare_var .)
    ID              reduce using rule 52 (global_vars_actions -> declare_var .)
    MAIN            reduce using rule 52 (global_vars_actions -> declare_var .)
    FUNCTION        reduce using rule 52 (global_vars_actions -> declare_var .)
    PRINT           reduce using rule 52 (global_vars_actions -> declare_var .)


state 11

    (53) global_vars_actions -> assign_statement .

    VAR             reduce using rule 53 (global_vars_actions -> assign_statement .)
    ID              reduce using rule 53 (global_vars_actions -> assign_statement .)
    MAIN            reduce using rule 53 (global_vars_actions -> assign_statement .)
    FUNCTION        reduce using rule 53 (global_vars_actions -> assign_statement .)
    PRINT           reduce using rule 53 (global_vars_actions -> assign_statement .)


state 12

    (85) declare_var -> VAR . var_type ID init_variable SEMICOLON
    (86) declare_var -> VAR . var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> VAR . var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (89) var_type -> . FLOAT_TYPE set_current_type
    (90) var_type -> . INT_TYPE set_current_type
    (91) var_type -> . STRING_TYPE set_current_type
    (92) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    var_type                       shift and go to state 19

state 13

    (88) assign_statement -> reference . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 24


state 14

    (125) reference -> array_reference .

    EQUAL           reduce using rule 125 (reference -> array_reference .)
    TIMES           reduce using rule 125 (reference -> array_reference .)
    DIVIDE          reduce using rule 125 (reference -> array_reference .)
    PLUS            reduce using rule 125 (reference -> array_reference .)
    MINUS           reduce using rule 125 (reference -> array_reference .)
    GREATERTHAN     reduce using rule 125 (reference -> array_reference .)
    LESSTHAN        reduce using rule 125 (reference -> array_reference .)
    EQUALEQUAL      reduce using rule 125 (reference -> array_reference .)
    LESSTHANOREQUAL reduce using rule 125 (reference -> array_reference .)
    GREATERTHANOREQUAL reduce using rule 125 (reference -> array_reference .)
    NOTEQUAL        reduce using rule 125 (reference -> array_reference .)
    SEMICOLON       reduce using rule 125 (reference -> array_reference .)
    RBRACKET        reduce using rule 125 (reference -> array_reference .)
    COMMA           reduce using rule 125 (reference -> array_reference .)
    RPARENT         reduce using rule 125 (reference -> array_reference .)


state 15

    (124) reference -> ID check_variable_exists . add_id_type_to_stack
    (20) add_id_type_to_stack -> .

    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)
    TIMES           reduce using rule 20 (add_id_type_to_stack -> .)
    DIVIDE          reduce using rule 20 (add_id_type_to_stack -> .)
    PLUS            reduce using rule 20 (add_id_type_to_stack -> .)
    MINUS           reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHAN     reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHAN        reduce using rule 20 (add_id_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    NOTEQUAL        reduce using rule 20 (add_id_type_to_stack -> .)
    SEMICOLON       reduce using rule 20 (add_id_type_to_stack -> .)
    RBRACKET        reduce using rule 20 (add_id_type_to_stack -> .)
    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)
    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 25

state 16

    (126) array_reference -> ID array_name_reference . LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LBRACKET        shift and go to state 26


state 17

    (49) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration . main_declaration end_program
    (54) global_declaration -> global_declaration . global_statement
    (59) main_declaration -> . MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (56) global_statement -> . declare_function
    (57) global_statement -> . declare_function_void
    (58) global_statement -> . print
    (70) declare_function -> . FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) declare_function_void -> . FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON

    MAIN            shift and go to state 29
    FUNCTION        shift and go to state 33
    PRINT           shift and go to state 34

    main_declaration               shift and go to state 27
    global_statement               shift and go to state 28
    declare_function               shift and go to state 30
    declare_function_void          shift and go to state 31
    print                          shift and go to state 32

state 18

    (55) global_declaration -> empty .

    MAIN            reduce using rule 55 (global_declaration -> empty .)
    FUNCTION        reduce using rule 55 (global_declaration -> empty .)
    PRINT           reduce using rule 55 (global_declaration -> empty .)


state 19

    (85) declare_var -> VAR var_type . ID init_variable SEMICOLON
    (86) declare_var -> VAR var_type . ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> VAR var_type . ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON

    ID              shift and go to state 35


state 20

    (89) var_type -> FLOAT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 36

state 21

    (90) var_type -> INT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 37

state 22

    (91) var_type -> STRING_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 38

state 23

    (92) var_type -> BOOL_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 39

state 24

    (88) assign_statement -> reference EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 40

state 25

    (124) reference -> ID check_variable_exists add_id_type_to_stack .

    EQUAL           reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    TIMES           reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    DIVIDE          reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    PLUS            reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    MINUS           reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHAN     reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHAN        reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    EQUALEQUAL      reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    NOTEQUAL        reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    SEMICOLON       reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RBRACKET        reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    COMMA           reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RPARENT         reduce using rule 124 (reference -> ID check_variable_exists add_id_type_to_stack .)


state 26

    (126) array_reference -> ID array_name_reference LBRACKET . add_separator mega_expression RBRACKET remove_separator array_reference_value
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 41

state 27

    (49) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration . end_program
    (48) end_program -> .

    $end            reduce using rule 48 (end_program -> .)

    end_program                    shift and go to state 42

state 28

    (54) global_declaration -> global_declaration global_statement .

    MAIN            reduce using rule 54 (global_declaration -> global_declaration global_statement .)
    FUNCTION        reduce using rule 54 (global_declaration -> global_declaration global_statement .)
    PRINT           reduce using rule 54 (global_declaration -> global_declaration global_statement .)


state 29

    (59) main_declaration -> MAIN . main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (38) main_quad -> .

    LPARENT         reduce using rule 38 (main_quad -> .)

    main_quad                      shift and go to state 43

state 30

    (56) global_statement -> declare_function .

    MAIN            reduce using rule 56 (global_statement -> declare_function .)
    FUNCTION        reduce using rule 56 (global_statement -> declare_function .)
    PRINT           reduce using rule 56 (global_statement -> declare_function .)


state 31

    (57) global_statement -> declare_function_void .

    MAIN            reduce using rule 57 (global_statement -> declare_function_void .)
    FUNCTION        reduce using rule 57 (global_statement -> declare_function_void .)
    PRINT           reduce using rule 57 (global_statement -> declare_function_void .)


state 32

    (58) global_statement -> print .

    MAIN            reduce using rule 58 (global_statement -> print .)
    FUNCTION        reduce using rule 58 (global_statement -> print .)
    PRINT           reduce using rule 58 (global_statement -> print .)


state 33

    (70) declare_function -> FUNCTION . ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) declare_function_void -> FUNCTION . ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    ID              shift and go to state 44


state 34

    (138) print -> PRINT . LPARENT print_many RPARENT SEMICOLON

    LPARENT         shift and go to state 45


state 35

    (85) declare_var -> VAR var_type ID . init_variable SEMICOLON
    (86) declare_var -> VAR var_type ID . init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> VAR var_type ID . init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (15) init_variable -> .
    (17) init_array -> .

    SEMICOLON       reduce using rule 15 (init_variable -> .)
    EQUAL           reduce using rule 15 (init_variable -> .)
    LBRACKET        reduce using rule 17 (init_array -> .)

    init_variable                  shift and go to state 46
    init_array                     shift and go to state 47

state 36

    (89) var_type -> FLOAT_TYPE set_current_type .

    ID              reduce using rule 89 (var_type -> FLOAT_TYPE set_current_type .)


state 37

    (90) var_type -> INT_TYPE set_current_type .

    ID              reduce using rule 90 (var_type -> INT_TYPE set_current_type .)


state 38

    (91) var_type -> STRING_TYPE set_current_type .

    ID              reduce using rule 91 (var_type -> STRING_TYPE set_current_type .)


state 39

    (92) var_type -> BOOL_TYPE set_current_type .

    ID              reduce using rule 92 (var_type -> BOOL_TYPE set_current_type .)


state 40

    (88) assign_statement -> reference EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    reference                      shift and go to state 48
    mega_expression                shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 41

    (126) array_reference -> ID array_name_reference LBRACKET add_separator . mega_expression RBRACKET remove_separator array_reference_value
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 77
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 42

    (49) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .

    $end            reduce using rule 49 (program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .)


state 43

    (59) main_declaration -> MAIN main_quad . LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LPARENT         shift and go to state 78


state 44

    (70) declare_function -> FUNCTION ID . new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) declare_function_void -> FUNCTION ID . new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (4) new_function_scope -> .

    LESSTHAN        reduce using rule 4 (new_function_scope -> .)

    new_function_scope             shift and go to state 79

state 45

    (138) print -> PRINT LPARENT . print_many RPARENT SEMICOLON
    (139) print_many -> . mega_expression print_value
    (140) print_many -> . mega_expression print_value COMMA print_many
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    print_many                     shift and go to state 80
    mega_expression                shift and go to state 81
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 46

    (85) declare_var -> VAR var_type ID init_variable . SEMICOLON
    (87) assign_statement -> VAR var_type ID init_variable . add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (20) add_id_type_to_stack -> .

    SEMICOLON       shift and go to state 82
    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 83

state 47

    (86) declare_var -> VAR var_type ID init_array . LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON

    LBRACKET        shift and go to state 84


state 48

    (110) value -> reference .

    TIMES           reduce using rule 110 (value -> reference .)
    DIVIDE          reduce using rule 110 (value -> reference .)
    PLUS            reduce using rule 110 (value -> reference .)
    MINUS           reduce using rule 110 (value -> reference .)
    GREATERTHAN     reduce using rule 110 (value -> reference .)
    LESSTHAN        reduce using rule 110 (value -> reference .)
    EQUALEQUAL      reduce using rule 110 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 110 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 110 (value -> reference .)
    NOTEQUAL        reduce using rule 110 (value -> reference .)
    SEMICOLON       reduce using rule 110 (value -> reference .)
    RBRACKET        reduce using rule 110 (value -> reference .)
    COMMA           reduce using rule 110 (value -> reference .)
    RPARENT         reduce using rule 110 (value -> reference .)


state 49

    (88) assign_statement -> reference EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 85


state 50

    (99) mega_expression -> expression .
    (100) mega_expression -> expression . relational_operator expression process_relational_operator
    (93) relational_operator -> . GREATERTHAN add_operator_to_stack
    (94) relational_operator -> . LESSTHAN add_operator_to_stack
    (95) relational_operator -> . EQUALEQUAL add_operator_to_stack
    (96) relational_operator -> . LESSTHANOREQUAL add_operator_to_stack
    (97) relational_operator -> . GREATERTHANOREQUAL add_operator_to_stack
    (98) relational_operator -> . NOTEQUAL add_operator_to_stack

    SEMICOLON       reduce using rule 99 (mega_expression -> expression .)
    RBRACKET        reduce using rule 99 (mega_expression -> expression .)
    COMMA           reduce using rule 99 (mega_expression -> expression .)
    RPARENT         reduce using rule 99 (mega_expression -> expression .)
    GREATERTHAN     shift and go to state 87
    LESSTHAN        shift and go to state 88
    EQUALEQUAL      shift and go to state 89
    LESSTHANOREQUAL shift and go to state 90
    GREATERTHANOREQUAL shift and go to state 91
    NOTEQUAL        shift and go to state 92

    relational_operator            shift and go to state 86

state 51

    (101) expression -> term . process_plus_minus_operators
    (102) expression -> term . process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> term . process_plus_minus_operators MINUS add_operator_to_stack expression
    (26) process_plus_minus_operators -> .

    PLUS            reduce using rule 26 (process_plus_minus_operators -> .)
    MINUS           reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHAN     reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHAN        reduce using rule 26 (process_plus_minus_operators -> .)
    EQUALEQUAL      reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    NOTEQUAL        reduce using rule 26 (process_plus_minus_operators -> .)
    SEMICOLON       reduce using rule 26 (process_plus_minus_operators -> .)
    RBRACKET        reduce using rule 26 (process_plus_minus_operators -> .)
    COMMA           reduce using rule 26 (process_plus_minus_operators -> .)
    RPARENT         reduce using rule 26 (process_plus_minus_operators -> .)

    process_plus_minus_operators   shift and go to state 93

state 52

    (104) term -> factor . process_mult_div_operators
    (105) term -> factor . process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> factor . process_mult_div_operators DIVIDE add_operator_to_stack term
    (27) process_mult_div_operators -> .

    TIMES           reduce using rule 27 (process_mult_div_operators -> .)
    DIVIDE          reduce using rule 27 (process_mult_div_operators -> .)
    PLUS            reduce using rule 27 (process_mult_div_operators -> .)
    MINUS           reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHAN     reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHAN        reduce using rule 27 (process_mult_div_operators -> .)
    EQUALEQUAL      reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    NOTEQUAL        reduce using rule 27 (process_mult_div_operators -> .)
    SEMICOLON       reduce using rule 27 (process_mult_div_operators -> .)
    RBRACKET        reduce using rule 27 (process_mult_div_operators -> .)
    COMMA           reduce using rule 27 (process_mult_div_operators -> .)
    RPARENT         reduce using rule 27 (process_mult_div_operators -> .)

    process_mult_div_operators     shift and go to state 94

state 53

    (107) factor -> LPARENT . add_separator mega_expression RPARENT remove_separator
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 95

state 54

    (108) factor -> value .

    TIMES           reduce using rule 108 (factor -> value .)
    DIVIDE          reduce using rule 108 (factor -> value .)
    PLUS            reduce using rule 108 (factor -> value .)
    MINUS           reduce using rule 108 (factor -> value .)
    GREATERTHAN     reduce using rule 108 (factor -> value .)
    LESSTHAN        reduce using rule 108 (factor -> value .)
    EQUALEQUAL      reduce using rule 108 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 108 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 108 (factor -> value .)
    NOTEQUAL        reduce using rule 108 (factor -> value .)
    SEMICOLON       reduce using rule 108 (factor -> value .)
    RBRACKET        reduce using rule 108 (factor -> value .)
    COMMA           reduce using rule 108 (factor -> value .)
    RPARENT         reduce using rule 108 (factor -> value .)


state 55

    (109) value -> literal .

    TIMES           reduce using rule 109 (value -> literal .)
    DIVIDE          reduce using rule 109 (value -> literal .)
    PLUS            reduce using rule 109 (value -> literal .)
    MINUS           reduce using rule 109 (value -> literal .)
    GREATERTHAN     reduce using rule 109 (value -> literal .)
    LESSTHAN        reduce using rule 109 (value -> literal .)
    EQUALEQUAL      reduce using rule 109 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 109 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 109 (value -> literal .)
    NOTEQUAL        reduce using rule 109 (value -> literal .)
    SEMICOLON       reduce using rule 109 (value -> literal .)
    RBRACKET        reduce using rule 109 (value -> literal .)
    COMMA           reduce using rule 109 (value -> literal .)
    RPARENT         reduce using rule 109 (value -> literal .)


state 56

    (111) value -> function_call_value .

    TIMES           reduce using rule 111 (value -> function_call_value .)
    DIVIDE          reduce using rule 111 (value -> function_call_value .)
    PLUS            reduce using rule 111 (value -> function_call_value .)
    MINUS           reduce using rule 111 (value -> function_call_value .)
    GREATERTHAN     reduce using rule 111 (value -> function_call_value .)
    LESSTHAN        reduce using rule 111 (value -> function_call_value .)
    EQUALEQUAL      reduce using rule 111 (value -> function_call_value .)
    LESSTHANOREQUAL reduce using rule 111 (value -> function_call_value .)
    GREATERTHANOREQUAL reduce using rule 111 (value -> function_call_value .)
    NOTEQUAL        reduce using rule 111 (value -> function_call_value .)
    SEMICOLON       reduce using rule 111 (value -> function_call_value .)
    RBRACKET        reduce using rule 111 (value -> function_call_value .)
    COMMA           reduce using rule 111 (value -> function_call_value .)
    RPARENT         reduce using rule 111 (value -> function_call_value .)


state 57

    (112) value -> absolute_call_value .

    TIMES           reduce using rule 112 (value -> absolute_call_value .)
    DIVIDE          reduce using rule 112 (value -> absolute_call_value .)
    PLUS            reduce using rule 112 (value -> absolute_call_value .)
    MINUS           reduce using rule 112 (value -> absolute_call_value .)
    GREATERTHAN     reduce using rule 112 (value -> absolute_call_value .)
    LESSTHAN        reduce using rule 112 (value -> absolute_call_value .)
    EQUALEQUAL      reduce using rule 112 (value -> absolute_call_value .)
    LESSTHANOREQUAL reduce using rule 112 (value -> absolute_call_value .)
    GREATERTHANOREQUAL reduce using rule 112 (value -> absolute_call_value .)
    NOTEQUAL        reduce using rule 112 (value -> absolute_call_value .)
    SEMICOLON       reduce using rule 112 (value -> absolute_call_value .)
    RBRACKET        reduce using rule 112 (value -> absolute_call_value .)
    COMMA           reduce using rule 112 (value -> absolute_call_value .)
    RPARENT         reduce using rule 112 (value -> absolute_call_value .)


state 58

    (113) value -> sqrt_call_value .

    TIMES           reduce using rule 113 (value -> sqrt_call_value .)
    DIVIDE          reduce using rule 113 (value -> sqrt_call_value .)
    PLUS            reduce using rule 113 (value -> sqrt_call_value .)
    MINUS           reduce using rule 113 (value -> sqrt_call_value .)
    GREATERTHAN     reduce using rule 113 (value -> sqrt_call_value .)
    LESSTHAN        reduce using rule 113 (value -> sqrt_call_value .)
    EQUALEQUAL      reduce using rule 113 (value -> sqrt_call_value .)
    LESSTHANOREQUAL reduce using rule 113 (value -> sqrt_call_value .)
    GREATERTHANOREQUAL reduce using rule 113 (value -> sqrt_call_value .)
    NOTEQUAL        reduce using rule 113 (value -> sqrt_call_value .)
    SEMICOLON       reduce using rule 113 (value -> sqrt_call_value .)
    RBRACKET        reduce using rule 113 (value -> sqrt_call_value .)
    COMMA           reduce using rule 113 (value -> sqrt_call_value .)
    RPARENT         reduce using rule 113 (value -> sqrt_call_value .)


state 59

    (114) value -> trunc_call_value .

    TIMES           reduce using rule 114 (value -> trunc_call_value .)
    DIVIDE          reduce using rule 114 (value -> trunc_call_value .)
    PLUS            reduce using rule 114 (value -> trunc_call_value .)
    MINUS           reduce using rule 114 (value -> trunc_call_value .)
    GREATERTHAN     reduce using rule 114 (value -> trunc_call_value .)
    LESSTHAN        reduce using rule 114 (value -> trunc_call_value .)
    EQUALEQUAL      reduce using rule 114 (value -> trunc_call_value .)
    LESSTHANOREQUAL reduce using rule 114 (value -> trunc_call_value .)
    GREATERTHANOREQUAL reduce using rule 114 (value -> trunc_call_value .)
    NOTEQUAL        reduce using rule 114 (value -> trunc_call_value .)
    SEMICOLON       reduce using rule 114 (value -> trunc_call_value .)
    RBRACKET        reduce using rule 114 (value -> trunc_call_value .)
    COMMA           reduce using rule 114 (value -> trunc_call_value .)
    RPARENT         reduce using rule 114 (value -> trunc_call_value .)


state 60

    (115) value -> substr_call_value .

    TIMES           reduce using rule 115 (value -> substr_call_value .)
    DIVIDE          reduce using rule 115 (value -> substr_call_value .)
    PLUS            reduce using rule 115 (value -> substr_call_value .)
    MINUS           reduce using rule 115 (value -> substr_call_value .)
    GREATERTHAN     reduce using rule 115 (value -> substr_call_value .)
    LESSTHAN        reduce using rule 115 (value -> substr_call_value .)
    EQUALEQUAL      reduce using rule 115 (value -> substr_call_value .)
    LESSTHANOREQUAL reduce using rule 115 (value -> substr_call_value .)
    GREATERTHANOREQUAL reduce using rule 115 (value -> substr_call_value .)
    NOTEQUAL        reduce using rule 115 (value -> substr_call_value .)
    SEMICOLON       reduce using rule 115 (value -> substr_call_value .)
    RBRACKET        reduce using rule 115 (value -> substr_call_value .)
    COMMA           reduce using rule 115 (value -> substr_call_value .)
    RPARENT         reduce using rule 115 (value -> substr_call_value .)


state 61

    (116) value -> to_lower_call_value .

    TIMES           reduce using rule 116 (value -> to_lower_call_value .)
    DIVIDE          reduce using rule 116 (value -> to_lower_call_value .)
    PLUS            reduce using rule 116 (value -> to_lower_call_value .)
    MINUS           reduce using rule 116 (value -> to_lower_call_value .)
    GREATERTHAN     reduce using rule 116 (value -> to_lower_call_value .)
    LESSTHAN        reduce using rule 116 (value -> to_lower_call_value .)
    EQUALEQUAL      reduce using rule 116 (value -> to_lower_call_value .)
    LESSTHANOREQUAL reduce using rule 116 (value -> to_lower_call_value .)
    GREATERTHANOREQUAL reduce using rule 116 (value -> to_lower_call_value .)
    NOTEQUAL        reduce using rule 116 (value -> to_lower_call_value .)
    SEMICOLON       reduce using rule 116 (value -> to_lower_call_value .)
    RBRACKET        reduce using rule 116 (value -> to_lower_call_value .)
    COMMA           reduce using rule 116 (value -> to_lower_call_value .)
    RPARENT         reduce using rule 116 (value -> to_lower_call_value .)


state 62

    (117) value -> to_upper_call_value .

    TIMES           reduce using rule 117 (value -> to_upper_call_value .)
    DIVIDE          reduce using rule 117 (value -> to_upper_call_value .)
    PLUS            reduce using rule 117 (value -> to_upper_call_value .)
    MINUS           reduce using rule 117 (value -> to_upper_call_value .)
    GREATERTHAN     reduce using rule 117 (value -> to_upper_call_value .)
    LESSTHAN        reduce using rule 117 (value -> to_upper_call_value .)
    EQUALEQUAL      reduce using rule 117 (value -> to_upper_call_value .)
    LESSTHANOREQUAL reduce using rule 117 (value -> to_upper_call_value .)
    GREATERTHANOREQUAL reduce using rule 117 (value -> to_upper_call_value .)
    NOTEQUAL        reduce using rule 117 (value -> to_upper_call_value .)
    SEMICOLON       reduce using rule 117 (value -> to_upper_call_value .)
    RBRACKET        reduce using rule 117 (value -> to_upper_call_value .)
    COMMA           reduce using rule 117 (value -> to_upper_call_value .)
    RPARENT         reduce using rule 117 (value -> to_upper_call_value .)


state 63

    (118) value -> avg_call_value .

    TIMES           reduce using rule 118 (value -> avg_call_value .)
    DIVIDE          reduce using rule 118 (value -> avg_call_value .)
    PLUS            reduce using rule 118 (value -> avg_call_value .)
    MINUS           reduce using rule 118 (value -> avg_call_value .)
    GREATERTHAN     reduce using rule 118 (value -> avg_call_value .)
    LESSTHAN        reduce using rule 118 (value -> avg_call_value .)
    EQUALEQUAL      reduce using rule 118 (value -> avg_call_value .)
    LESSTHANOREQUAL reduce using rule 118 (value -> avg_call_value .)
    GREATERTHANOREQUAL reduce using rule 118 (value -> avg_call_value .)
    NOTEQUAL        reduce using rule 118 (value -> avg_call_value .)
    SEMICOLON       reduce using rule 118 (value -> avg_call_value .)
    RBRACKET        reduce using rule 118 (value -> avg_call_value .)
    COMMA           reduce using rule 118 (value -> avg_call_value .)
    RPARENT         reduce using rule 118 (value -> avg_call_value .)


state 64

    (119) literal -> FLOAT . add_float_type_to_stack
    (21) add_float_type_to_stack -> .

    TIMES           reduce using rule 21 (add_float_type_to_stack -> .)
    DIVIDE          reduce using rule 21 (add_float_type_to_stack -> .)
    PLUS            reduce using rule 21 (add_float_type_to_stack -> .)
    MINUS           reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHAN     reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHAN        reduce using rule 21 (add_float_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    NOTEQUAL        reduce using rule 21 (add_float_type_to_stack -> .)
    SEMICOLON       reduce using rule 21 (add_float_type_to_stack -> .)
    RBRACKET        reduce using rule 21 (add_float_type_to_stack -> .)
    COMMA           reduce using rule 21 (add_float_type_to_stack -> .)
    RPARENT         reduce using rule 21 (add_float_type_to_stack -> .)

    add_float_type_to_stack        shift and go to state 96

state 65

    (120) literal -> INT . add_int_type_to_stack
    (22) add_int_type_to_stack -> .

    TIMES           reduce using rule 22 (add_int_type_to_stack -> .)
    DIVIDE          reduce using rule 22 (add_int_type_to_stack -> .)
    PLUS            reduce using rule 22 (add_int_type_to_stack -> .)
    MINUS           reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHAN     reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHAN        reduce using rule 22 (add_int_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    NOTEQUAL        reduce using rule 22 (add_int_type_to_stack -> .)
    SEMICOLON       reduce using rule 22 (add_int_type_to_stack -> .)
    RBRACKET        reduce using rule 22 (add_int_type_to_stack -> .)
    COMMA           reduce using rule 22 (add_int_type_to_stack -> .)
    RPARENT         reduce using rule 22 (add_int_type_to_stack -> .)

    add_int_type_to_stack          shift and go to state 97

state 66

    (121) literal -> STRING . add_string_type_stack
    (23) add_string_type_stack -> .

    TIMES           reduce using rule 23 (add_string_type_stack -> .)
    DIVIDE          reduce using rule 23 (add_string_type_stack -> .)
    PLUS            reduce using rule 23 (add_string_type_stack -> .)
    MINUS           reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHAN     reduce using rule 23 (add_string_type_stack -> .)
    LESSTHAN        reduce using rule 23 (add_string_type_stack -> .)
    EQUALEQUAL      reduce using rule 23 (add_string_type_stack -> .)
    LESSTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    NOTEQUAL        reduce using rule 23 (add_string_type_stack -> .)
    SEMICOLON       reduce using rule 23 (add_string_type_stack -> .)
    RBRACKET        reduce using rule 23 (add_string_type_stack -> .)
    COMMA           reduce using rule 23 (add_string_type_stack -> .)
    RPARENT         reduce using rule 23 (add_string_type_stack -> .)

    add_string_type_stack          shift and go to state 98

state 67

    (122) literal -> TRUE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 99

state 68

    (123) literal -> FALSE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 100

state 69

    (124) reference -> ID . check_variable_exists add_id_type_to_stack
    (79) function_call_value -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (126) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (8) init_func_call -> .
    (28) array_name_reference -> .

    TIMES           reduce using rule 16 (check_variable_exists -> .)
    DIVIDE          reduce using rule 16 (check_variable_exists -> .)
    PLUS            reduce using rule 16 (check_variable_exists -> .)
    MINUS           reduce using rule 16 (check_variable_exists -> .)
    GREATERTHAN     reduce using rule 16 (check_variable_exists -> .)
    LESSTHAN        reduce using rule 16 (check_variable_exists -> .)
    EQUALEQUAL      reduce using rule 16 (check_variable_exists -> .)
    LESSTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    GREATERTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    NOTEQUAL        reduce using rule 16 (check_variable_exists -> .)
    SEMICOLON       reduce using rule 16 (check_variable_exists -> .)
    RBRACKET        reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LPARENT         reduce using rule 8 (init_func_call -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    init_func_call                 shift and go to state 101
    array_name_reference           shift and go to state 16

state 70

    (131) absolute_call_value -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_value RPARENT

    LPARENT         shift and go to state 102


state 71

    (132) sqrt_call_value -> SQRT . LPARENT mega_expression check_sqrt_argument_value RPARENT

    LPARENT         shift and go to state 103


state 72

    (133) trunc_call_value -> TRUNC . LPARENT mega_expression check_trunc_argument_value RPARENT

    LPARENT         shift and go to state 104


state 73

    (136) substr_call_value -> SUBSTR . LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    LPARENT         shift and go to state 105


state 74

    (134) to_lower_call_value -> TOLOWER . LPARENT mega_expression check_to_lower_argument_value RPARENT

    LPARENT         shift and go to state 106


state 75

    (135) to_upper_call_value -> TOUPPER . LPARENT mega_expression check_to_upper_argument_value RPARENT

    LPARENT         shift and go to state 107


state 76

    (137) avg_call_value -> AVG . LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT

    LPARENT         shift and go to state 108


state 77

    (126) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression . RBRACKET remove_separator array_reference_value

    RBRACKET        shift and go to state 109


state 78

    (59) main_declaration -> MAIN main_quad LPARENT . RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    RPARENT         shift and go to state 110


state 79

    (70) declare_function -> FUNCTION ID new_function_scope . LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) declare_function_void -> FUNCTION ID new_function_scope . LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LESSTHAN        shift and go to state 111


state 80

    (138) print -> PRINT LPARENT print_many . RPARENT SEMICOLON

    RPARENT         shift and go to state 112


state 81

    (139) print_many -> mega_expression . print_value
    (140) print_many -> mega_expression . print_value COMMA print_many
    (46) print_value -> .

    COMMA           reduce using rule 46 (print_value -> .)
    RPARENT         reduce using rule 46 (print_value -> .)

    print_value                    shift and go to state 113

state 82

    (85) declare_var -> VAR var_type ID init_variable SEMICOLON .

    VAR             reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ID              reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    MAIN            reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    FUNCTION        reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    PRINT           reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RBRACE          reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    IF              reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    WHILE           reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RETURN          reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    READ            reduce using rule 85 (declare_var -> VAR var_type ID init_variable SEMICOLON .)


state 83

    (87) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 114


state 84

    (86) declare_var -> VAR var_type ID init_array LBRACKET . INT init_array_size RBRACKET init_array_variable SEMICOLON

    INT             shift and go to state 115


state 85

    (88) assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 88 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 86

    (100) mega_expression -> expression relational_operator . expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    expression                     shift and go to state 116
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 87

    (93) relational_operator -> GREATERTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 117

state 88

    (94) relational_operator -> LESSTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 118

state 89

    (95) relational_operator -> EQUALEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 119

state 90

    (96) relational_operator -> LESSTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 120

state 91

    (97) relational_operator -> GREATERTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 121

state 92

    (98) relational_operator -> NOTEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 122

state 93

    (101) expression -> term process_plus_minus_operators .
    (102) expression -> term process_plus_minus_operators . PLUS add_operator_to_stack expression
    (103) expression -> term process_plus_minus_operators . MINUS add_operator_to_stack expression

    GREATERTHAN     reduce using rule 101 (expression -> term process_plus_minus_operators .)
    LESSTHAN        reduce using rule 101 (expression -> term process_plus_minus_operators .)
    EQUALEQUAL      reduce using rule 101 (expression -> term process_plus_minus_operators .)
    LESSTHANOREQUAL reduce using rule 101 (expression -> term process_plus_minus_operators .)
    GREATERTHANOREQUAL reduce using rule 101 (expression -> term process_plus_minus_operators .)
    NOTEQUAL        reduce using rule 101 (expression -> term process_plus_minus_operators .)
    SEMICOLON       reduce using rule 101 (expression -> term process_plus_minus_operators .)
    RBRACKET        reduce using rule 101 (expression -> term process_plus_minus_operators .)
    COMMA           reduce using rule 101 (expression -> term process_plus_minus_operators .)
    RPARENT         reduce using rule 101 (expression -> term process_plus_minus_operators .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 94

    (104) term -> factor process_mult_div_operators .
    (105) term -> factor process_mult_div_operators . TIMES add_operator_to_stack term
    (106) term -> factor process_mult_div_operators . DIVIDE add_operator_to_stack term

    PLUS            reduce using rule 104 (term -> factor process_mult_div_operators .)
    MINUS           reduce using rule 104 (term -> factor process_mult_div_operators .)
    GREATERTHAN     reduce using rule 104 (term -> factor process_mult_div_operators .)
    LESSTHAN        reduce using rule 104 (term -> factor process_mult_div_operators .)
    EQUALEQUAL      reduce using rule 104 (term -> factor process_mult_div_operators .)
    LESSTHANOREQUAL reduce using rule 104 (term -> factor process_mult_div_operators .)
    GREATERTHANOREQUAL reduce using rule 104 (term -> factor process_mult_div_operators .)
    NOTEQUAL        reduce using rule 104 (term -> factor process_mult_div_operators .)
    SEMICOLON       reduce using rule 104 (term -> factor process_mult_div_operators .)
    RBRACKET        reduce using rule 104 (term -> factor process_mult_div_operators .)
    COMMA           reduce using rule 104 (term -> factor process_mult_div_operators .)
    RPARENT         reduce using rule 104 (term -> factor process_mult_div_operators .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 126


state 95

    (107) factor -> LPARENT add_separator . mega_expression RPARENT remove_separator
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 127
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 96

    (119) literal -> FLOAT add_float_type_to_stack .

    TIMES           reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    DIVIDE          reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    PLUS            reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    MINUS           reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHAN     reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHAN        reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    EQUALEQUAL      reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    NOTEQUAL        reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    SEMICOLON       reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    RBRACKET        reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    COMMA           reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)
    RPARENT         reduce using rule 119 (literal -> FLOAT add_float_type_to_stack .)


state 97

    (120) literal -> INT add_int_type_to_stack .

    TIMES           reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    DIVIDE          reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    PLUS            reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    MINUS           reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    GREATERTHAN     reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    LESSTHAN        reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    EQUALEQUAL      reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    NOTEQUAL        reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    SEMICOLON       reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    RBRACKET        reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    COMMA           reduce using rule 120 (literal -> INT add_int_type_to_stack .)
    RPARENT         reduce using rule 120 (literal -> INT add_int_type_to_stack .)


state 98

    (121) literal -> STRING add_string_type_stack .

    TIMES           reduce using rule 121 (literal -> STRING add_string_type_stack .)
    DIVIDE          reduce using rule 121 (literal -> STRING add_string_type_stack .)
    PLUS            reduce using rule 121 (literal -> STRING add_string_type_stack .)
    MINUS           reduce using rule 121 (literal -> STRING add_string_type_stack .)
    GREATERTHAN     reduce using rule 121 (literal -> STRING add_string_type_stack .)
    LESSTHAN        reduce using rule 121 (literal -> STRING add_string_type_stack .)
    EQUALEQUAL      reduce using rule 121 (literal -> STRING add_string_type_stack .)
    LESSTHANOREQUAL reduce using rule 121 (literal -> STRING add_string_type_stack .)
    GREATERTHANOREQUAL reduce using rule 121 (literal -> STRING add_string_type_stack .)
    NOTEQUAL        reduce using rule 121 (literal -> STRING add_string_type_stack .)
    SEMICOLON       reduce using rule 121 (literal -> STRING add_string_type_stack .)
    RBRACKET        reduce using rule 121 (literal -> STRING add_string_type_stack .)
    COMMA           reduce using rule 121 (literal -> STRING add_string_type_stack .)
    RPARENT         reduce using rule 121 (literal -> STRING add_string_type_stack .)


state 99

    (122) literal -> TRUE add_boolean_type_to_stack .

    TIMES           reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    PLUS            reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    MINUS           reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    COMMA           reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 122 (literal -> TRUE add_boolean_type_to_stack .)


state 100

    (123) literal -> FALSE add_boolean_type_to_stack .

    TIMES           reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    PLUS            reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    MINUS           reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    COMMA           reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 123 (literal -> FALSE add_boolean_type_to_stack .)


state 101

    (79) function_call_value -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad

    LPARENT         shift and go to state 128


state 102

    (131) absolute_call_value -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_value RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 129
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 103

    (132) sqrt_call_value -> SQRT LPARENT . mega_expression check_sqrt_argument_value RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 130
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 104

    (133) trunc_call_value -> TRUNC LPARENT . mega_expression check_trunc_argument_value RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 131
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 105

    (136) substr_call_value -> SUBSTR LPARENT . reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 132
    array_reference                shift and go to state 14

state 106

    (134) to_lower_call_value -> TOLOWER LPARENT . mega_expression check_to_lower_argument_value RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 133
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 107

    (135) to_upper_call_value -> TOUPPER LPARENT . mega_expression check_to_upper_argument_value RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 134
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 108

    (137) avg_call_value -> AVG LPARENT . ID add_id_type_to_stack check_avg_argument_value RPARENT

    ID              shift and go to state 135


state 109

    (126) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET . remove_separator array_reference_value
    (31) remove_separator -> .

    EQUAL           reduce using rule 31 (remove_separator -> .)
    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 136

state 110

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT . LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LBRACE          shift and go to state 137


state 111

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN . function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN . VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (72) function_type -> . FLOAT_TYPE set_func_return_type
    (73) function_type -> . INT_TYPE set_func_return_type
    (74) function_type -> . STRING_TYPE set_func_return_type
    (75) function_type -> . BOOL_TYPE set_func_return_type

    VOID_TYPE       shift and go to state 139
    FLOAT_TYPE      shift and go to state 140
    INT_TYPE        shift and go to state 141
    STRING_TYPE     shift and go to state 142
    BOOL_TYPE       shift and go to state 143

    function_type                  shift and go to state 138

state 112

    (138) print -> PRINT LPARENT print_many RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 144


state 113

    (139) print_many -> mega_expression print_value .
    (140) print_many -> mega_expression print_value . COMMA print_many

    RPARENT         reduce using rule 139 (print_many -> mega_expression print_value .)
    COMMA           shift and go to state 145


state 114

    (87) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 146

state 115

    (86) declare_var -> VAR var_type ID init_array LBRACKET INT . init_array_size RBRACKET init_array_variable SEMICOLON
    (18) init_array_size -> .

    RBRACKET        reduce using rule 18 (init_array_size -> .)

    init_array_size                shift and go to state 147

state 116

    (100) mega_expression -> expression relational_operator expression . process_relational_operator
    (25) process_relational_operator -> .

    SEMICOLON       reduce using rule 25 (process_relational_operator -> .)
    RBRACKET        reduce using rule 25 (process_relational_operator -> .)
    COMMA           reduce using rule 25 (process_relational_operator -> .)
    RPARENT         reduce using rule 25 (process_relational_operator -> .)

    process_relational_operator    shift and go to state 148

state 117

    (93) relational_operator -> GREATERTHAN add_operator_to_stack .

    LPARENT         reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    INT             reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    STRING          reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUE            reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FALSE           reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ID              reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SQRT            reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    AVG             reduce using rule 93 (relational_operator -> GREATERTHAN add_operator_to_stack .)


state 118

    (94) relational_operator -> LESSTHAN add_operator_to_stack .

    LPARENT         reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    INT             reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    STRING          reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUE            reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FALSE           reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ID              reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SQRT            reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)
    AVG             reduce using rule 94 (relational_operator -> LESSTHAN add_operator_to_stack .)


state 119

    (95) relational_operator -> EQUALEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    INT             reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    STRING          reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ID              reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    AVG             reduce using rule 95 (relational_operator -> EQUALEQUAL add_operator_to_stack .)


state 120

    (96) relational_operator -> LESSTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 96 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)


state 121

    (97) relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 97 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)


state 122

    (98) relational_operator -> NOTEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    INT             reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    STRING          reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ID              reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    AVG             reduce using rule 98 (relational_operator -> NOTEQUAL add_operator_to_stack .)


state 123

    (102) expression -> term process_plus_minus_operators PLUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 149

state 124

    (103) expression -> term process_plus_minus_operators MINUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 150

state 125

    (105) term -> factor process_mult_div_operators TIMES . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 151

state 126

    (106) term -> factor process_mult_div_operators DIVIDE . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 152

state 127

    (107) factor -> LPARENT add_separator mega_expression . RPARENT remove_separator

    RPARENT         shift and go to state 153


state 128

    (79) function_call_value -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad
    (82) arg_list -> . arg
    (83) arg_list -> . arg COMMA increment_argument_counter arg_list
    (84) arg -> . mega_expression check_arg_count_type
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    arg_list                       shift and go to state 154
    arg                            shift and go to state 155
    mega_expression                shift and go to state 156
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 129

    (131) absolute_call_value -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_value RPARENT
    (39) check_absolute_argument_value -> .

    RPARENT         reduce using rule 39 (check_absolute_argument_value -> .)

    check_absolute_argument_value  shift and go to state 157

state 130

    (132) sqrt_call_value -> SQRT LPARENT mega_expression . check_sqrt_argument_value RPARENT
    (41) check_sqrt_argument_value -> .

    RPARENT         reduce using rule 41 (check_sqrt_argument_value -> .)

    check_sqrt_argument_value      shift and go to state 158

state 131

    (133) trunc_call_value -> TRUNC LPARENT mega_expression . check_trunc_argument_value RPARENT
    (40) check_trunc_argument_value -> .

    RPARENT         reduce using rule 40 (check_trunc_argument_value -> .)

    check_trunc_argument_value     shift and go to state 159

state 132

    (136) substr_call_value -> SUBSTR LPARENT reference . COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 160


state 133

    (134) to_lower_call_value -> TOLOWER LPARENT mega_expression . check_to_lower_argument_value RPARENT
    (43) check_to_lower_argument_value -> .

    RPARENT         reduce using rule 43 (check_to_lower_argument_value -> .)

    check_to_lower_argument_value  shift and go to state 161

state 134

    (135) to_upper_call_value -> TOUPPER LPARENT mega_expression . check_to_upper_argument_value RPARENT
    (44) check_to_upper_argument_value -> .

    RPARENT         reduce using rule 44 (check_to_upper_argument_value -> .)

    check_to_upper_argument_value  shift and go to state 162

state 135

    (137) avg_call_value -> AVG LPARENT ID . add_id_type_to_stack check_avg_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 163

state 136

    (126) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator . array_reference_value
    (29) array_reference_value -> .

    EQUAL           reduce using rule 29 (array_reference_value -> .)
    TIMES           reduce using rule 29 (array_reference_value -> .)
    DIVIDE          reduce using rule 29 (array_reference_value -> .)
    PLUS            reduce using rule 29 (array_reference_value -> .)
    MINUS           reduce using rule 29 (array_reference_value -> .)
    GREATERTHAN     reduce using rule 29 (array_reference_value -> .)
    LESSTHAN        reduce using rule 29 (array_reference_value -> .)
    EQUALEQUAL      reduce using rule 29 (array_reference_value -> .)
    LESSTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    GREATERTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    NOTEQUAL        reduce using rule 29 (array_reference_value -> .)
    SEMICOLON       reduce using rule 29 (array_reference_value -> .)
    RBRACKET        reduce using rule 29 (array_reference_value -> .)
    COMMA           reduce using rule 29 (array_reference_value -> .)
    RPARENT         reduce using rule 29 (array_reference_value -> .)

    array_reference_value          shift and go to state 164

state 137

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE . new_scope statement_list RBRACE close_current_scope SEMICOLON
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 165

state 138

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 166


state 139

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE . set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 167

state 140

    (72) function_type -> FLOAT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 168

state 141

    (73) function_type -> INT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 169

state 142

    (74) function_type -> STRING_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 170

state 143

    (75) function_type -> BOOL_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 171

state 144

    (138) print -> PRINT LPARENT print_many RPARENT SEMICOLON .

    MAIN            reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    PRINT           reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RBRACE          reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    VAR             reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ID              reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    IF              reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    WHILE           reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RETURN          reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    READ            reduce using rule 138 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)


state 145

    (140) print_many -> mega_expression print_value COMMA . print_many
    (139) print_many -> . mega_expression print_value
    (140) print_many -> . mega_expression print_value COMMA print_many
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 81
    print_many                     shift and go to state 172
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 146

    (87) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 173
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 147

    (86) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size . RBRACKET init_array_variable SEMICOLON

    RBRACKET        shift and go to state 174


state 148

    (100) mega_expression -> expression relational_operator expression process_relational_operator .

    SEMICOLON       reduce using rule 100 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RBRACKET        reduce using rule 100 (mega_expression -> expression relational_operator expression process_relational_operator .)
    COMMA           reduce using rule 100 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RPARENT         reduce using rule 100 (mega_expression -> expression relational_operator expression process_relational_operator .)


state 149

    (102) expression -> term process_plus_minus_operators PLUS add_operator_to_stack . expression
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    term                           shift and go to state 51
    expression                     shift and go to state 175
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 150

    (103) expression -> term process_plus_minus_operators MINUS add_operator_to_stack . expression
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    term                           shift and go to state 51
    expression                     shift and go to state 176
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 151

    (105) term -> factor process_mult_div_operators TIMES add_operator_to_stack . term
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    factor                         shift and go to state 52
    term                           shift and go to state 177
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 152

    (106) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack . term
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    factor                         shift and go to state 52
    term                           shift and go to state 178
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 153

    (107) factor -> LPARENT add_separator mega_expression RPARENT . remove_separator
    (31) remove_separator -> .

    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 179

state 154

    (79) function_call_value -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad

    RPARENT         shift and go to state 180


state 155

    (82) arg_list -> arg .
    (83) arg_list -> arg . COMMA increment_argument_counter arg_list

    RPARENT         reduce using rule 82 (arg_list -> arg .)
    COMMA           shift and go to state 181


state 156

    (84) arg -> mega_expression . check_arg_count_type
    (10) check_arg_count_type -> .

    COMMA           reduce using rule 10 (check_arg_count_type -> .)
    RPARENT         reduce using rule 10 (check_arg_count_type -> .)

    check_arg_count_type           shift and go to state 182

state 157

    (131) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value . RPARENT

    RPARENT         shift and go to state 183


state 158

    (132) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value . RPARENT

    RPARENT         shift and go to state 184


state 159

    (133) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value . RPARENT

    RPARENT         shift and go to state 185


state 160

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA . mega_expression COMMA mega_expression substr_quad RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    reference                      shift and go to state 48
    mega_expression                shift and go to state 186
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 161

    (134) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value . RPARENT

    RPARENT         shift and go to state 187


state 162

    (135) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value . RPARENT

    RPARENT         shift and go to state 188


state 163

    (137) avg_call_value -> AVG LPARENT ID add_id_type_to_stack . check_avg_argument_value RPARENT
    (45) check_avg_argument_value -> .

    RPARENT         reduce using rule 45 (check_avg_argument_value -> .)

    check_avg_argument_value       shift and go to state 189

state 164

    (126) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .

    EQUAL           reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    TIMES           reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    DIVIDE          reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    PLUS            reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    MINUS           reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHAN     reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHAN        reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    EQUALEQUAL      reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHANOREQUAL reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHANOREQUAL reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    NOTEQUAL        reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    SEMICOLON       reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RBRACKET        reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    COMMA           reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RPARENT         reduce using rule 126 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)


state 165

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope . statement_list RBRACE close_current_scope SEMICOLON
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 190
    empty                          shift and go to state 191

state 166

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 192


state 167

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 193


state 168

    (72) function_type -> FLOAT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 72 (function_type -> FLOAT_TYPE set_func_return_type .)


state 169

    (73) function_type -> INT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 73 (function_type -> INT_TYPE set_func_return_type .)


state 170

    (74) function_type -> STRING_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 74 (function_type -> STRING_TYPE set_func_return_type .)


state 171

    (75) function_type -> BOOL_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 75 (function_type -> BOOL_TYPE set_func_return_type .)


state 172

    (140) print_many -> mega_expression print_value COMMA print_many .

    RPARENT         reduce using rule 140 (print_many -> mega_expression print_value COMMA print_many .)


state 173

    (87) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 194


state 174

    (86) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET . init_array_variable SEMICOLON
    (19) init_array_variable -> .

    SEMICOLON       reduce using rule 19 (init_array_variable -> .)

    init_array_variable            shift and go to state 195

state 175

    (102) expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    COMMA           reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 102 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)


state 176

    (103) expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    COMMA           reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 103 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)


state 177

    (105) term -> factor process_mult_div_operators TIMES add_operator_to_stack term .

    PLUS            reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    MINUS           reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHAN        reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    SEMICOLON       reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RBRACKET        reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    COMMA           reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RPARENT         reduce using rule 105 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)


state 178

    (106) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .

    PLUS            reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    MINUS           reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHAN        reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    SEMICOLON       reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RBRACKET        reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    COMMA           reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RPARENT         reduce using rule 106 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)


state 179

    (107) factor -> LPARENT add_separator mega_expression RPARENT remove_separator .

    TIMES           reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    DIVIDE          reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    PLUS            reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    MINUS           reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHAN     reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHAN        reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    EQUALEQUAL      reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHANOREQUAL reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHANOREQUAL reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    NOTEQUAL        reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    SEMICOLON       reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RBRACKET        reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    COMMA           reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RPARENT         reduce using rule 107 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)


state 180

    (79) function_call_value -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad
    (11) create_gosub_quad -> .

    TIMES           reduce using rule 11 (create_gosub_quad -> .)
    DIVIDE          reduce using rule 11 (create_gosub_quad -> .)
    PLUS            reduce using rule 11 (create_gosub_quad -> .)
    MINUS           reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHAN     reduce using rule 11 (create_gosub_quad -> .)
    LESSTHAN        reduce using rule 11 (create_gosub_quad -> .)
    EQUALEQUAL      reduce using rule 11 (create_gosub_quad -> .)
    LESSTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    NOTEQUAL        reduce using rule 11 (create_gosub_quad -> .)
    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)
    RBRACKET        reduce using rule 11 (create_gosub_quad -> .)
    COMMA           reduce using rule 11 (create_gosub_quad -> .)
    RPARENT         reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 196

state 181

    (83) arg_list -> arg COMMA . increment_argument_counter arg_list
    (9) increment_argument_counter -> .

    LPARENT         reduce using rule 9 (increment_argument_counter -> .)
    FLOAT           reduce using rule 9 (increment_argument_counter -> .)
    INT             reduce using rule 9 (increment_argument_counter -> .)
    STRING          reduce using rule 9 (increment_argument_counter -> .)
    TRUE            reduce using rule 9 (increment_argument_counter -> .)
    FALSE           reduce using rule 9 (increment_argument_counter -> .)
    ID              reduce using rule 9 (increment_argument_counter -> .)
    ABSOLUTE        reduce using rule 9 (increment_argument_counter -> .)
    SQRT            reduce using rule 9 (increment_argument_counter -> .)
    TRUNC           reduce using rule 9 (increment_argument_counter -> .)
    SUBSTR          reduce using rule 9 (increment_argument_counter -> .)
    TOLOWER         reduce using rule 9 (increment_argument_counter -> .)
    TOUPPER         reduce using rule 9 (increment_argument_counter -> .)
    AVG             reduce using rule 9 (increment_argument_counter -> .)

    increment_argument_counter     shift and go to state 197

state 182

    (84) arg -> mega_expression check_arg_count_type .

    COMMA           reduce using rule 84 (arg -> mega_expression check_arg_count_type .)
    RPARENT         reduce using rule 84 (arg -> mega_expression check_arg_count_type .)


state 183

    (131) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .

    TIMES           reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    DIVIDE          reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    PLUS            reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    MINUS           reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHAN        reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    SEMICOLON       reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RBRACKET        reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    COMMA           reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RPARENT         reduce using rule 131 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)


state 184

    (132) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .

    TIMES           reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    DIVIDE          reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    PLUS            reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    MINUS           reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHAN        reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    SEMICOLON       reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RBRACKET        reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    COMMA           reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RPARENT         reduce using rule 132 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)


state 185

    (133) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .

    TIMES           reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    DIVIDE          reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    PLUS            reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    MINUS           reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHAN        reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    SEMICOLON       reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RBRACKET        reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    COMMA           reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RPARENT         reduce using rule 133 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)


state 186

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression . COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 198


state 187

    (134) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .

    TIMES           reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    DIVIDE          reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    PLUS            reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    MINUS           reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHAN        reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    SEMICOLON       reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RBRACKET        reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    COMMA           reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RPARENT         reduce using rule 134 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)


state 188

    (135) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .

    TIMES           reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    DIVIDE          reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    PLUS            reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    MINUS           reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHAN        reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    SEMICOLON       reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RBRACKET        reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    COMMA           reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RPARENT         reduce using rule 135 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)


state 189

    (137) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value . RPARENT

    RPARENT         shift and go to state 199


state 190

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list . RBRACE close_current_scope SEMICOLON
    (60) statement_list -> statement_list . statement
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 200
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    RETURN          shift and go to state 213
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    return                         shift and go to state 207
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 191

    (61) statement_list -> empty .

    RBRACE          reduce using rule 61 (statement_list -> empty .)
    VAR             reduce using rule 61 (statement_list -> empty .)
    ID              reduce using rule 61 (statement_list -> empty .)
    IF              reduce using rule 61 (statement_list -> empty .)
    WHILE           reduce using rule 61 (statement_list -> empty .)
    RETURN          reduce using rule 61 (statement_list -> empty .)
    READ            reduce using rule 61 (statement_list -> empty .)
    PRINT           reduce using rule 61 (statement_list -> empty .)


state 192

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (76) params -> . param
    (77) params -> . param COMMA params
    (78) param -> . var_type ID init_param
    (89) var_type -> . FLOAT_TYPE set_current_type
    (90) var_type -> . INT_TYPE set_current_type
    (91) var_type -> . STRING_TYPE set_current_type
    (92) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 215
    param                          shift and go to state 216
    var_type                       shift and go to state 217

state 193

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 218


state 194

    (87) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 87 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 195

    (86) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable . SEMICOLON

    SEMICOLON       shift and go to state 219


state 196

    (79) function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .

    TIMES           reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    DIVIDE          reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    PLUS            reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    MINUS           reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHAN     reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHAN        reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    EQUALEQUAL      reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHANOREQUAL reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHANOREQUAL reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    NOTEQUAL        reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    SEMICOLON       reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RBRACKET        reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    COMMA           reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RPARENT         reduce using rule 79 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)


state 197

    (83) arg_list -> arg COMMA increment_argument_counter . arg_list
    (82) arg_list -> . arg
    (83) arg_list -> . arg COMMA increment_argument_counter arg_list
    (84) arg -> . mega_expression check_arg_count_type
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    arg                            shift and go to state 155
    arg_list                       shift and go to state 220
    mega_expression                shift and go to state 156
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 198

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA . mega_expression substr_quad RPARENT
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    reference                      shift and go to state 48
    mega_expression                shift and go to state 221
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 199

    (137) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .

    TIMES           reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    DIVIDE          reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    PLUS            reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    MINUS           reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHAN        reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    SEMICOLON       reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RBRACKET        reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    COMMA           reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RPARENT         reduce using rule 137 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)


state 200

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 222

state 201

    (60) statement_list -> statement_list statement .

    RBRACE          reduce using rule 60 (statement_list -> statement_list statement .)
    VAR             reduce using rule 60 (statement_list -> statement_list statement .)
    ID              reduce using rule 60 (statement_list -> statement_list statement .)
    IF              reduce using rule 60 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 60 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 60 (statement_list -> statement_list statement .)
    READ            reduce using rule 60 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 60 (statement_list -> statement_list statement .)


state 202

    (62) statement -> declare_var .

    RBRACE          reduce using rule 62 (statement -> declare_var .)
    VAR             reduce using rule 62 (statement -> declare_var .)
    ID              reduce using rule 62 (statement -> declare_var .)
    IF              reduce using rule 62 (statement -> declare_var .)
    WHILE           reduce using rule 62 (statement -> declare_var .)
    RETURN          reduce using rule 62 (statement -> declare_var .)
    READ            reduce using rule 62 (statement -> declare_var .)
    PRINT           reduce using rule 62 (statement -> declare_var .)


state 203

    (63) statement -> assign_statement .

    RBRACE          reduce using rule 63 (statement -> assign_statement .)
    VAR             reduce using rule 63 (statement -> assign_statement .)
    ID              reduce using rule 63 (statement -> assign_statement .)
    IF              reduce using rule 63 (statement -> assign_statement .)
    WHILE           reduce using rule 63 (statement -> assign_statement .)
    RETURN          reduce using rule 63 (statement -> assign_statement .)
    READ            reduce using rule 63 (statement -> assign_statement .)
    PRINT           reduce using rule 63 (statement -> assign_statement .)


state 204

    (64) statement -> function_call .

    RBRACE          reduce using rule 64 (statement -> function_call .)
    VAR             reduce using rule 64 (statement -> function_call .)
    ID              reduce using rule 64 (statement -> function_call .)
    IF              reduce using rule 64 (statement -> function_call .)
    WHILE           reduce using rule 64 (statement -> function_call .)
    RETURN          reduce using rule 64 (statement -> function_call .)
    READ            reduce using rule 64 (statement -> function_call .)
    PRINT           reduce using rule 64 (statement -> function_call .)


state 205

    (65) statement -> if_condition .

    RBRACE          reduce using rule 65 (statement -> if_condition .)
    VAR             reduce using rule 65 (statement -> if_condition .)
    ID              reduce using rule 65 (statement -> if_condition .)
    IF              reduce using rule 65 (statement -> if_condition .)
    WHILE           reduce using rule 65 (statement -> if_condition .)
    RETURN          reduce using rule 65 (statement -> if_condition .)
    READ            reduce using rule 65 (statement -> if_condition .)
    PRINT           reduce using rule 65 (statement -> if_condition .)


state 206

    (66) statement -> while_loop .

    RBRACE          reduce using rule 66 (statement -> while_loop .)
    VAR             reduce using rule 66 (statement -> while_loop .)
    ID              reduce using rule 66 (statement -> while_loop .)
    IF              reduce using rule 66 (statement -> while_loop .)
    WHILE           reduce using rule 66 (statement -> while_loop .)
    RETURN          reduce using rule 66 (statement -> while_loop .)
    READ            reduce using rule 66 (statement -> while_loop .)
    PRINT           reduce using rule 66 (statement -> while_loop .)


state 207

    (67) statement -> return .

    RBRACE          reduce using rule 67 (statement -> return .)
    VAR             reduce using rule 67 (statement -> return .)
    ID              reduce using rule 67 (statement -> return .)
    IF              reduce using rule 67 (statement -> return .)
    WHILE           reduce using rule 67 (statement -> return .)
    RETURN          reduce using rule 67 (statement -> return .)
    READ            reduce using rule 67 (statement -> return .)
    PRINT           reduce using rule 67 (statement -> return .)


state 208

    (68) statement -> read .

    RBRACE          reduce using rule 68 (statement -> read .)
    VAR             reduce using rule 68 (statement -> read .)
    ID              reduce using rule 68 (statement -> read .)
    IF              reduce using rule 68 (statement -> read .)
    WHILE           reduce using rule 68 (statement -> read .)
    RETURN          reduce using rule 68 (statement -> read .)
    READ            reduce using rule 68 (statement -> read .)
    PRINT           reduce using rule 68 (statement -> read .)


state 209

    (69) statement -> print .

    RBRACE          reduce using rule 69 (statement -> print .)
    VAR             reduce using rule 69 (statement -> print .)
    ID              reduce using rule 69 (statement -> print .)
    IF              reduce using rule 69 (statement -> print .)
    WHILE           reduce using rule 69 (statement -> print .)
    RETURN          reduce using rule 69 (statement -> print .)
    READ            reduce using rule 69 (statement -> print .)
    PRINT           reduce using rule 69 (statement -> print .)


state 210

    (80) function_call -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (124) reference -> ID . check_variable_exists add_id_type_to_stack
    (126) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (8) init_func_call -> .
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    LPARENT         reduce using rule 8 (init_func_call -> .)
    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    init_func_call                 shift and go to state 223
    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 211

    (127) if_condition -> IF . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LPARENT         shift and go to state 224


state 212

    (130) while_loop -> WHILE . goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (35) goto_return_position -> .

    LPARENT         reduce using rule 35 (goto_return_position -> .)

    goto_return_position           shift and go to state 225

state 213

    (81) return -> RETURN . mega_expression validate_return SEMICOLON
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 226
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 214

    (141) read -> READ . LPARENT reference read_value RPARENT SEMICOLON

    LPARENT         shift and go to state 227


state 215

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 228


state 216

    (76) params -> param .
    (77) params -> param . COMMA params

    RPARENT         reduce using rule 76 (params -> param .)
    COMMA           shift and go to state 229


state 217

    (78) param -> var_type . ID init_param

    ID              shift and go to state 230


state 218

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (76) params -> . param
    (77) params -> . param COMMA params
    (78) param -> . var_type ID init_param
    (89) var_type -> . FLOAT_TYPE set_current_type
    (90) var_type -> . INT_TYPE set_current_type
    (91) var_type -> . STRING_TYPE set_current_type
    (92) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 231
    param                          shift and go to state 216
    var_type                       shift and go to state 217

state 219

    (86) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .

    VAR             reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ID              reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    MAIN            reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    FUNCTION        reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    PRINT           reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RBRACE          reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    IF              reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    WHILE           reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RETURN          reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    READ            reduce using rule 86 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)


state 220

    (83) arg_list -> arg COMMA increment_argument_counter arg_list .

    RPARENT         reduce using rule 83 (arg_list -> arg COMMA increment_argument_counter arg_list .)


state 221

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression . substr_quad RPARENT
    (42) substr_quad -> .

    RPARENT         reduce using rule 42 (substr_quad -> .)

    substr_quad                    shift and go to state 232

state 222

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 233


state 223

    (80) function_call -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad SEMICOLON

    LPARENT         shift and go to state 234


state 224

    (127) if_condition -> IF LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 235
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 225

    (130) while_loop -> WHILE goto_return_position . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LPARENT         shift and go to state 236


state 226

    (81) return -> RETURN mega_expression . validate_return SEMICOLON
    (12) validate_return -> .

    SEMICOLON       reduce using rule 12 (validate_return -> .)

    validate_return                shift and go to state 237

state 227

    (141) read -> READ LPARENT . reference read_value RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 238
    array_reference                shift and go to state 14

state 228

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 239


state 229

    (77) params -> param COMMA . params
    (76) params -> . param
    (77) params -> . param COMMA params
    (78) param -> . var_type ID init_param
    (89) var_type -> . FLOAT_TYPE set_current_type
    (90) var_type -> . INT_TYPE set_current_type
    (91) var_type -> . STRING_TYPE set_current_type
    (92) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    param                          shift and go to state 216
    params                         shift and go to state 240
    var_type                       shift and go to state 217

state 230

    (78) param -> var_type ID . init_param
    (5) init_param -> .

    COMMA           reduce using rule 5 (init_param -> .)
    RPARENT         reduce using rule 5 (init_param -> .)

    init_param                     shift and go to state 241

state 231

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 242


state 232

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad . RPARENT

    RPARENT         shift and go to state 243


state 233

    (59) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .

    $end            reduce using rule 59 (main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .)


state 234

    (80) function_call -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad SEMICOLON
    (82) arg_list -> . arg
    (83) arg_list -> . arg COMMA increment_argument_counter arg_list
    (84) arg -> . mega_expression check_arg_count_type
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    arg_list                       shift and go to state 244
    arg                            shift and go to state 155
    mega_expression                shift and go to state 156
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 235

    (127) if_condition -> IF LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    RPARENT         shift and go to state 245


state 236

    (130) while_loop -> WHILE goto_return_position LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (99) mega_expression -> . expression
    (100) mega_expression -> . expression relational_operator expression process_relational_operator
    (101) expression -> . term process_plus_minus_operators
    (102) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (103) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (104) term -> . factor process_mult_div_operators
    (105) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (106) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (107) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (108) factor -> . value
    (109) value -> . literal
    (110) value -> . reference
    (111) value -> . function_call_value
    (112) value -> . absolute_call_value
    (113) value -> . sqrt_call_value
    (114) value -> . trunc_call_value
    (115) value -> . substr_call_value
    (116) value -> . to_lower_call_value
    (117) value -> . to_upper_call_value
    (118) value -> . avg_call_value
    (119) literal -> . FLOAT add_float_type_to_stack
    (120) literal -> . INT add_int_type_to_stack
    (121) literal -> . STRING add_string_type_stack
    (122) literal -> . TRUE add_boolean_type_to_stack
    (123) literal -> . FALSE add_boolean_type_to_stack
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (79) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (131) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (132) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (133) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (136) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (134) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (135) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (137) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 64
    INT             shift and go to state 65
    STRING          shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ID              shift and go to state 69
    ABSOLUTE        shift and go to state 70
    SQRT            shift and go to state 71
    TRUNC           shift and go to state 72
    SUBSTR          shift and go to state 73
    TOLOWER         shift and go to state 74
    TOUPPER         shift and go to state 75
    AVG             shift and go to state 76

    mega_expression                shift and go to state 246
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    array_reference                shift and go to state 14

state 237

    (81) return -> RETURN mega_expression validate_return . SEMICOLON

    SEMICOLON       shift and go to state 247


state 238

    (141) read -> READ LPARENT reference . read_value RPARENT SEMICOLON
    (47) read_value -> .

    RPARENT         reduce using rule 47 (read_value -> .)

    read_value                     shift and go to state 248

state 239

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RETURN          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 249

state 240

    (77) params -> param COMMA params .

    RPARENT         reduce using rule 77 (params -> param COMMA params .)


state 241

    (78) param -> var_type ID init_param .

    COMMA           reduce using rule 78 (param -> var_type ID init_param .)
    RPARENT         reduce using rule 78 (param -> var_type ID init_param .)


state 242

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 250


state 243

    (136) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .

    TIMES           reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    DIVIDE          reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    PLUS            reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    MINUS           reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHAN     reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHAN        reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    EQUALEQUAL      reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHANOREQUAL reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHANOREQUAL reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    NOTEQUAL        reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    SEMICOLON       reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RBRACKET        reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    COMMA           reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RPARENT         reduce using rule 136 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)


state 244

    (80) function_call -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad SEMICOLON

    RPARENT         shift and go to state 251


state 245

    (127) if_condition -> IF LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LBRACE          shift and go to state 252


state 246

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    RPARENT         shift and go to state 253


state 247

    (81) return -> RETURN mega_expression validate_return SEMICOLON .

    RBRACE          reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    VAR             reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ID              reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    IF              reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    WHILE           reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    RETURN          reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    READ            reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)
    PRINT           reduce using rule 81 (return -> RETURN mega_expression validate_return SEMICOLON .)


state 248

    (141) read -> READ LPARENT reference read_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 254


state 249

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RETURN          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 255
    empty                          shift and go to state 191

state 250

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RBRACE          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    RETURN          reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 256

state 251

    (80) function_call -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad SEMICOLON
    (11) create_gosub_quad -> .

    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 257

state 252

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 258

state 253

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LBRACE          shift and go to state 259


state 254

    (141) read -> READ LPARENT reference read_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 260


state 255

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . return RBRACE endfunc_quad close_current_scope SEMICOLON
    (60) statement_list -> statement_list . statement
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RETURN          shift and go to state 213
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    return                         shift and go to state 261
    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 256

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 262
    empty                          shift and go to state 191

state 257

    (80) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad . SEMICOLON

    SEMICOLON       shift and go to state 263


state 258

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 264

state 259

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 265

state 260

    (141) read -> READ LPARENT reference read_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    VAR             reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ID              reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    IF              reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    READ            reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 141 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)


state 261

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return . RBRACE endfunc_quad close_current_scope SEMICOLON
    (67) statement -> return .

    RBRACE          shift and go to state 266
    RETURN          reduce using rule 67 (statement -> return .)
    VAR             reduce using rule 67 (statement -> return .)
    ID              reduce using rule 67 (statement -> return .)
    IF              reduce using rule 67 (statement -> return .)
    WHILE           reduce using rule 67 (statement -> return .)
    READ            reduce using rule 67 (statement -> return .)
    PRINT           reduce using rule 67 (statement -> return .)


state 262

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . RBRACE endfunc_quad close_current_scope SEMICOLON
    (60) statement_list -> statement_list . statement
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 267
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    RETURN          shift and go to state 213
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    return                         shift and go to state 207
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 263

    (80) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .

    RBRACE          reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    VAR             reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ID              reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    IF              reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    WHILE           reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    RETURN          reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    READ            reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    PRINT           reduce using rule 80 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)


state 264

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE close_current_scope else_condition goto_end_position
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 268
    empty                          shift and go to state 191

state 265

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 269

state 266

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 270

state 267

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 271

state 268

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE close_current_scope else_condition goto_end_position
    (60) statement_list -> statement_list . statement
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 272
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    RETURN          shift and go to state 213
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    return                         shift and go to state 207
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 269

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE return_end_jump_position close_current_scope
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 273
    empty                          shift and go to state 191

state 270

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 274

state 271

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 275

state 272

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . close_current_scope else_condition goto_end_position
    (2) close_current_scope -> .

    ELSE            reduce using rule 2 (close_current_scope -> .)
    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 276

state 273

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE return_end_jump_position close_current_scope
    (60) statement_list -> statement_list . statement
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 277
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    RETURN          shift and go to state 213
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    return                         shift and go to state 207
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 274

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 278


state 275

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 279


state 276

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope . else_condition goto_end_position
    (128) else_condition -> . ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (129) else_condition -> . empty
    (142) empty -> .

    ELSE            shift and go to state 281
    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    else_condition                 shift and go to state 280
    empty                          shift and go to state 282

state 277

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . return_end_jump_position close_current_scope
    (36) return_end_jump_position -> .

    RBRACE          reduce using rule 36 (return_end_jump_position -> .)
    VAR             reduce using rule 36 (return_end_jump_position -> .)
    ID              reduce using rule 36 (return_end_jump_position -> .)
    IF              reduce using rule 36 (return_end_jump_position -> .)
    WHILE           reduce using rule 36 (return_end_jump_position -> .)
    RETURN          reduce using rule 36 (return_end_jump_position -> .)
    READ            reduce using rule 36 (return_end_jump_position -> .)
    PRINT           reduce using rule 36 (return_end_jump_position -> .)

    return_end_jump_position       shift and go to state 283

state 278

    (70) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 70 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 70 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 70 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 279

    (71) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 71 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 71 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 71 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 280

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition . goto_end_position
    (34) goto_end_position -> .

    RBRACE          reduce using rule 34 (goto_end_position -> .)
    VAR             reduce using rule 34 (goto_end_position -> .)
    ID              reduce using rule 34 (goto_end_position -> .)
    IF              reduce using rule 34 (goto_end_position -> .)
    WHILE           reduce using rule 34 (goto_end_position -> .)
    RETURN          reduce using rule 34 (goto_end_position -> .)
    READ            reduce using rule 34 (goto_end_position -> .)
    PRINT           reduce using rule 34 (goto_end_position -> .)

    goto_end_position              shift and go to state 284

state 281

    (128) else_condition -> ELSE . goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (33) goto_skip_else -> .

    LBRACE          reduce using rule 33 (goto_skip_else -> .)

    goto_skip_else                 shift and go to state 285

state 282

    (129) else_condition -> empty .

    RBRACE          reduce using rule 129 (else_condition -> empty .)
    VAR             reduce using rule 129 (else_condition -> empty .)
    ID              reduce using rule 129 (else_condition -> empty .)
    IF              reduce using rule 129 (else_condition -> empty .)
    WHILE           reduce using rule 129 (else_condition -> empty .)
    RETURN          reduce using rule 129 (else_condition -> empty .)
    READ            reduce using rule 129 (else_condition -> empty .)
    PRINT           reduce using rule 129 (else_condition -> empty .)


state 283

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 286

state 284

    (127) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .

    RBRACE          reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    VAR             reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ID              reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    IF              reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    WHILE           reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    RETURN          reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    READ            reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    PRINT           reduce using rule 127 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)


state 285

    (128) else_condition -> ELSE goto_skip_else . LBRACE new_scope statement_list RBRACE close_current_scope

    LBRACE          shift and go to state 287


state 286

    (130) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .

    RBRACE          reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    VAR             reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ID              reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    IF              reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    WHILE           reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    RETURN          reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    READ            reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    PRINT           reduce using rule 130 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)


state 287

    (128) else_condition -> ELSE goto_skip_else LBRACE . new_scope statement_list RBRACE close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 288

state 288

    (128) else_condition -> ELSE goto_skip_else LBRACE new_scope . statement_list RBRACE close_current_scope
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (142) empty -> .

    RBRACE          reduce using rule 142 (empty -> .)
    VAR             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)

    statement_list                 shift and go to state 289
    empty                          shift and go to state 191

state 289

    (128) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list . RBRACE close_current_scope
    (60) statement_list -> statement_list . statement
    (62) statement -> . declare_var
    (63) statement -> . assign_statement
    (64) statement -> . function_call
    (65) statement -> . if_condition
    (66) statement -> . while_loop
    (67) statement -> . return
    (68) statement -> . read
    (69) statement -> . print
    (85) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (86) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (87) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (88) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (80) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (127) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (130) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (81) return -> . RETURN mega_expression validate_return SEMICOLON
    (141) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (138) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (124) reference -> . ID check_variable_exists add_id_type_to_stack
    (125) reference -> . array_reference
    (126) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 290
    VAR             shift and go to state 12
    ID              shift and go to state 210
    IF              shift and go to state 211
    WHILE           shift and go to state 212
    RETURN          shift and go to state 213
    READ            shift and go to state 214
    PRINT           shift and go to state 34

    statement                      shift and go to state 201
    declare_var                    shift and go to state 202
    assign_statement               shift and go to state 203
    function_call                  shift and go to state 204
    if_condition                   shift and go to state 205
    while_loop                     shift and go to state 206
    return                         shift and go to state 207
    read                           shift and go to state 208
    print                          shift and go to state 209
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 290

    (128) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 291

state 291

    (128) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .

    RBRACE          reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    VAR             reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ID              reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    IF              reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    WHILE           reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    RETURN          reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    READ            reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    PRINT           reduce using rule 128 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)

