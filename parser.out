Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     close_current_scope -> <empty>
Rule 3     set_func_return_type -> <empty>
Rule 4     new_function_scope -> <empty>
Rule 5     init_param -> <empty>
Rule 6     function_start_quad -> <empty>
Rule 7     endfunc_quad -> <empty>
Rule 8     init_func_call -> <empty>
Rule 9     increment_argument_counter -> <empty>
Rule 10    check_arg_count_type -> <empty>
Rule 11    create_gosub_quad -> <empty>
Rule 12    validate_return -> <empty>
Rule 13    add_operator_to_stack -> <empty>
Rule 14    set_current_type -> <empty>
Rule 15    init_variable -> <empty>
Rule 16    check_variable_exists -> <empty>
Rule 17    init_array -> <empty>
Rule 18    init_array_size -> <empty>
Rule 19    init_array_variable -> <empty>
Rule 20    add_id_type_to_stack -> <empty>
Rule 21    add_float_type_to_stack -> <empty>
Rule 22    add_int_type_to_stack -> <empty>
Rule 23    add_string_type_stack -> <empty>
Rule 24    add_boolean_type_to_stack -> <empty>
Rule 25    process_relational_operator -> <empty>
Rule 26    process_plus_minus_operators -> <empty>
Rule 27    process_mult_div_operators -> <empty>
Rule 28    array_name_reference -> <empty>
Rule 29    array_reference_value -> <empty>
Rule 30    add_separator -> <empty>
Rule 31    remove_separator -> <empty>
Rule 32    create_gotof_quad -> <empty>
Rule 33    goto_skip_else -> <empty>
Rule 34    goto_end_position -> <empty>
Rule 35    goto_return_position -> <empty>
Rule 36    return_end_jump_position -> <empty>
Rule 37    goto_main -> <empty>
Rule 38    main_quad -> <empty>
Rule 39    check_absolute_argument_value -> <empty>
Rule 40    check_trunc_argument_value -> <empty>
Rule 41    check_sqrt_argument_value -> <empty>
Rule 42    substr_quad -> <empty>
Rule 43    check_to_lower_argument_value -> <empty>
Rule 44    check_to_upper_argument_value -> <empty>
Rule 45    check_avg_argument_value -> <empty>
Rule 46    check_sort_argument_value -> <empty>
Rule 47    check_find_argument_value -> <empty>
Rule 48    print_value -> <empty>
Rule 49    read_value -> <empty>
Rule 50    end_program -> <empty>
Rule 51    program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program
Rule 52    global_vars -> global_vars global_vars_actions
Rule 53    global_vars -> empty
Rule 54    global_vars_actions -> declare_var
Rule 55    global_vars_actions -> assign_statement
Rule 56    global_declaration -> global_declaration global_statement
Rule 57    global_declaration -> empty
Rule 58    global_statement -> declare_function
Rule 59    global_statement -> declare_function_void
Rule 60    global_statement -> print
Rule 61    main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
Rule 62    statement_list -> statement_list statement
Rule 63    statement_list -> empty
Rule 64    statement -> declare_var
Rule 65    statement -> assign_statement
Rule 66    statement -> function_call
Rule 67    statement -> if_condition
Rule 68    statement -> while_loop
Rule 69    statement -> return
Rule 70    statement -> read
Rule 71    statement -> sort_array
Rule 72    statement -> print
Rule 73    declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 74    declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 75    function_type -> FLOAT_TYPE set_func_return_type
Rule 76    function_type -> INT_TYPE set_func_return_type
Rule 77    function_type -> STRING_TYPE set_func_return_type
Rule 78    function_type -> BOOL_TYPE set_func_return_type
Rule 79    params -> param
Rule 80    params -> param COMMA params
Rule 81    param -> var_type ID init_param
Rule 82    function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
Rule 83    function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
Rule 84    return -> RETURN mega_expression validate_return SEMICOLON
Rule 85    arg_list -> arg
Rule 86    arg_list -> arg COMMA increment_argument_counter arg_list
Rule 87    arg -> mega_expression check_arg_count_type
Rule 88    declare_var -> VAR var_type ID init_variable SEMICOLON
Rule 89    declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
Rule 90    assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 91    assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 92    var_type -> FLOAT_TYPE set_current_type
Rule 93    var_type -> INT_TYPE set_current_type
Rule 94    var_type -> STRING_TYPE set_current_type
Rule 95    var_type -> BOOL_TYPE set_current_type
Rule 96    relational_operator -> GREATERTHAN add_operator_to_stack
Rule 97    relational_operator -> LESSTHAN add_operator_to_stack
Rule 98    relational_operator -> EQUALEQUAL add_operator_to_stack
Rule 99    relational_operator -> LESSTHANOREQUAL add_operator_to_stack
Rule 100   relational_operator -> GREATERTHANOREQUAL add_operator_to_stack
Rule 101   relational_operator -> NOTEQUAL add_operator_to_stack
Rule 102   mega_expression -> expression
Rule 103   mega_expression -> expression relational_operator expression process_relational_operator
Rule 104   expression -> term process_plus_minus_operators
Rule 105   expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression
Rule 106   expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression
Rule 107   term -> factor process_mult_div_operators
Rule 108   term -> factor process_mult_div_operators TIMES add_operator_to_stack term
Rule 109   term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term
Rule 110   factor -> LPARENT add_separator mega_expression RPARENT remove_separator
Rule 111   factor -> value
Rule 112   value -> literal
Rule 113   value -> reference
Rule 114   value -> function_call_value
Rule 115   value -> absolute_call_value
Rule 116   value -> sqrt_call_value
Rule 117   value -> trunc_call_value
Rule 118   value -> substr_call_value
Rule 119   value -> to_lower_call_value
Rule 120   value -> to_upper_call_value
Rule 121   value -> avg_call_value
Rule 122   value -> find_array_value
Rule 123   literal -> FLOAT add_float_type_to_stack
Rule 124   literal -> INT add_int_type_to_stack
Rule 125   literal -> STRING add_string_type_stack
Rule 126   literal -> TRUE add_boolean_type_to_stack
Rule 127   literal -> FALSE add_boolean_type_to_stack
Rule 128   reference -> ID check_variable_exists add_id_type_to_stack
Rule 129   reference -> array_reference
Rule 130   array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
Rule 131   if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
Rule 132   else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
Rule 133   else_condition -> empty
Rule 134   while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
Rule 135   absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
Rule 136   sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
Rule 137   trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
Rule 138   to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
Rule 139   to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
Rule 140   substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
Rule 141   avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
Rule 142   sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
Rule 143   sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
Rule 144   find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
Rule 145   print -> PRINT LPARENT print_many RPARENT SEMICOLON
Rule 146   print_many -> mega_expression print_value
Rule 147   print_many -> mega_expression print_value COMMA print_many
Rule 148   read -> READ LPARENT reference read_value RPARENT SEMICOLON
Rule 149   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 135
AVG                  : 141
BOOL_TYPE            : 78 95
COMMA                : 80 86 140 140 142 143 144 147
DIVIDE               : 109
ELSE                 : 132
EQUAL                : 90 91
EQUALEQUAL           : 98
FALSE                : 127
FIND                 : 144
FLOAT                : 123
FLOAT_TYPE           : 75 92
FUNCTION             : 73 74
GREATERTHAN          : 73 74 96 143
GREATERTHANOREQUAL   : 100
ID                   : 51 73 74 81 82 83 88 89 90 128 130 141 142 143 144
IF                   : 131
INT                  : 89 124
INT_TYPE             : 76 93
LBRACE               : 61 73 74 131 132 134
LBRACKET             : 89 130
LESSTHAN             : 73 74 97 142
LESSTHANOREQUAL      : 99
LPARENT              : 61 73 74 82 83 110 131 134 135 136 137 138 139 140 141 142 143 144 145 148
MAIN                 : 61
MINUS                : 106
NOTEQUAL             : 101
PLUS                 : 105
PRINT                : 145
PROGRAM              : 51
RBRACE               : 61 73 74 131 132 134
RBRACKET             : 89 130
READ                 : 148
RETURN               : 84
RPARENT              : 61 73 74 82 83 110 131 134 135 136 137 138 139 140 141 142 143 144 145 148
SEMICOLON            : 51 61 73 74 83 84 88 89 90 91 142 143 145 148
SORT                 : 142 143
SQRT                 : 136
STRING               : 125
STRING_TYPE          : 77 94
SUBSTR               : 140
TIMES                : 108
TOLOWER              : 138
TOUPPER              : 139
TRUE                 : 126
TRUNC                : 137
VAR                  : 88 89 90
VOID_TYPE            : 74
WHILE                : 134
error                : 

Nonterminals, with rules where they appear

absolute_call_value  : 115
add_boolean_type_to_stack : 126 127
add_float_type_to_stack : 123
add_id_type_to_stack : 90 128 141 142 143 144
add_int_type_to_stack : 124
add_operator_to_stack : 90 91 96 97 98 99 100 101 105 106 108 109 142 143
add_separator        : 110 130
add_string_type_stack : 125
arg                  : 85 86
arg_list             : 82 83 86
array_name_reference : 130
array_reference      : 129
array_reference_value : 130
assign_statement     : 55 65
avg_call_value       : 121
check_absolute_argument_value : 135
check_arg_count_type : 87
check_avg_argument_value : 141
check_find_argument_value : 144
check_sort_argument_value : 142 143
check_sqrt_argument_value : 136
check_to_lower_argument_value : 138
check_to_upper_argument_value : 139
check_trunc_argument_value : 137
check_variable_exists : 128
close_current_scope  : 61 73 74 131 132 134
create_gosub_quad    : 82 83
create_gotof_quad    : 131 134
declare_function     : 58
declare_function_void : 59
declare_var          : 54 64
else_condition       : 131
empty                : 53 57 63 133
end_program          : 51
endfunc_quad         : 73 74
expression           : 102 103 103 105 106
factor               : 107 108 109
find_array_value     : 122
function_call        : 66
function_call_value  : 114
function_start_quad  : 73 74
function_type        : 73
global_declaration   : 51 56
global_statement     : 56
global_vars          : 51 52
global_vars_actions  : 52
goto_end_position    : 131
goto_main            : 51
goto_return_position : 134
goto_skip_else       : 132
if_condition         : 67
increment_argument_counter : 86
init_array           : 89
init_array_size      : 89
init_array_variable  : 89
init_func_call       : 82 83
init_param           : 81
init_variable        : 88 90
literal              : 112
main_declaration     : 51
main_quad            : 61
mega_expression      : 84 87 90 91 110 130 131 134 135 136 137 138 139 140 140 144 146 147
new_function_scope   : 73 74
new_scope            : 61 131 132 134
param                : 79 80
params               : 73 74 80
print                : 60 72
print_many           : 145 147
print_value          : 146 147
process_mult_div_operators : 107 108 109
process_plus_minus_operators : 104 105 106
process_relational_operator : 103
program              : 0
read                 : 70
read_value           : 148
reference            : 91 113 140 148
relational_operator  : 103
remove_separator     : 110 130
return               : 69 73
return_end_jump_position : 134
set_current_type     : 92 93 94 95
set_func_return_type : 74 75 76 77 78
sort_array           : 71
sqrt_call_value      : 116
statement            : 62
statement_list       : 61 62 73 74 131 132 134
substr_call_value    : 118
substr_quad          : 140
term                 : 104 105 106 108 109
to_lower_call_value  : 119
to_upper_call_value  : 120
trunc_call_value     : 117
validate_return      : 84
value                : 111
var_type             : 81 88 89 90
while_loop           : 68

Parsing method: LALR

state 0

    (0) S' -> . program
    (51) program -> . PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (51) program -> PROGRAM . ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    ID              shift and go to state 3


state 3

    (51) program -> PROGRAM ID . SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    SEMICOLON       shift and go to state 4


state 4

    (51) program -> PROGRAM ID SEMICOLON . global_vars goto_main global_declaration main_declaration end_program
    (52) global_vars -> . global_vars global_vars_actions
    (53) global_vars -> . empty
    (149) empty -> .

    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    MAIN            reduce using rule 149 (empty -> .)
    FUNCTION        reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    global_vars                    shift and go to state 5
    empty                          shift and go to state 6

state 5

    (51) program -> PROGRAM ID SEMICOLON global_vars . goto_main global_declaration main_declaration end_program
    (52) global_vars -> global_vars . global_vars_actions
    (37) goto_main -> .
    (54) global_vars_actions -> . declare_var
    (55) global_vars_actions -> . assign_statement
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    MAIN            reduce using rule 37 (goto_main -> .)
    FUNCTION        reduce using rule 37 (goto_main -> .)
    PRINT           reduce using rule 37 (goto_main -> .)
    VAR             shift and go to state 12
    ID              shift and go to state 7

    goto_main                      shift and go to state 8
    global_vars_actions            shift and go to state 9
    declare_var                    shift and go to state 10
    assign_statement               shift and go to state 11
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 6

    (53) global_vars -> empty .

    VAR             reduce using rule 53 (global_vars -> empty .)
    ID              reduce using rule 53 (global_vars -> empty .)
    MAIN            reduce using rule 53 (global_vars -> empty .)
    FUNCTION        reduce using rule 53 (global_vars -> empty .)
    PRINT           reduce using rule 53 (global_vars -> empty .)


state 7

    (128) reference -> ID . check_variable_exists add_id_type_to_stack
    (130) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 8

    (51) program -> PROGRAM ID SEMICOLON global_vars goto_main . global_declaration main_declaration end_program
    (56) global_declaration -> . global_declaration global_statement
    (57) global_declaration -> . empty
    (149) empty -> .

    MAIN            reduce using rule 149 (empty -> .)
    FUNCTION        reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    global_declaration             shift and go to state 17
    empty                          shift and go to state 18

state 9

    (52) global_vars -> global_vars global_vars_actions .

    VAR             reduce using rule 52 (global_vars -> global_vars global_vars_actions .)
    ID              reduce using rule 52 (global_vars -> global_vars global_vars_actions .)
    MAIN            reduce using rule 52 (global_vars -> global_vars global_vars_actions .)
    FUNCTION        reduce using rule 52 (global_vars -> global_vars global_vars_actions .)
    PRINT           reduce using rule 52 (global_vars -> global_vars global_vars_actions .)


state 10

    (54) global_vars_actions -> declare_var .

    VAR             reduce using rule 54 (global_vars_actions -> declare_var .)
    ID              reduce using rule 54 (global_vars_actions -> declare_var .)
    MAIN            reduce using rule 54 (global_vars_actions -> declare_var .)
    FUNCTION        reduce using rule 54 (global_vars_actions -> declare_var .)
    PRINT           reduce using rule 54 (global_vars_actions -> declare_var .)


state 11

    (55) global_vars_actions -> assign_statement .

    VAR             reduce using rule 55 (global_vars_actions -> assign_statement .)
    ID              reduce using rule 55 (global_vars_actions -> assign_statement .)
    MAIN            reduce using rule 55 (global_vars_actions -> assign_statement .)
    FUNCTION        reduce using rule 55 (global_vars_actions -> assign_statement .)
    PRINT           reduce using rule 55 (global_vars_actions -> assign_statement .)


state 12

    (88) declare_var -> VAR . var_type ID init_variable SEMICOLON
    (89) declare_var -> VAR . var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> VAR . var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (92) var_type -> . FLOAT_TYPE set_current_type
    (93) var_type -> . INT_TYPE set_current_type
    (94) var_type -> . STRING_TYPE set_current_type
    (95) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    var_type                       shift and go to state 19

state 13

    (91) assign_statement -> reference . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 24


state 14

    (129) reference -> array_reference .

    EQUAL           reduce using rule 129 (reference -> array_reference .)
    TIMES           reduce using rule 129 (reference -> array_reference .)
    DIVIDE          reduce using rule 129 (reference -> array_reference .)
    PLUS            reduce using rule 129 (reference -> array_reference .)
    MINUS           reduce using rule 129 (reference -> array_reference .)
    GREATERTHAN     reduce using rule 129 (reference -> array_reference .)
    LESSTHAN        reduce using rule 129 (reference -> array_reference .)
    EQUALEQUAL      reduce using rule 129 (reference -> array_reference .)
    LESSTHANOREQUAL reduce using rule 129 (reference -> array_reference .)
    GREATERTHANOREQUAL reduce using rule 129 (reference -> array_reference .)
    NOTEQUAL        reduce using rule 129 (reference -> array_reference .)
    SEMICOLON       reduce using rule 129 (reference -> array_reference .)
    RBRACKET        reduce using rule 129 (reference -> array_reference .)
    COMMA           reduce using rule 129 (reference -> array_reference .)
    RPARENT         reduce using rule 129 (reference -> array_reference .)


state 15

    (128) reference -> ID check_variable_exists . add_id_type_to_stack
    (20) add_id_type_to_stack -> .

    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)
    TIMES           reduce using rule 20 (add_id_type_to_stack -> .)
    DIVIDE          reduce using rule 20 (add_id_type_to_stack -> .)
    PLUS            reduce using rule 20 (add_id_type_to_stack -> .)
    MINUS           reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHAN     reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHAN        reduce using rule 20 (add_id_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    NOTEQUAL        reduce using rule 20 (add_id_type_to_stack -> .)
    SEMICOLON       reduce using rule 20 (add_id_type_to_stack -> .)
    RBRACKET        reduce using rule 20 (add_id_type_to_stack -> .)
    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)
    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 25

state 16

    (130) array_reference -> ID array_name_reference . LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LBRACKET        shift and go to state 26


state 17

    (51) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration . main_declaration end_program
    (56) global_declaration -> global_declaration . global_statement
    (61) main_declaration -> . MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (58) global_statement -> . declare_function
    (59) global_statement -> . declare_function_void
    (60) global_statement -> . print
    (73) declare_function -> . FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (74) declare_function_void -> . FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON

    MAIN            shift and go to state 29
    FUNCTION        shift and go to state 33
    PRINT           shift and go to state 34

    main_declaration               shift and go to state 27
    global_statement               shift and go to state 28
    declare_function               shift and go to state 30
    declare_function_void          shift and go to state 31
    print                          shift and go to state 32

state 18

    (57) global_declaration -> empty .

    MAIN            reduce using rule 57 (global_declaration -> empty .)
    FUNCTION        reduce using rule 57 (global_declaration -> empty .)
    PRINT           reduce using rule 57 (global_declaration -> empty .)


state 19

    (88) declare_var -> VAR var_type . ID init_variable SEMICOLON
    (89) declare_var -> VAR var_type . ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> VAR var_type . ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON

    ID              shift and go to state 35


state 20

    (92) var_type -> FLOAT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 36

state 21

    (93) var_type -> INT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 37

state 22

    (94) var_type -> STRING_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 38

state 23

    (95) var_type -> BOOL_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 39

state 24

    (91) assign_statement -> reference EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 40

state 25

    (128) reference -> ID check_variable_exists add_id_type_to_stack .

    EQUAL           reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    TIMES           reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    DIVIDE          reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    PLUS            reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    MINUS           reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHAN     reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHAN        reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    EQUALEQUAL      reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    NOTEQUAL        reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    SEMICOLON       reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RBRACKET        reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    COMMA           reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RPARENT         reduce using rule 128 (reference -> ID check_variable_exists add_id_type_to_stack .)


state 26

    (130) array_reference -> ID array_name_reference LBRACKET . add_separator mega_expression RBRACKET remove_separator array_reference_value
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)
    FIND            reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 41

state 27

    (51) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration . end_program
    (50) end_program -> .

    $end            reduce using rule 50 (end_program -> .)

    end_program                    shift and go to state 42

state 28

    (56) global_declaration -> global_declaration global_statement .

    MAIN            reduce using rule 56 (global_declaration -> global_declaration global_statement .)
    FUNCTION        reduce using rule 56 (global_declaration -> global_declaration global_statement .)
    PRINT           reduce using rule 56 (global_declaration -> global_declaration global_statement .)


state 29

    (61) main_declaration -> MAIN . main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (38) main_quad -> .

    LPARENT         reduce using rule 38 (main_quad -> .)

    main_quad                      shift and go to state 43

state 30

    (58) global_statement -> declare_function .

    MAIN            reduce using rule 58 (global_statement -> declare_function .)
    FUNCTION        reduce using rule 58 (global_statement -> declare_function .)
    PRINT           reduce using rule 58 (global_statement -> declare_function .)


state 31

    (59) global_statement -> declare_function_void .

    MAIN            reduce using rule 59 (global_statement -> declare_function_void .)
    FUNCTION        reduce using rule 59 (global_statement -> declare_function_void .)
    PRINT           reduce using rule 59 (global_statement -> declare_function_void .)


state 32

    (60) global_statement -> print .

    MAIN            reduce using rule 60 (global_statement -> print .)
    FUNCTION        reduce using rule 60 (global_statement -> print .)
    PRINT           reduce using rule 60 (global_statement -> print .)


state 33

    (73) declare_function -> FUNCTION . ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (74) declare_function_void -> FUNCTION . ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    ID              shift and go to state 44


state 34

    (145) print -> PRINT . LPARENT print_many RPARENT SEMICOLON

    LPARENT         shift and go to state 45


state 35

    (88) declare_var -> VAR var_type ID . init_variable SEMICOLON
    (89) declare_var -> VAR var_type ID . init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> VAR var_type ID . init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (15) init_variable -> .
    (17) init_array -> .

    SEMICOLON       reduce using rule 15 (init_variable -> .)
    EQUAL           reduce using rule 15 (init_variable -> .)
    LBRACKET        reduce using rule 17 (init_array -> .)

    init_variable                  shift and go to state 46
    init_array                     shift and go to state 47

state 36

    (92) var_type -> FLOAT_TYPE set_current_type .

    ID              reduce using rule 92 (var_type -> FLOAT_TYPE set_current_type .)


state 37

    (93) var_type -> INT_TYPE set_current_type .

    ID              reduce using rule 93 (var_type -> INT_TYPE set_current_type .)


state 38

    (94) var_type -> STRING_TYPE set_current_type .

    ID              reduce using rule 94 (var_type -> STRING_TYPE set_current_type .)


state 39

    (95) var_type -> BOOL_TYPE set_current_type .

    ID              reduce using rule 95 (var_type -> BOOL_TYPE set_current_type .)


state 40

    (91) assign_statement -> reference EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    reference                      shift and go to state 48
    mega_expression                shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 41

    (130) array_reference -> ID array_name_reference LBRACKET add_separator . mega_expression RBRACKET remove_separator array_reference_value
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 79
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 42

    (51) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .

    $end            reduce using rule 51 (program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .)


state 43

    (61) main_declaration -> MAIN main_quad . LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LPARENT         shift and go to state 80


state 44

    (73) declare_function -> FUNCTION ID . new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (74) declare_function_void -> FUNCTION ID . new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (4) new_function_scope -> .

    LESSTHAN        reduce using rule 4 (new_function_scope -> .)

    new_function_scope             shift and go to state 81

state 45

    (145) print -> PRINT LPARENT . print_many RPARENT SEMICOLON
    (146) print_many -> . mega_expression print_value
    (147) print_many -> . mega_expression print_value COMMA print_many
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    print_many                     shift and go to state 82
    mega_expression                shift and go to state 83
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 46

    (88) declare_var -> VAR var_type ID init_variable . SEMICOLON
    (90) assign_statement -> VAR var_type ID init_variable . add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (20) add_id_type_to_stack -> .

    SEMICOLON       shift and go to state 84
    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 85

state 47

    (89) declare_var -> VAR var_type ID init_array . LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON

    LBRACKET        shift and go to state 86


state 48

    (113) value -> reference .

    TIMES           reduce using rule 113 (value -> reference .)
    DIVIDE          reduce using rule 113 (value -> reference .)
    PLUS            reduce using rule 113 (value -> reference .)
    MINUS           reduce using rule 113 (value -> reference .)
    GREATERTHAN     reduce using rule 113 (value -> reference .)
    LESSTHAN        reduce using rule 113 (value -> reference .)
    EQUALEQUAL      reduce using rule 113 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 113 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 113 (value -> reference .)
    NOTEQUAL        reduce using rule 113 (value -> reference .)
    SEMICOLON       reduce using rule 113 (value -> reference .)
    RBRACKET        reduce using rule 113 (value -> reference .)
    COMMA           reduce using rule 113 (value -> reference .)
    RPARENT         reduce using rule 113 (value -> reference .)


state 49

    (91) assign_statement -> reference EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 87


state 50

    (102) mega_expression -> expression .
    (103) mega_expression -> expression . relational_operator expression process_relational_operator
    (96) relational_operator -> . GREATERTHAN add_operator_to_stack
    (97) relational_operator -> . LESSTHAN add_operator_to_stack
    (98) relational_operator -> . EQUALEQUAL add_operator_to_stack
    (99) relational_operator -> . LESSTHANOREQUAL add_operator_to_stack
    (100) relational_operator -> . GREATERTHANOREQUAL add_operator_to_stack
    (101) relational_operator -> . NOTEQUAL add_operator_to_stack

    SEMICOLON       reduce using rule 102 (mega_expression -> expression .)
    RBRACKET        reduce using rule 102 (mega_expression -> expression .)
    COMMA           reduce using rule 102 (mega_expression -> expression .)
    RPARENT         reduce using rule 102 (mega_expression -> expression .)
    GREATERTHAN     shift and go to state 89
    LESSTHAN        shift and go to state 90
    EQUALEQUAL      shift and go to state 91
    LESSTHANOREQUAL shift and go to state 92
    GREATERTHANOREQUAL shift and go to state 93
    NOTEQUAL        shift and go to state 94

    relational_operator            shift and go to state 88

state 51

    (104) expression -> term . process_plus_minus_operators
    (105) expression -> term . process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> term . process_plus_minus_operators MINUS add_operator_to_stack expression
    (26) process_plus_minus_operators -> .

    PLUS            reduce using rule 26 (process_plus_minus_operators -> .)
    MINUS           reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHAN     reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHAN        reduce using rule 26 (process_plus_minus_operators -> .)
    EQUALEQUAL      reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    NOTEQUAL        reduce using rule 26 (process_plus_minus_operators -> .)
    SEMICOLON       reduce using rule 26 (process_plus_minus_operators -> .)
    RBRACKET        reduce using rule 26 (process_plus_minus_operators -> .)
    COMMA           reduce using rule 26 (process_plus_minus_operators -> .)
    RPARENT         reduce using rule 26 (process_plus_minus_operators -> .)

    process_plus_minus_operators   shift and go to state 95

state 52

    (107) term -> factor . process_mult_div_operators
    (108) term -> factor . process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> factor . process_mult_div_operators DIVIDE add_operator_to_stack term
    (27) process_mult_div_operators -> .

    TIMES           reduce using rule 27 (process_mult_div_operators -> .)
    DIVIDE          reduce using rule 27 (process_mult_div_operators -> .)
    PLUS            reduce using rule 27 (process_mult_div_operators -> .)
    MINUS           reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHAN     reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHAN        reduce using rule 27 (process_mult_div_operators -> .)
    EQUALEQUAL      reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    NOTEQUAL        reduce using rule 27 (process_mult_div_operators -> .)
    SEMICOLON       reduce using rule 27 (process_mult_div_operators -> .)
    RBRACKET        reduce using rule 27 (process_mult_div_operators -> .)
    COMMA           reduce using rule 27 (process_mult_div_operators -> .)
    RPARENT         reduce using rule 27 (process_mult_div_operators -> .)

    process_mult_div_operators     shift and go to state 96

state 53

    (110) factor -> LPARENT . add_separator mega_expression RPARENT remove_separator
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)
    FIND            reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 97

state 54

    (111) factor -> value .

    TIMES           reduce using rule 111 (factor -> value .)
    DIVIDE          reduce using rule 111 (factor -> value .)
    PLUS            reduce using rule 111 (factor -> value .)
    MINUS           reduce using rule 111 (factor -> value .)
    GREATERTHAN     reduce using rule 111 (factor -> value .)
    LESSTHAN        reduce using rule 111 (factor -> value .)
    EQUALEQUAL      reduce using rule 111 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 111 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 111 (factor -> value .)
    NOTEQUAL        reduce using rule 111 (factor -> value .)
    SEMICOLON       reduce using rule 111 (factor -> value .)
    RBRACKET        reduce using rule 111 (factor -> value .)
    COMMA           reduce using rule 111 (factor -> value .)
    RPARENT         reduce using rule 111 (factor -> value .)


state 55

    (112) value -> literal .

    TIMES           reduce using rule 112 (value -> literal .)
    DIVIDE          reduce using rule 112 (value -> literal .)
    PLUS            reduce using rule 112 (value -> literal .)
    MINUS           reduce using rule 112 (value -> literal .)
    GREATERTHAN     reduce using rule 112 (value -> literal .)
    LESSTHAN        reduce using rule 112 (value -> literal .)
    EQUALEQUAL      reduce using rule 112 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 112 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 112 (value -> literal .)
    NOTEQUAL        reduce using rule 112 (value -> literal .)
    SEMICOLON       reduce using rule 112 (value -> literal .)
    RBRACKET        reduce using rule 112 (value -> literal .)
    COMMA           reduce using rule 112 (value -> literal .)
    RPARENT         reduce using rule 112 (value -> literal .)


state 56

    (114) value -> function_call_value .

    TIMES           reduce using rule 114 (value -> function_call_value .)
    DIVIDE          reduce using rule 114 (value -> function_call_value .)
    PLUS            reduce using rule 114 (value -> function_call_value .)
    MINUS           reduce using rule 114 (value -> function_call_value .)
    GREATERTHAN     reduce using rule 114 (value -> function_call_value .)
    LESSTHAN        reduce using rule 114 (value -> function_call_value .)
    EQUALEQUAL      reduce using rule 114 (value -> function_call_value .)
    LESSTHANOREQUAL reduce using rule 114 (value -> function_call_value .)
    GREATERTHANOREQUAL reduce using rule 114 (value -> function_call_value .)
    NOTEQUAL        reduce using rule 114 (value -> function_call_value .)
    SEMICOLON       reduce using rule 114 (value -> function_call_value .)
    RBRACKET        reduce using rule 114 (value -> function_call_value .)
    COMMA           reduce using rule 114 (value -> function_call_value .)
    RPARENT         reduce using rule 114 (value -> function_call_value .)


state 57

    (115) value -> absolute_call_value .

    TIMES           reduce using rule 115 (value -> absolute_call_value .)
    DIVIDE          reduce using rule 115 (value -> absolute_call_value .)
    PLUS            reduce using rule 115 (value -> absolute_call_value .)
    MINUS           reduce using rule 115 (value -> absolute_call_value .)
    GREATERTHAN     reduce using rule 115 (value -> absolute_call_value .)
    LESSTHAN        reduce using rule 115 (value -> absolute_call_value .)
    EQUALEQUAL      reduce using rule 115 (value -> absolute_call_value .)
    LESSTHANOREQUAL reduce using rule 115 (value -> absolute_call_value .)
    GREATERTHANOREQUAL reduce using rule 115 (value -> absolute_call_value .)
    NOTEQUAL        reduce using rule 115 (value -> absolute_call_value .)
    SEMICOLON       reduce using rule 115 (value -> absolute_call_value .)
    RBRACKET        reduce using rule 115 (value -> absolute_call_value .)
    COMMA           reduce using rule 115 (value -> absolute_call_value .)
    RPARENT         reduce using rule 115 (value -> absolute_call_value .)


state 58

    (116) value -> sqrt_call_value .

    TIMES           reduce using rule 116 (value -> sqrt_call_value .)
    DIVIDE          reduce using rule 116 (value -> sqrt_call_value .)
    PLUS            reduce using rule 116 (value -> sqrt_call_value .)
    MINUS           reduce using rule 116 (value -> sqrt_call_value .)
    GREATERTHAN     reduce using rule 116 (value -> sqrt_call_value .)
    LESSTHAN        reduce using rule 116 (value -> sqrt_call_value .)
    EQUALEQUAL      reduce using rule 116 (value -> sqrt_call_value .)
    LESSTHANOREQUAL reduce using rule 116 (value -> sqrt_call_value .)
    GREATERTHANOREQUAL reduce using rule 116 (value -> sqrt_call_value .)
    NOTEQUAL        reduce using rule 116 (value -> sqrt_call_value .)
    SEMICOLON       reduce using rule 116 (value -> sqrt_call_value .)
    RBRACKET        reduce using rule 116 (value -> sqrt_call_value .)
    COMMA           reduce using rule 116 (value -> sqrt_call_value .)
    RPARENT         reduce using rule 116 (value -> sqrt_call_value .)


state 59

    (117) value -> trunc_call_value .

    TIMES           reduce using rule 117 (value -> trunc_call_value .)
    DIVIDE          reduce using rule 117 (value -> trunc_call_value .)
    PLUS            reduce using rule 117 (value -> trunc_call_value .)
    MINUS           reduce using rule 117 (value -> trunc_call_value .)
    GREATERTHAN     reduce using rule 117 (value -> trunc_call_value .)
    LESSTHAN        reduce using rule 117 (value -> trunc_call_value .)
    EQUALEQUAL      reduce using rule 117 (value -> trunc_call_value .)
    LESSTHANOREQUAL reduce using rule 117 (value -> trunc_call_value .)
    GREATERTHANOREQUAL reduce using rule 117 (value -> trunc_call_value .)
    NOTEQUAL        reduce using rule 117 (value -> trunc_call_value .)
    SEMICOLON       reduce using rule 117 (value -> trunc_call_value .)
    RBRACKET        reduce using rule 117 (value -> trunc_call_value .)
    COMMA           reduce using rule 117 (value -> trunc_call_value .)
    RPARENT         reduce using rule 117 (value -> trunc_call_value .)


state 60

    (118) value -> substr_call_value .

    TIMES           reduce using rule 118 (value -> substr_call_value .)
    DIVIDE          reduce using rule 118 (value -> substr_call_value .)
    PLUS            reduce using rule 118 (value -> substr_call_value .)
    MINUS           reduce using rule 118 (value -> substr_call_value .)
    GREATERTHAN     reduce using rule 118 (value -> substr_call_value .)
    LESSTHAN        reduce using rule 118 (value -> substr_call_value .)
    EQUALEQUAL      reduce using rule 118 (value -> substr_call_value .)
    LESSTHANOREQUAL reduce using rule 118 (value -> substr_call_value .)
    GREATERTHANOREQUAL reduce using rule 118 (value -> substr_call_value .)
    NOTEQUAL        reduce using rule 118 (value -> substr_call_value .)
    SEMICOLON       reduce using rule 118 (value -> substr_call_value .)
    RBRACKET        reduce using rule 118 (value -> substr_call_value .)
    COMMA           reduce using rule 118 (value -> substr_call_value .)
    RPARENT         reduce using rule 118 (value -> substr_call_value .)


state 61

    (119) value -> to_lower_call_value .

    TIMES           reduce using rule 119 (value -> to_lower_call_value .)
    DIVIDE          reduce using rule 119 (value -> to_lower_call_value .)
    PLUS            reduce using rule 119 (value -> to_lower_call_value .)
    MINUS           reduce using rule 119 (value -> to_lower_call_value .)
    GREATERTHAN     reduce using rule 119 (value -> to_lower_call_value .)
    LESSTHAN        reduce using rule 119 (value -> to_lower_call_value .)
    EQUALEQUAL      reduce using rule 119 (value -> to_lower_call_value .)
    LESSTHANOREQUAL reduce using rule 119 (value -> to_lower_call_value .)
    GREATERTHANOREQUAL reduce using rule 119 (value -> to_lower_call_value .)
    NOTEQUAL        reduce using rule 119 (value -> to_lower_call_value .)
    SEMICOLON       reduce using rule 119 (value -> to_lower_call_value .)
    RBRACKET        reduce using rule 119 (value -> to_lower_call_value .)
    COMMA           reduce using rule 119 (value -> to_lower_call_value .)
    RPARENT         reduce using rule 119 (value -> to_lower_call_value .)


state 62

    (120) value -> to_upper_call_value .

    TIMES           reduce using rule 120 (value -> to_upper_call_value .)
    DIVIDE          reduce using rule 120 (value -> to_upper_call_value .)
    PLUS            reduce using rule 120 (value -> to_upper_call_value .)
    MINUS           reduce using rule 120 (value -> to_upper_call_value .)
    GREATERTHAN     reduce using rule 120 (value -> to_upper_call_value .)
    LESSTHAN        reduce using rule 120 (value -> to_upper_call_value .)
    EQUALEQUAL      reduce using rule 120 (value -> to_upper_call_value .)
    LESSTHANOREQUAL reduce using rule 120 (value -> to_upper_call_value .)
    GREATERTHANOREQUAL reduce using rule 120 (value -> to_upper_call_value .)
    NOTEQUAL        reduce using rule 120 (value -> to_upper_call_value .)
    SEMICOLON       reduce using rule 120 (value -> to_upper_call_value .)
    RBRACKET        reduce using rule 120 (value -> to_upper_call_value .)
    COMMA           reduce using rule 120 (value -> to_upper_call_value .)
    RPARENT         reduce using rule 120 (value -> to_upper_call_value .)


state 63

    (121) value -> avg_call_value .

    TIMES           reduce using rule 121 (value -> avg_call_value .)
    DIVIDE          reduce using rule 121 (value -> avg_call_value .)
    PLUS            reduce using rule 121 (value -> avg_call_value .)
    MINUS           reduce using rule 121 (value -> avg_call_value .)
    GREATERTHAN     reduce using rule 121 (value -> avg_call_value .)
    LESSTHAN        reduce using rule 121 (value -> avg_call_value .)
    EQUALEQUAL      reduce using rule 121 (value -> avg_call_value .)
    LESSTHANOREQUAL reduce using rule 121 (value -> avg_call_value .)
    GREATERTHANOREQUAL reduce using rule 121 (value -> avg_call_value .)
    NOTEQUAL        reduce using rule 121 (value -> avg_call_value .)
    SEMICOLON       reduce using rule 121 (value -> avg_call_value .)
    RBRACKET        reduce using rule 121 (value -> avg_call_value .)
    COMMA           reduce using rule 121 (value -> avg_call_value .)
    RPARENT         reduce using rule 121 (value -> avg_call_value .)


state 64

    (122) value -> find_array_value .

    TIMES           reduce using rule 122 (value -> find_array_value .)
    DIVIDE          reduce using rule 122 (value -> find_array_value .)
    PLUS            reduce using rule 122 (value -> find_array_value .)
    MINUS           reduce using rule 122 (value -> find_array_value .)
    GREATERTHAN     reduce using rule 122 (value -> find_array_value .)
    LESSTHAN        reduce using rule 122 (value -> find_array_value .)
    EQUALEQUAL      reduce using rule 122 (value -> find_array_value .)
    LESSTHANOREQUAL reduce using rule 122 (value -> find_array_value .)
    GREATERTHANOREQUAL reduce using rule 122 (value -> find_array_value .)
    NOTEQUAL        reduce using rule 122 (value -> find_array_value .)
    SEMICOLON       reduce using rule 122 (value -> find_array_value .)
    RBRACKET        reduce using rule 122 (value -> find_array_value .)
    COMMA           reduce using rule 122 (value -> find_array_value .)
    RPARENT         reduce using rule 122 (value -> find_array_value .)


state 65

    (123) literal -> FLOAT . add_float_type_to_stack
    (21) add_float_type_to_stack -> .

    TIMES           reduce using rule 21 (add_float_type_to_stack -> .)
    DIVIDE          reduce using rule 21 (add_float_type_to_stack -> .)
    PLUS            reduce using rule 21 (add_float_type_to_stack -> .)
    MINUS           reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHAN     reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHAN        reduce using rule 21 (add_float_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    NOTEQUAL        reduce using rule 21 (add_float_type_to_stack -> .)
    SEMICOLON       reduce using rule 21 (add_float_type_to_stack -> .)
    RBRACKET        reduce using rule 21 (add_float_type_to_stack -> .)
    COMMA           reduce using rule 21 (add_float_type_to_stack -> .)
    RPARENT         reduce using rule 21 (add_float_type_to_stack -> .)

    add_float_type_to_stack        shift and go to state 98

state 66

    (124) literal -> INT . add_int_type_to_stack
    (22) add_int_type_to_stack -> .

    TIMES           reduce using rule 22 (add_int_type_to_stack -> .)
    DIVIDE          reduce using rule 22 (add_int_type_to_stack -> .)
    PLUS            reduce using rule 22 (add_int_type_to_stack -> .)
    MINUS           reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHAN     reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHAN        reduce using rule 22 (add_int_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    NOTEQUAL        reduce using rule 22 (add_int_type_to_stack -> .)
    SEMICOLON       reduce using rule 22 (add_int_type_to_stack -> .)
    RBRACKET        reduce using rule 22 (add_int_type_to_stack -> .)
    COMMA           reduce using rule 22 (add_int_type_to_stack -> .)
    RPARENT         reduce using rule 22 (add_int_type_to_stack -> .)

    add_int_type_to_stack          shift and go to state 99

state 67

    (125) literal -> STRING . add_string_type_stack
    (23) add_string_type_stack -> .

    TIMES           reduce using rule 23 (add_string_type_stack -> .)
    DIVIDE          reduce using rule 23 (add_string_type_stack -> .)
    PLUS            reduce using rule 23 (add_string_type_stack -> .)
    MINUS           reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHAN     reduce using rule 23 (add_string_type_stack -> .)
    LESSTHAN        reduce using rule 23 (add_string_type_stack -> .)
    EQUALEQUAL      reduce using rule 23 (add_string_type_stack -> .)
    LESSTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    NOTEQUAL        reduce using rule 23 (add_string_type_stack -> .)
    SEMICOLON       reduce using rule 23 (add_string_type_stack -> .)
    RBRACKET        reduce using rule 23 (add_string_type_stack -> .)
    COMMA           reduce using rule 23 (add_string_type_stack -> .)
    RPARENT         reduce using rule 23 (add_string_type_stack -> .)

    add_string_type_stack          shift and go to state 100

state 68

    (126) literal -> TRUE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 101

state 69

    (127) literal -> FALSE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 102

state 70

    (128) reference -> ID . check_variable_exists add_id_type_to_stack
    (82) function_call_value -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (130) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (8) init_func_call -> .
    (28) array_name_reference -> .

    TIMES           reduce using rule 16 (check_variable_exists -> .)
    DIVIDE          reduce using rule 16 (check_variable_exists -> .)
    PLUS            reduce using rule 16 (check_variable_exists -> .)
    MINUS           reduce using rule 16 (check_variable_exists -> .)
    GREATERTHAN     reduce using rule 16 (check_variable_exists -> .)
    LESSTHAN        reduce using rule 16 (check_variable_exists -> .)
    EQUALEQUAL      reduce using rule 16 (check_variable_exists -> .)
    LESSTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    GREATERTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    NOTEQUAL        reduce using rule 16 (check_variable_exists -> .)
    SEMICOLON       reduce using rule 16 (check_variable_exists -> .)
    RBRACKET        reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LPARENT         reduce using rule 8 (init_func_call -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    init_func_call                 shift and go to state 103
    array_name_reference           shift and go to state 16

state 71

    (135) absolute_call_value -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_value RPARENT

    LPARENT         shift and go to state 104


state 72

    (136) sqrt_call_value -> SQRT . LPARENT mega_expression check_sqrt_argument_value RPARENT

    LPARENT         shift and go to state 105


state 73

    (137) trunc_call_value -> TRUNC . LPARENT mega_expression check_trunc_argument_value RPARENT

    LPARENT         shift and go to state 106


state 74

    (140) substr_call_value -> SUBSTR . LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    LPARENT         shift and go to state 107


state 75

    (138) to_lower_call_value -> TOLOWER . LPARENT mega_expression check_to_lower_argument_value RPARENT

    LPARENT         shift and go to state 108


state 76

    (139) to_upper_call_value -> TOUPPER . LPARENT mega_expression check_to_upper_argument_value RPARENT

    LPARENT         shift and go to state 109


state 77

    (141) avg_call_value -> AVG . LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT

    LPARENT         shift and go to state 110


state 78

    (144) find_array_value -> FIND . LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT

    LPARENT         shift and go to state 111


state 79

    (130) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression . RBRACKET remove_separator array_reference_value

    RBRACKET        shift and go to state 112


state 80

    (61) main_declaration -> MAIN main_quad LPARENT . RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    RPARENT         shift and go to state 113


state 81

    (73) declare_function -> FUNCTION ID new_function_scope . LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (74) declare_function_void -> FUNCTION ID new_function_scope . LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LESSTHAN        shift and go to state 114


state 82

    (145) print -> PRINT LPARENT print_many . RPARENT SEMICOLON

    RPARENT         shift and go to state 115


state 83

    (146) print_many -> mega_expression . print_value
    (147) print_many -> mega_expression . print_value COMMA print_many
    (48) print_value -> .

    COMMA           reduce using rule 48 (print_value -> .)
    RPARENT         reduce using rule 48 (print_value -> .)

    print_value                    shift and go to state 116

state 84

    (88) declare_var -> VAR var_type ID init_variable SEMICOLON .

    VAR             reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ID              reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    MAIN            reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    FUNCTION        reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    PRINT           reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RBRACE          reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    IF              reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    WHILE           reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RETURN          reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    READ            reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    SORT            reduce using rule 88 (declare_var -> VAR var_type ID init_variable SEMICOLON .)


state 85

    (90) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 117


state 86

    (89) declare_var -> VAR var_type ID init_array LBRACKET . INT init_array_size RBRACKET init_array_variable SEMICOLON

    INT             shift and go to state 118


state 87

    (91) assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    SORT            reduce using rule 91 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 88

    (103) mega_expression -> expression relational_operator . expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    expression                     shift and go to state 119
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 89

    (96) relational_operator -> GREATERTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 120

state 90

    (97) relational_operator -> LESSTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 121

state 91

    (98) relational_operator -> EQUALEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 122

state 92

    (99) relational_operator -> LESSTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 123

state 93

    (100) relational_operator -> GREATERTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 124

state 94

    (101) relational_operator -> NOTEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 125

state 95

    (104) expression -> term process_plus_minus_operators .
    (105) expression -> term process_plus_minus_operators . PLUS add_operator_to_stack expression
    (106) expression -> term process_plus_minus_operators . MINUS add_operator_to_stack expression

    GREATERTHAN     reduce using rule 104 (expression -> term process_plus_minus_operators .)
    LESSTHAN        reduce using rule 104 (expression -> term process_plus_minus_operators .)
    EQUALEQUAL      reduce using rule 104 (expression -> term process_plus_minus_operators .)
    LESSTHANOREQUAL reduce using rule 104 (expression -> term process_plus_minus_operators .)
    GREATERTHANOREQUAL reduce using rule 104 (expression -> term process_plus_minus_operators .)
    NOTEQUAL        reduce using rule 104 (expression -> term process_plus_minus_operators .)
    SEMICOLON       reduce using rule 104 (expression -> term process_plus_minus_operators .)
    RBRACKET        reduce using rule 104 (expression -> term process_plus_minus_operators .)
    COMMA           reduce using rule 104 (expression -> term process_plus_minus_operators .)
    RPARENT         reduce using rule 104 (expression -> term process_plus_minus_operators .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127


state 96

    (107) term -> factor process_mult_div_operators .
    (108) term -> factor process_mult_div_operators . TIMES add_operator_to_stack term
    (109) term -> factor process_mult_div_operators . DIVIDE add_operator_to_stack term

    PLUS            reduce using rule 107 (term -> factor process_mult_div_operators .)
    MINUS           reduce using rule 107 (term -> factor process_mult_div_operators .)
    GREATERTHAN     reduce using rule 107 (term -> factor process_mult_div_operators .)
    LESSTHAN        reduce using rule 107 (term -> factor process_mult_div_operators .)
    EQUALEQUAL      reduce using rule 107 (term -> factor process_mult_div_operators .)
    LESSTHANOREQUAL reduce using rule 107 (term -> factor process_mult_div_operators .)
    GREATERTHANOREQUAL reduce using rule 107 (term -> factor process_mult_div_operators .)
    NOTEQUAL        reduce using rule 107 (term -> factor process_mult_div_operators .)
    SEMICOLON       reduce using rule 107 (term -> factor process_mult_div_operators .)
    RBRACKET        reduce using rule 107 (term -> factor process_mult_div_operators .)
    COMMA           reduce using rule 107 (term -> factor process_mult_div_operators .)
    RPARENT         reduce using rule 107 (term -> factor process_mult_div_operators .)
    TIMES           shift and go to state 128
    DIVIDE          shift and go to state 129


state 97

    (110) factor -> LPARENT add_separator . mega_expression RPARENT remove_separator
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 130
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 98

    (123) literal -> FLOAT add_float_type_to_stack .

    TIMES           reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    DIVIDE          reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    PLUS            reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    MINUS           reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHAN     reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHAN        reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    EQUALEQUAL      reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    NOTEQUAL        reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    SEMICOLON       reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    RBRACKET        reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    COMMA           reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)
    RPARENT         reduce using rule 123 (literal -> FLOAT add_float_type_to_stack .)


state 99

    (124) literal -> INT add_int_type_to_stack .

    TIMES           reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    DIVIDE          reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    PLUS            reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    MINUS           reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    GREATERTHAN     reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    LESSTHAN        reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    EQUALEQUAL      reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    NOTEQUAL        reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    SEMICOLON       reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    RBRACKET        reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    COMMA           reduce using rule 124 (literal -> INT add_int_type_to_stack .)
    RPARENT         reduce using rule 124 (literal -> INT add_int_type_to_stack .)


state 100

    (125) literal -> STRING add_string_type_stack .

    TIMES           reduce using rule 125 (literal -> STRING add_string_type_stack .)
    DIVIDE          reduce using rule 125 (literal -> STRING add_string_type_stack .)
    PLUS            reduce using rule 125 (literal -> STRING add_string_type_stack .)
    MINUS           reduce using rule 125 (literal -> STRING add_string_type_stack .)
    GREATERTHAN     reduce using rule 125 (literal -> STRING add_string_type_stack .)
    LESSTHAN        reduce using rule 125 (literal -> STRING add_string_type_stack .)
    EQUALEQUAL      reduce using rule 125 (literal -> STRING add_string_type_stack .)
    LESSTHANOREQUAL reduce using rule 125 (literal -> STRING add_string_type_stack .)
    GREATERTHANOREQUAL reduce using rule 125 (literal -> STRING add_string_type_stack .)
    NOTEQUAL        reduce using rule 125 (literal -> STRING add_string_type_stack .)
    SEMICOLON       reduce using rule 125 (literal -> STRING add_string_type_stack .)
    RBRACKET        reduce using rule 125 (literal -> STRING add_string_type_stack .)
    COMMA           reduce using rule 125 (literal -> STRING add_string_type_stack .)
    RPARENT         reduce using rule 125 (literal -> STRING add_string_type_stack .)


state 101

    (126) literal -> TRUE add_boolean_type_to_stack .

    TIMES           reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    PLUS            reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    MINUS           reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    COMMA           reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 126 (literal -> TRUE add_boolean_type_to_stack .)


state 102

    (127) literal -> FALSE add_boolean_type_to_stack .

    TIMES           reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    PLUS            reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    MINUS           reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    COMMA           reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 127 (literal -> FALSE add_boolean_type_to_stack .)


state 103

    (82) function_call_value -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad

    LPARENT         shift and go to state 131


state 104

    (135) absolute_call_value -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 132
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 105

    (136) sqrt_call_value -> SQRT LPARENT . mega_expression check_sqrt_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 133
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 106

    (137) trunc_call_value -> TRUNC LPARENT . mega_expression check_trunc_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 134
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 107

    (140) substr_call_value -> SUBSTR LPARENT . reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 135
    array_reference                shift and go to state 14

state 108

    (138) to_lower_call_value -> TOLOWER LPARENT . mega_expression check_to_lower_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 136
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 109

    (139) to_upper_call_value -> TOUPPER LPARENT . mega_expression check_to_upper_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 137
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 110

    (141) avg_call_value -> AVG LPARENT . ID add_id_type_to_stack check_avg_argument_value RPARENT

    ID              shift and go to state 138


state 111

    (144) find_array_value -> FIND LPARENT . ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT

    ID              shift and go to state 139


state 112

    (130) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET . remove_separator array_reference_value
    (31) remove_separator -> .

    EQUAL           reduce using rule 31 (remove_separator -> .)
    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 140

state 113

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT . LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LBRACE          shift and go to state 141


state 114

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN . function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN . VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (75) function_type -> . FLOAT_TYPE set_func_return_type
    (76) function_type -> . INT_TYPE set_func_return_type
    (77) function_type -> . STRING_TYPE set_func_return_type
    (78) function_type -> . BOOL_TYPE set_func_return_type

    VOID_TYPE       shift and go to state 143
    FLOAT_TYPE      shift and go to state 144
    INT_TYPE        shift and go to state 145
    STRING_TYPE     shift and go to state 146
    BOOL_TYPE       shift and go to state 147

    function_type                  shift and go to state 142

state 115

    (145) print -> PRINT LPARENT print_many RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 148


state 116

    (146) print_many -> mega_expression print_value .
    (147) print_many -> mega_expression print_value . COMMA print_many

    RPARENT         reduce using rule 146 (print_many -> mega_expression print_value .)
    COMMA           shift and go to state 149


state 117

    (90) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 150

state 118

    (89) declare_var -> VAR var_type ID init_array LBRACKET INT . init_array_size RBRACKET init_array_variable SEMICOLON
    (18) init_array_size -> .

    RBRACKET        reduce using rule 18 (init_array_size -> .)

    init_array_size                shift and go to state 151

state 119

    (103) mega_expression -> expression relational_operator expression . process_relational_operator
    (25) process_relational_operator -> .

    SEMICOLON       reduce using rule 25 (process_relational_operator -> .)
    RBRACKET        reduce using rule 25 (process_relational_operator -> .)
    COMMA           reduce using rule 25 (process_relational_operator -> .)
    RPARENT         reduce using rule 25 (process_relational_operator -> .)

    process_relational_operator    shift and go to state 152

state 120

    (96) relational_operator -> GREATERTHAN add_operator_to_stack .

    LPARENT         reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    INT             reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    STRING          reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUE            reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FALSE           reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ID              reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SQRT            reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    AVG             reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FIND            reduce using rule 96 (relational_operator -> GREATERTHAN add_operator_to_stack .)


state 121

    (97) relational_operator -> LESSTHAN add_operator_to_stack .

    LPARENT         reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    INT             reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    STRING          reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUE            reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FALSE           reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ID              reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SQRT            reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    AVG             reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FIND            reduce using rule 97 (relational_operator -> LESSTHAN add_operator_to_stack .)


state 122

    (98) relational_operator -> EQUALEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    INT             reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    STRING          reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ID              reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    AVG             reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FIND            reduce using rule 98 (relational_operator -> EQUALEQUAL add_operator_to_stack .)


state 123

    (99) relational_operator -> LESSTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FIND            reduce using rule 99 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)


state 124

    (100) relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FIND            reduce using rule 100 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)


state 125

    (101) relational_operator -> NOTEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    INT             reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    STRING          reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ID              reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    AVG             reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FIND            reduce using rule 101 (relational_operator -> NOTEQUAL add_operator_to_stack .)


state 126

    (105) expression -> term process_plus_minus_operators PLUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 153

state 127

    (106) expression -> term process_plus_minus_operators MINUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 154

state 128

    (108) term -> factor process_mult_div_operators TIMES . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 155

state 129

    (109) term -> factor process_mult_div_operators DIVIDE . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 156

state 130

    (110) factor -> LPARENT add_separator mega_expression . RPARENT remove_separator

    RPARENT         shift and go to state 157


state 131

    (82) function_call_value -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad
    (85) arg_list -> . arg
    (86) arg_list -> . arg COMMA increment_argument_counter arg_list
    (87) arg -> . mega_expression check_arg_count_type
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    arg_list                       shift and go to state 158
    arg                            shift and go to state 159
    mega_expression                shift and go to state 160
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 132

    (135) absolute_call_value -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_value RPARENT
    (39) check_absolute_argument_value -> .

    RPARENT         reduce using rule 39 (check_absolute_argument_value -> .)

    check_absolute_argument_value  shift and go to state 161

state 133

    (136) sqrt_call_value -> SQRT LPARENT mega_expression . check_sqrt_argument_value RPARENT
    (41) check_sqrt_argument_value -> .

    RPARENT         reduce using rule 41 (check_sqrt_argument_value -> .)

    check_sqrt_argument_value      shift and go to state 162

state 134

    (137) trunc_call_value -> TRUNC LPARENT mega_expression . check_trunc_argument_value RPARENT
    (40) check_trunc_argument_value -> .

    RPARENT         reduce using rule 40 (check_trunc_argument_value -> .)

    check_trunc_argument_value     shift and go to state 163

state 135

    (140) substr_call_value -> SUBSTR LPARENT reference . COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 164


state 136

    (138) to_lower_call_value -> TOLOWER LPARENT mega_expression . check_to_lower_argument_value RPARENT
    (43) check_to_lower_argument_value -> .

    RPARENT         reduce using rule 43 (check_to_lower_argument_value -> .)

    check_to_lower_argument_value  shift and go to state 165

state 137

    (139) to_upper_call_value -> TOUPPER LPARENT mega_expression . check_to_upper_argument_value RPARENT
    (44) check_to_upper_argument_value -> .

    RPARENT         reduce using rule 44 (check_to_upper_argument_value -> .)

    check_to_upper_argument_value  shift and go to state 166

state 138

    (141) avg_call_value -> AVG LPARENT ID . add_id_type_to_stack check_avg_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 167

state 139

    (144) find_array_value -> FIND LPARENT ID . add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 168

state 140

    (130) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator . array_reference_value
    (29) array_reference_value -> .

    EQUAL           reduce using rule 29 (array_reference_value -> .)
    TIMES           reduce using rule 29 (array_reference_value -> .)
    DIVIDE          reduce using rule 29 (array_reference_value -> .)
    PLUS            reduce using rule 29 (array_reference_value -> .)
    MINUS           reduce using rule 29 (array_reference_value -> .)
    GREATERTHAN     reduce using rule 29 (array_reference_value -> .)
    LESSTHAN        reduce using rule 29 (array_reference_value -> .)
    EQUALEQUAL      reduce using rule 29 (array_reference_value -> .)
    LESSTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    GREATERTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    NOTEQUAL        reduce using rule 29 (array_reference_value -> .)
    SEMICOLON       reduce using rule 29 (array_reference_value -> .)
    RBRACKET        reduce using rule 29 (array_reference_value -> .)
    COMMA           reduce using rule 29 (array_reference_value -> .)
    RPARENT         reduce using rule 29 (array_reference_value -> .)

    array_reference_value          shift and go to state 169

state 141

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE . new_scope statement_list RBRACE close_current_scope SEMICOLON
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 170

state 142

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 171


state 143

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE . set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 172

state 144

    (75) function_type -> FLOAT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 173

state 145

    (76) function_type -> INT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 174

state 146

    (77) function_type -> STRING_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 175

state 147

    (78) function_type -> BOOL_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 176

state 148

    (145) print -> PRINT LPARENT print_many RPARENT SEMICOLON .

    MAIN            reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    PRINT           reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RBRACE          reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    VAR             reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ID              reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    IF              reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    WHILE           reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RETURN          reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    READ            reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    SORT            reduce using rule 145 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)


state 149

    (147) print_many -> mega_expression print_value COMMA . print_many
    (146) print_many -> . mega_expression print_value
    (147) print_many -> . mega_expression print_value COMMA print_many
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 83
    print_many                     shift and go to state 177
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 150

    (90) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 178
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 151

    (89) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size . RBRACKET init_array_variable SEMICOLON

    RBRACKET        shift and go to state 179


state 152

    (103) mega_expression -> expression relational_operator expression process_relational_operator .

    SEMICOLON       reduce using rule 103 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RBRACKET        reduce using rule 103 (mega_expression -> expression relational_operator expression process_relational_operator .)
    COMMA           reduce using rule 103 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RPARENT         reduce using rule 103 (mega_expression -> expression relational_operator expression process_relational_operator .)


state 153

    (105) expression -> term process_plus_minus_operators PLUS add_operator_to_stack . expression
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    term                           shift and go to state 51
    expression                     shift and go to state 180
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 154

    (106) expression -> term process_plus_minus_operators MINUS add_operator_to_stack . expression
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    term                           shift and go to state 51
    expression                     shift and go to state 181
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 155

    (108) term -> factor process_mult_div_operators TIMES add_operator_to_stack . term
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    factor                         shift and go to state 52
    term                           shift and go to state 182
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 156

    (109) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack . term
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    factor                         shift and go to state 52
    term                           shift and go to state 183
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 157

    (110) factor -> LPARENT add_separator mega_expression RPARENT . remove_separator
    (31) remove_separator -> .

    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 184

state 158

    (82) function_call_value -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad

    RPARENT         shift and go to state 185


state 159

    (85) arg_list -> arg .
    (86) arg_list -> arg . COMMA increment_argument_counter arg_list

    RPARENT         reduce using rule 85 (arg_list -> arg .)
    COMMA           shift and go to state 186


state 160

    (87) arg -> mega_expression . check_arg_count_type
    (10) check_arg_count_type -> .

    COMMA           reduce using rule 10 (check_arg_count_type -> .)
    RPARENT         reduce using rule 10 (check_arg_count_type -> .)

    check_arg_count_type           shift and go to state 187

state 161

    (135) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value . RPARENT

    RPARENT         shift and go to state 188


state 162

    (136) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value . RPARENT

    RPARENT         shift and go to state 189


state 163

    (137) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value . RPARENT

    RPARENT         shift and go to state 190


state 164

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA . mega_expression COMMA mega_expression substr_quad RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    reference                      shift and go to state 48
    mega_expression                shift and go to state 191
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 165

    (138) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value . RPARENT

    RPARENT         shift and go to state 192


state 166

    (139) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value . RPARENT

    RPARENT         shift and go to state 193


state 167

    (141) avg_call_value -> AVG LPARENT ID add_id_type_to_stack . check_avg_argument_value RPARENT
    (45) check_avg_argument_value -> .

    RPARENT         reduce using rule 45 (check_avg_argument_value -> .)

    check_avg_argument_value       shift and go to state 194

state 168

    (144) find_array_value -> FIND LPARENT ID add_id_type_to_stack . COMMA mega_expression check_find_argument_value RPARENT

    COMMA           shift and go to state 195


state 169

    (130) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .

    EQUAL           reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    TIMES           reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    DIVIDE          reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    PLUS            reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    MINUS           reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHAN     reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHAN        reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    EQUALEQUAL      reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHANOREQUAL reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHANOREQUAL reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    NOTEQUAL        reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    SEMICOLON       reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RBRACKET        reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    COMMA           reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RPARENT         reduce using rule 130 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)


state 170

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope . statement_list RBRACE close_current_scope SEMICOLON
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 196
    empty                          shift and go to state 197

state 171

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 198


state 172

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 199


state 173

    (75) function_type -> FLOAT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 75 (function_type -> FLOAT_TYPE set_func_return_type .)


state 174

    (76) function_type -> INT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 76 (function_type -> INT_TYPE set_func_return_type .)


state 175

    (77) function_type -> STRING_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 77 (function_type -> STRING_TYPE set_func_return_type .)


state 176

    (78) function_type -> BOOL_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 78 (function_type -> BOOL_TYPE set_func_return_type .)


state 177

    (147) print_many -> mega_expression print_value COMMA print_many .

    RPARENT         reduce using rule 147 (print_many -> mega_expression print_value COMMA print_many .)


state 178

    (90) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 200


state 179

    (89) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET . init_array_variable SEMICOLON
    (19) init_array_variable -> .

    SEMICOLON       reduce using rule 19 (init_array_variable -> .)

    init_array_variable            shift and go to state 201

state 180

    (105) expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    COMMA           reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 105 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)


state 181

    (106) expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    COMMA           reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 106 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)


state 182

    (108) term -> factor process_mult_div_operators TIMES add_operator_to_stack term .

    PLUS            reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    MINUS           reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHAN        reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    SEMICOLON       reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RBRACKET        reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    COMMA           reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RPARENT         reduce using rule 108 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)


state 183

    (109) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .

    PLUS            reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    MINUS           reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHAN        reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    SEMICOLON       reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RBRACKET        reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    COMMA           reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RPARENT         reduce using rule 109 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)


state 184

    (110) factor -> LPARENT add_separator mega_expression RPARENT remove_separator .

    TIMES           reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    DIVIDE          reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    PLUS            reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    MINUS           reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHAN     reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHAN        reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    EQUALEQUAL      reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHANOREQUAL reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHANOREQUAL reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    NOTEQUAL        reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    SEMICOLON       reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RBRACKET        reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    COMMA           reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RPARENT         reduce using rule 110 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)


state 185

    (82) function_call_value -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad
    (11) create_gosub_quad -> .

    TIMES           reduce using rule 11 (create_gosub_quad -> .)
    DIVIDE          reduce using rule 11 (create_gosub_quad -> .)
    PLUS            reduce using rule 11 (create_gosub_quad -> .)
    MINUS           reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHAN     reduce using rule 11 (create_gosub_quad -> .)
    LESSTHAN        reduce using rule 11 (create_gosub_quad -> .)
    EQUALEQUAL      reduce using rule 11 (create_gosub_quad -> .)
    LESSTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    NOTEQUAL        reduce using rule 11 (create_gosub_quad -> .)
    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)
    RBRACKET        reduce using rule 11 (create_gosub_quad -> .)
    COMMA           reduce using rule 11 (create_gosub_quad -> .)
    RPARENT         reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 202

state 186

    (86) arg_list -> arg COMMA . increment_argument_counter arg_list
    (9) increment_argument_counter -> .

    LPARENT         reduce using rule 9 (increment_argument_counter -> .)
    FLOAT           reduce using rule 9 (increment_argument_counter -> .)
    INT             reduce using rule 9 (increment_argument_counter -> .)
    STRING          reduce using rule 9 (increment_argument_counter -> .)
    TRUE            reduce using rule 9 (increment_argument_counter -> .)
    FALSE           reduce using rule 9 (increment_argument_counter -> .)
    ID              reduce using rule 9 (increment_argument_counter -> .)
    ABSOLUTE        reduce using rule 9 (increment_argument_counter -> .)
    SQRT            reduce using rule 9 (increment_argument_counter -> .)
    TRUNC           reduce using rule 9 (increment_argument_counter -> .)
    SUBSTR          reduce using rule 9 (increment_argument_counter -> .)
    TOLOWER         reduce using rule 9 (increment_argument_counter -> .)
    TOUPPER         reduce using rule 9 (increment_argument_counter -> .)
    AVG             reduce using rule 9 (increment_argument_counter -> .)
    FIND            reduce using rule 9 (increment_argument_counter -> .)

    increment_argument_counter     shift and go to state 203

state 187

    (87) arg -> mega_expression check_arg_count_type .

    COMMA           reduce using rule 87 (arg -> mega_expression check_arg_count_type .)
    RPARENT         reduce using rule 87 (arg -> mega_expression check_arg_count_type .)


state 188

    (135) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .

    TIMES           reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    DIVIDE          reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    PLUS            reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    MINUS           reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHAN        reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    SEMICOLON       reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RBRACKET        reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    COMMA           reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RPARENT         reduce using rule 135 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)


state 189

    (136) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .

    TIMES           reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    DIVIDE          reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    PLUS            reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    MINUS           reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHAN        reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    SEMICOLON       reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RBRACKET        reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    COMMA           reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RPARENT         reduce using rule 136 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)


state 190

    (137) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .

    TIMES           reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    DIVIDE          reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    PLUS            reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    MINUS           reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHAN        reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    SEMICOLON       reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RBRACKET        reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    COMMA           reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RPARENT         reduce using rule 137 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)


state 191

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression . COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 204


state 192

    (138) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .

    TIMES           reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    DIVIDE          reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    PLUS            reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    MINUS           reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHAN        reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    SEMICOLON       reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RBRACKET        reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    COMMA           reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RPARENT         reduce using rule 138 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)


state 193

    (139) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .

    TIMES           reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    DIVIDE          reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    PLUS            reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    MINUS           reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHAN        reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    SEMICOLON       reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RBRACKET        reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    COMMA           reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RPARENT         reduce using rule 139 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)


state 194

    (141) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value . RPARENT

    RPARENT         shift and go to state 205


state 195

    (144) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA . mega_expression check_find_argument_value RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 206
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 196

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list . RBRACE close_current_scope SEMICOLON
    (62) statement_list -> statement_list . statement
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 207
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    RETURN          shift and go to state 221
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    return                         shift and go to state 214
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 197

    (63) statement_list -> empty .

    RBRACE          reduce using rule 63 (statement_list -> empty .)
    VAR             reduce using rule 63 (statement_list -> empty .)
    ID              reduce using rule 63 (statement_list -> empty .)
    IF              reduce using rule 63 (statement_list -> empty .)
    WHILE           reduce using rule 63 (statement_list -> empty .)
    RETURN          reduce using rule 63 (statement_list -> empty .)
    READ            reduce using rule 63 (statement_list -> empty .)
    SORT            reduce using rule 63 (statement_list -> empty .)
    PRINT           reduce using rule 63 (statement_list -> empty .)


state 198

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (79) params -> . param
    (80) params -> . param COMMA params
    (81) param -> . var_type ID init_param
    (92) var_type -> . FLOAT_TYPE set_current_type
    (93) var_type -> . INT_TYPE set_current_type
    (94) var_type -> . STRING_TYPE set_current_type
    (95) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 224
    param                          shift and go to state 225
    var_type                       shift and go to state 226

state 199

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 227


state 200

    (90) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    SORT            reduce using rule 90 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 201

    (89) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable . SEMICOLON

    SEMICOLON       shift and go to state 228


state 202

    (82) function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .

    TIMES           reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    DIVIDE          reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    PLUS            reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    MINUS           reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHAN     reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHAN        reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    EQUALEQUAL      reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHANOREQUAL reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHANOREQUAL reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    NOTEQUAL        reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    SEMICOLON       reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RBRACKET        reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    COMMA           reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RPARENT         reduce using rule 82 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)


state 203

    (86) arg_list -> arg COMMA increment_argument_counter . arg_list
    (85) arg_list -> . arg
    (86) arg_list -> . arg COMMA increment_argument_counter arg_list
    (87) arg -> . mega_expression check_arg_count_type
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    arg                            shift and go to state 159
    arg_list                       shift and go to state 229
    mega_expression                shift and go to state 160
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 204

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA . mega_expression substr_quad RPARENT
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    reference                      shift and go to state 48
    mega_expression                shift and go to state 230
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 205

    (141) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .

    TIMES           reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    DIVIDE          reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    PLUS            reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    MINUS           reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHAN        reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    SEMICOLON       reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RBRACKET        reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    COMMA           reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RPARENT         reduce using rule 141 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)


state 206

    (144) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression . check_find_argument_value RPARENT
    (47) check_find_argument_value -> .

    RPARENT         reduce using rule 47 (check_find_argument_value -> .)

    check_find_argument_value      shift and go to state 231

state 207

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 232

state 208

    (62) statement_list -> statement_list statement .

    RBRACE          reduce using rule 62 (statement_list -> statement_list statement .)
    VAR             reduce using rule 62 (statement_list -> statement_list statement .)
    ID              reduce using rule 62 (statement_list -> statement_list statement .)
    IF              reduce using rule 62 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 62 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 62 (statement_list -> statement_list statement .)
    READ            reduce using rule 62 (statement_list -> statement_list statement .)
    SORT            reduce using rule 62 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 62 (statement_list -> statement_list statement .)


state 209

    (64) statement -> declare_var .

    RBRACE          reduce using rule 64 (statement -> declare_var .)
    VAR             reduce using rule 64 (statement -> declare_var .)
    ID              reduce using rule 64 (statement -> declare_var .)
    IF              reduce using rule 64 (statement -> declare_var .)
    WHILE           reduce using rule 64 (statement -> declare_var .)
    RETURN          reduce using rule 64 (statement -> declare_var .)
    READ            reduce using rule 64 (statement -> declare_var .)
    SORT            reduce using rule 64 (statement -> declare_var .)
    PRINT           reduce using rule 64 (statement -> declare_var .)


state 210

    (65) statement -> assign_statement .

    RBRACE          reduce using rule 65 (statement -> assign_statement .)
    VAR             reduce using rule 65 (statement -> assign_statement .)
    ID              reduce using rule 65 (statement -> assign_statement .)
    IF              reduce using rule 65 (statement -> assign_statement .)
    WHILE           reduce using rule 65 (statement -> assign_statement .)
    RETURN          reduce using rule 65 (statement -> assign_statement .)
    READ            reduce using rule 65 (statement -> assign_statement .)
    SORT            reduce using rule 65 (statement -> assign_statement .)
    PRINT           reduce using rule 65 (statement -> assign_statement .)


state 211

    (66) statement -> function_call .

    RBRACE          reduce using rule 66 (statement -> function_call .)
    VAR             reduce using rule 66 (statement -> function_call .)
    ID              reduce using rule 66 (statement -> function_call .)
    IF              reduce using rule 66 (statement -> function_call .)
    WHILE           reduce using rule 66 (statement -> function_call .)
    RETURN          reduce using rule 66 (statement -> function_call .)
    READ            reduce using rule 66 (statement -> function_call .)
    SORT            reduce using rule 66 (statement -> function_call .)
    PRINT           reduce using rule 66 (statement -> function_call .)


state 212

    (67) statement -> if_condition .

    RBRACE          reduce using rule 67 (statement -> if_condition .)
    VAR             reduce using rule 67 (statement -> if_condition .)
    ID              reduce using rule 67 (statement -> if_condition .)
    IF              reduce using rule 67 (statement -> if_condition .)
    WHILE           reduce using rule 67 (statement -> if_condition .)
    RETURN          reduce using rule 67 (statement -> if_condition .)
    READ            reduce using rule 67 (statement -> if_condition .)
    SORT            reduce using rule 67 (statement -> if_condition .)
    PRINT           reduce using rule 67 (statement -> if_condition .)


state 213

    (68) statement -> while_loop .

    RBRACE          reduce using rule 68 (statement -> while_loop .)
    VAR             reduce using rule 68 (statement -> while_loop .)
    ID              reduce using rule 68 (statement -> while_loop .)
    IF              reduce using rule 68 (statement -> while_loop .)
    WHILE           reduce using rule 68 (statement -> while_loop .)
    RETURN          reduce using rule 68 (statement -> while_loop .)
    READ            reduce using rule 68 (statement -> while_loop .)
    SORT            reduce using rule 68 (statement -> while_loop .)
    PRINT           reduce using rule 68 (statement -> while_loop .)


state 214

    (69) statement -> return .

    RBRACE          reduce using rule 69 (statement -> return .)
    VAR             reduce using rule 69 (statement -> return .)
    ID              reduce using rule 69 (statement -> return .)
    IF              reduce using rule 69 (statement -> return .)
    WHILE           reduce using rule 69 (statement -> return .)
    RETURN          reduce using rule 69 (statement -> return .)
    READ            reduce using rule 69 (statement -> return .)
    SORT            reduce using rule 69 (statement -> return .)
    PRINT           reduce using rule 69 (statement -> return .)


state 215

    (70) statement -> read .

    RBRACE          reduce using rule 70 (statement -> read .)
    VAR             reduce using rule 70 (statement -> read .)
    ID              reduce using rule 70 (statement -> read .)
    IF              reduce using rule 70 (statement -> read .)
    WHILE           reduce using rule 70 (statement -> read .)
    RETURN          reduce using rule 70 (statement -> read .)
    READ            reduce using rule 70 (statement -> read .)
    SORT            reduce using rule 70 (statement -> read .)
    PRINT           reduce using rule 70 (statement -> read .)


state 216

    (71) statement -> sort_array .

    RBRACE          reduce using rule 71 (statement -> sort_array .)
    VAR             reduce using rule 71 (statement -> sort_array .)
    ID              reduce using rule 71 (statement -> sort_array .)
    IF              reduce using rule 71 (statement -> sort_array .)
    WHILE           reduce using rule 71 (statement -> sort_array .)
    RETURN          reduce using rule 71 (statement -> sort_array .)
    READ            reduce using rule 71 (statement -> sort_array .)
    SORT            reduce using rule 71 (statement -> sort_array .)
    PRINT           reduce using rule 71 (statement -> sort_array .)


state 217

    (72) statement -> print .

    RBRACE          reduce using rule 72 (statement -> print .)
    VAR             reduce using rule 72 (statement -> print .)
    ID              reduce using rule 72 (statement -> print .)
    IF              reduce using rule 72 (statement -> print .)
    WHILE           reduce using rule 72 (statement -> print .)
    RETURN          reduce using rule 72 (statement -> print .)
    READ            reduce using rule 72 (statement -> print .)
    SORT            reduce using rule 72 (statement -> print .)
    PRINT           reduce using rule 72 (statement -> print .)


state 218

    (83) function_call -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (128) reference -> ID . check_variable_exists add_id_type_to_stack
    (130) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (8) init_func_call -> .
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    LPARENT         reduce using rule 8 (init_func_call -> .)
    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    init_func_call                 shift and go to state 233
    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 219

    (131) if_condition -> IF . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LPARENT         shift and go to state 234


state 220

    (134) while_loop -> WHILE . goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (35) goto_return_position -> .

    LPARENT         reduce using rule 35 (goto_return_position -> .)

    goto_return_position           shift and go to state 235

state 221

    (84) return -> RETURN . mega_expression validate_return SEMICOLON
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 236
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 222

    (148) read -> READ . LPARENT reference read_value RPARENT SEMICOLON

    LPARENT         shift and go to state 237


state 223

    (142) sort_array -> SORT . LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> SORT . LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    LPARENT         shift and go to state 238


state 224

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 239


state 225

    (79) params -> param .
    (80) params -> param . COMMA params

    RPARENT         reduce using rule 79 (params -> param .)
    COMMA           shift and go to state 240


state 226

    (81) param -> var_type . ID init_param

    ID              shift and go to state 241


state 227

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (79) params -> . param
    (80) params -> . param COMMA params
    (81) param -> . var_type ID init_param
    (92) var_type -> . FLOAT_TYPE set_current_type
    (93) var_type -> . INT_TYPE set_current_type
    (94) var_type -> . STRING_TYPE set_current_type
    (95) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 242
    param                          shift and go to state 225
    var_type                       shift and go to state 226

state 228

    (89) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .

    VAR             reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ID              reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    MAIN            reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    FUNCTION        reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    PRINT           reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RBRACE          reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    IF              reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    WHILE           reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RETURN          reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    READ            reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    SORT            reduce using rule 89 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)


state 229

    (86) arg_list -> arg COMMA increment_argument_counter arg_list .

    RPARENT         reduce using rule 86 (arg_list -> arg COMMA increment_argument_counter arg_list .)


state 230

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression . substr_quad RPARENT
    (42) substr_quad -> .

    RPARENT         reduce using rule 42 (substr_quad -> .)

    substr_quad                    shift and go to state 243

state 231

    (144) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value . RPARENT

    RPARENT         shift and go to state 244


state 232

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 245


state 233

    (83) function_call -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad SEMICOLON

    LPARENT         shift and go to state 246


state 234

    (131) if_condition -> IF LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 247
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 235

    (134) while_loop -> WHILE goto_return_position . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LPARENT         shift and go to state 248


state 236

    (84) return -> RETURN mega_expression . validate_return SEMICOLON
    (12) validate_return -> .

    SEMICOLON       reduce using rule 12 (validate_return -> .)

    validate_return                shift and go to state 249

state 237

    (148) read -> READ LPARENT . reference read_value RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 250
    array_reference                shift and go to state 14

state 238

    (142) sort_array -> SORT LPARENT . ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> SORT LPARENT . ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    ID              shift and go to state 251


state 239

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 252


state 240

    (80) params -> param COMMA . params
    (79) params -> . param
    (80) params -> . param COMMA params
    (81) param -> . var_type ID init_param
    (92) var_type -> . FLOAT_TYPE set_current_type
    (93) var_type -> . INT_TYPE set_current_type
    (94) var_type -> . STRING_TYPE set_current_type
    (95) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    param                          shift and go to state 225
    params                         shift and go to state 253
    var_type                       shift and go to state 226

state 241

    (81) param -> var_type ID . init_param
    (5) init_param -> .

    COMMA           reduce using rule 5 (init_param -> .)
    RPARENT         reduce using rule 5 (init_param -> .)

    init_param                     shift and go to state 254

state 242

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 255


state 243

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad . RPARENT

    RPARENT         shift and go to state 256


state 244

    (144) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .

    TIMES           reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    DIVIDE          reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    PLUS            reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    MINUS           reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    LESSTHAN        reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    SEMICOLON       reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    RBRACKET        reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    COMMA           reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    RPARENT         reduce using rule 144 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)


state 245

    (61) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .

    $end            reduce using rule 61 (main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .)


state 246

    (83) function_call -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad SEMICOLON
    (85) arg_list -> . arg
    (86) arg_list -> . arg COMMA increment_argument_counter arg_list
    (87) arg -> . mega_expression check_arg_count_type
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    arg_list                       shift and go to state 257
    arg                            shift and go to state 159
    mega_expression                shift and go to state 160
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 247

    (131) if_condition -> IF LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    RPARENT         shift and go to state 258


state 248

    (134) while_loop -> WHILE goto_return_position LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (102) mega_expression -> . expression
    (103) mega_expression -> . expression relational_operator expression process_relational_operator
    (104) expression -> . term process_plus_minus_operators
    (105) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (106) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (107) term -> . factor process_mult_div_operators
    (108) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (109) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (110) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (111) factor -> . value
    (112) value -> . literal
    (113) value -> . reference
    (114) value -> . function_call_value
    (115) value -> . absolute_call_value
    (116) value -> . sqrt_call_value
    (117) value -> . trunc_call_value
    (118) value -> . substr_call_value
    (119) value -> . to_lower_call_value
    (120) value -> . to_upper_call_value
    (121) value -> . avg_call_value
    (122) value -> . find_array_value
    (123) literal -> . FLOAT add_float_type_to_stack
    (124) literal -> . INT add_int_type_to_stack
    (125) literal -> . STRING add_string_type_stack
    (126) literal -> . TRUE add_boolean_type_to_stack
    (127) literal -> . FALSE add_boolean_type_to_stack
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (82) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (135) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (136) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (137) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (140) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (138) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (139) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (141) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (144) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 65
    INT             shift and go to state 66
    STRING          shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 69
    ID              shift and go to state 70
    ABSOLUTE        shift and go to state 71
    SQRT            shift and go to state 72
    TRUNC           shift and go to state 73
    SUBSTR          shift and go to state 74
    TOLOWER         shift and go to state 75
    TOUPPER         shift and go to state 76
    AVG             shift and go to state 77
    FIND            shift and go to state 78

    mega_expression                shift and go to state 259
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    array_reference                shift and go to state 14

state 249

    (84) return -> RETURN mega_expression validate_return . SEMICOLON

    SEMICOLON       shift and go to state 260


state 250

    (148) read -> READ LPARENT reference . read_value RPARENT SEMICOLON
    (49) read_value -> .

    RPARENT         reduce using rule 49 (read_value -> .)

    read_value                     shift and go to state 261

state 251

    (142) sort_array -> SORT LPARENT ID . add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> SORT LPARENT ID . add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (20) add_id_type_to_stack -> .

    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 262

state 252

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RETURN          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    SORT            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 263

state 253

    (80) params -> param COMMA params .

    RPARENT         reduce using rule 80 (params -> param COMMA params .)


state 254

    (81) param -> var_type ID init_param .

    COMMA           reduce using rule 81 (param -> var_type ID init_param .)
    RPARENT         reduce using rule 81 (param -> var_type ID init_param .)


state 255

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 264


state 256

    (140) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .

    TIMES           reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    DIVIDE          reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    PLUS            reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    MINUS           reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHAN     reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHAN        reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    EQUALEQUAL      reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHANOREQUAL reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHANOREQUAL reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    NOTEQUAL        reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    SEMICOLON       reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RBRACKET        reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    COMMA           reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RPARENT         reduce using rule 140 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)


state 257

    (83) function_call -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad SEMICOLON

    RPARENT         shift and go to state 265


state 258

    (131) if_condition -> IF LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LBRACE          shift and go to state 266


state 259

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    RPARENT         shift and go to state 267


state 260

    (84) return -> RETURN mega_expression validate_return SEMICOLON .

    RBRACE          reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    VAR             reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ID              reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    IF              reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    WHILE           reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    RETURN          reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    READ            reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    SORT            reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)
    PRINT           reduce using rule 84 (return -> RETURN mega_expression validate_return SEMICOLON .)


state 261

    (148) read -> READ LPARENT reference read_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 268


state 262

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack . COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack . COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    COMMA           shift and go to state 269


state 263

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RETURN          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 270
    empty                          shift and go to state 197

state 264

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RBRACE          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    RETURN          reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    SORT            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 271

state 265

    (83) function_call -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad SEMICOLON
    (11) create_gosub_quad -> .

    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 272

state 266

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    SORT            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 273

state 267

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LBRACE          shift and go to state 274


state 268

    (148) read -> READ LPARENT reference read_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 275


state 269

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA . LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA . GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    LESSTHAN        shift and go to state 276
    GREATERTHAN     shift and go to state 277


state 270

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . return RBRACE endfunc_quad close_current_scope SEMICOLON
    (62) statement_list -> statement_list . statement
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RETURN          shift and go to state 221
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    return                         shift and go to state 278
    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 271

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 279
    empty                          shift and go to state 197

state 272

    (83) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad . SEMICOLON

    SEMICOLON       shift and go to state 280


state 273

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 281

state 274

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    SORT            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 282

state 275

    (148) read -> READ LPARENT reference read_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    VAR             reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ID              reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    IF              reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    READ            reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    SORT            reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 148 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)


state 276

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN . add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (13) add_operator_to_stack -> .

    RPARENT         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 283

state 277

    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN . add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (13) add_operator_to_stack -> .

    RPARENT         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 284

state 278

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return . RBRACE endfunc_quad close_current_scope SEMICOLON
    (69) statement -> return .

    RBRACE          shift and go to state 285
    RETURN          reduce using rule 69 (statement -> return .)
    VAR             reduce using rule 69 (statement -> return .)
    ID              reduce using rule 69 (statement -> return .)
    IF              reduce using rule 69 (statement -> return .)
    WHILE           reduce using rule 69 (statement -> return .)
    READ            reduce using rule 69 (statement -> return .)
    SORT            reduce using rule 69 (statement -> return .)
    PRINT           reduce using rule 69 (statement -> return .)


state 279

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . RBRACE endfunc_quad close_current_scope SEMICOLON
    (62) statement_list -> statement_list . statement
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 286
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    RETURN          shift and go to state 221
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    return                         shift and go to state 214
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 280

    (83) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .

    RBRACE          reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    VAR             reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ID              reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    IF              reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    WHILE           reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    RETURN          reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    READ            reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    SORT            reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    PRINT           reduce using rule 83 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)


state 281

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE close_current_scope else_condition goto_end_position
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 287
    empty                          shift and go to state 197

state 282

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 288

state 283

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack . check_sort_argument_value RPARENT SEMICOLON
    (46) check_sort_argument_value -> .

    RPARENT         reduce using rule 46 (check_sort_argument_value -> .)

    check_sort_argument_value      shift and go to state 289

state 284

    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack . check_sort_argument_value RPARENT SEMICOLON
    (46) check_sort_argument_value -> .

    RPARENT         reduce using rule 46 (check_sort_argument_value -> .)

    check_sort_argument_value      shift and go to state 290

state 285

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 291

state 286

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 292

state 287

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE close_current_scope else_condition goto_end_position
    (62) statement_list -> statement_list . statement
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 293
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    RETURN          shift and go to state 221
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    return                         shift and go to state 214
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 288

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE return_end_jump_position close_current_scope
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 294
    empty                          shift and go to state 197

state 289

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 295


state 290

    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 296


state 291

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 297

state 292

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 298

state 293

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . close_current_scope else_condition goto_end_position
    (2) close_current_scope -> .

    ELSE            reduce using rule 2 (close_current_scope -> .)
    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 299

state 294

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE return_end_jump_position close_current_scope
    (62) statement_list -> statement_list . statement
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 300
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    RETURN          shift and go to state 221
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    return                         shift and go to state 214
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 295

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 301


state 296

    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 302


state 297

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 303


state 298

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 304


state 299

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope . else_condition goto_end_position
    (132) else_condition -> . ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (133) else_condition -> . empty
    (149) empty -> .

    ELSE            shift and go to state 306
    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    else_condition                 shift and go to state 305
    empty                          shift and go to state 307

state 300

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . return_end_jump_position close_current_scope
    (36) return_end_jump_position -> .

    RBRACE          reduce using rule 36 (return_end_jump_position -> .)
    VAR             reduce using rule 36 (return_end_jump_position -> .)
    ID              reduce using rule 36 (return_end_jump_position -> .)
    IF              reduce using rule 36 (return_end_jump_position -> .)
    WHILE           reduce using rule 36 (return_end_jump_position -> .)
    RETURN          reduce using rule 36 (return_end_jump_position -> .)
    READ            reduce using rule 36 (return_end_jump_position -> .)
    SORT            reduce using rule 36 (return_end_jump_position -> .)
    PRINT           reduce using rule 36 (return_end_jump_position -> .)

    return_end_jump_position       shift and go to state 308

state 301

    (142) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    VAR             reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    ID              reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    IF              reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    READ            reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    SORT            reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 142 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)


state 302

    (143) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    VAR             reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    ID              reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    IF              reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    READ            reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    SORT            reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 143 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)


state 303

    (73) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 73 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 73 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 73 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 304

    (74) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 74 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 74 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 74 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 305

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition . goto_end_position
    (34) goto_end_position -> .

    RBRACE          reduce using rule 34 (goto_end_position -> .)
    VAR             reduce using rule 34 (goto_end_position -> .)
    ID              reduce using rule 34 (goto_end_position -> .)
    IF              reduce using rule 34 (goto_end_position -> .)
    WHILE           reduce using rule 34 (goto_end_position -> .)
    RETURN          reduce using rule 34 (goto_end_position -> .)
    READ            reduce using rule 34 (goto_end_position -> .)
    SORT            reduce using rule 34 (goto_end_position -> .)
    PRINT           reduce using rule 34 (goto_end_position -> .)

    goto_end_position              shift and go to state 309

state 306

    (132) else_condition -> ELSE . goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (33) goto_skip_else -> .

    LBRACE          reduce using rule 33 (goto_skip_else -> .)

    goto_skip_else                 shift and go to state 310

state 307

    (133) else_condition -> empty .

    RBRACE          reduce using rule 133 (else_condition -> empty .)
    VAR             reduce using rule 133 (else_condition -> empty .)
    ID              reduce using rule 133 (else_condition -> empty .)
    IF              reduce using rule 133 (else_condition -> empty .)
    WHILE           reduce using rule 133 (else_condition -> empty .)
    RETURN          reduce using rule 133 (else_condition -> empty .)
    READ            reduce using rule 133 (else_condition -> empty .)
    SORT            reduce using rule 133 (else_condition -> empty .)
    PRINT           reduce using rule 133 (else_condition -> empty .)


state 308

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 311

state 309

    (131) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .

    RBRACE          reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    VAR             reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ID              reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    IF              reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    WHILE           reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    RETURN          reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    READ            reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    SORT            reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    PRINT           reduce using rule 131 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)


state 310

    (132) else_condition -> ELSE goto_skip_else . LBRACE new_scope statement_list RBRACE close_current_scope

    LBRACE          shift and go to state 312


state 311

    (134) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .

    RBRACE          reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    VAR             reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ID              reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    IF              reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    WHILE           reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    RETURN          reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    READ            reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    SORT            reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    PRINT           reduce using rule 134 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)


state 312

    (132) else_condition -> ELSE goto_skip_else LBRACE . new_scope statement_list RBRACE close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 313

state 313

    (132) else_condition -> ELSE goto_skip_else LBRACE new_scope . statement_list RBRACE close_current_scope
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . empty
    (149) empty -> .

    RBRACE          reduce using rule 149 (empty -> .)
    VAR             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    READ            reduce using rule 149 (empty -> .)
    SORT            reduce using rule 149 (empty -> .)
    PRINT           reduce using rule 149 (empty -> .)

    statement_list                 shift and go to state 314
    empty                          shift and go to state 197

state 314

    (132) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list . RBRACE close_current_scope
    (62) statement_list -> statement_list . statement
    (64) statement -> . declare_var
    (65) statement -> . assign_statement
    (66) statement -> . function_call
    (67) statement -> . if_condition
    (68) statement -> . while_loop
    (69) statement -> . return
    (70) statement -> . read
    (71) statement -> . sort_array
    (72) statement -> . print
    (88) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (89) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (90) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (91) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (83) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (131) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (134) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (84) return -> . RETURN mega_expression validate_return SEMICOLON
    (148) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (142) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (143) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (145) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (128) reference -> . ID check_variable_exists add_id_type_to_stack
    (129) reference -> . array_reference
    (130) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 315
    VAR             shift and go to state 12
    ID              shift and go to state 218
    IF              shift and go to state 219
    WHILE           shift and go to state 220
    RETURN          shift and go to state 221
    READ            shift and go to state 222
    SORT            shift and go to state 223
    PRINT           shift and go to state 34

    statement                      shift and go to state 208
    declare_var                    shift and go to state 209
    assign_statement               shift and go to state 210
    function_call                  shift and go to state 211
    if_condition                   shift and go to state 212
    while_loop                     shift and go to state 213
    return                         shift and go to state 214
    read                           shift and go to state 215
    sort_array                     shift and go to state 216
    print                          shift and go to state 217
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 315

    (132) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 316

state 316

    (132) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .

    RBRACE          reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    VAR             reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ID              reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    IF              reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    WHILE           reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    RETURN          reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    READ            reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    SORT            reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    PRINT           reduce using rule 132 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)

