Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     close_current_scope -> <empty>
Rule 3     set_func_return_type -> <empty>
Rule 4     new_function_scope -> <empty>
Rule 5     init_param -> <empty>
Rule 6     function_start_quad -> <empty>
Rule 7     endfunc_quad -> <empty>
Rule 8     init_func_call -> <empty>
Rule 9     increment_argument_counter -> <empty>
Rule 10    check_arg_count_type -> <empty>
Rule 11    create_gosub_quad -> <empty>
Rule 12    validate_return -> <empty>
Rule 13    add_operator_to_stack -> <empty>
Rule 14    set_current_type -> <empty>
Rule 15    init_variable -> <empty>
Rule 16    check_variable_exists -> <empty>
Rule 17    init_array -> <empty>
Rule 18    init_array_size -> <empty>
Rule 19    init_array_variable -> <empty>
Rule 20    add_id_type_to_stack -> <empty>
Rule 21    add_float_type_to_stack -> <empty>
Rule 22    add_int_type_to_stack -> <empty>
Rule 23    add_string_type_stack -> <empty>
Rule 24    add_boolean_type_to_stack -> <empty>
Rule 25    process_relational_operator -> <empty>
Rule 26    process_plus_minus_operators -> <empty>
Rule 27    process_mult_div_operators -> <empty>
Rule 28    array_name_reference -> <empty>
Rule 29    array_reference_value -> <empty>
Rule 30    add_separator -> <empty>
Rule 31    remove_separator -> <empty>
Rule 32    create_gotof_quad -> <empty>
Rule 33    goto_skip_else -> <empty>
Rule 34    goto_end_position -> <empty>
Rule 35    goto_return_position -> <empty>
Rule 36    return_end_jump_position -> <empty>
Rule 37    goto_main -> <empty>
Rule 38    main_quad -> <empty>
Rule 39    check_absolute_argument_value -> <empty>
Rule 40    check_trunc_argument_value -> <empty>
Rule 41    check_sqrt_argument_value -> <empty>
Rule 42    substr_quad -> <empty>
Rule 43    check_to_lower_argument_value -> <empty>
Rule 44    check_to_upper_argument_value -> <empty>
Rule 45    check_avg_argument_value -> <empty>
Rule 46    check_sum_argument_value -> <empty>
Rule 47    check_max_argument_value -> <empty>
Rule 48    check_min_argument_value -> <empty>
Rule 49    check_len_argument_value -> <empty>
Rule 50    check_sort_argument_value -> <empty>
Rule 51    check_find_argument_value -> <empty>
Rule 52    print_value -> <empty>
Rule 53    read_value -> <empty>
Rule 54    end_program -> <empty>
Rule 55    program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program
Rule 56    global_vars -> global_vars global_vars_actions
Rule 57    global_vars -> empty
Rule 58    global_vars_actions -> declare_var
Rule 59    global_vars_actions -> assign_statement
Rule 60    global_declaration -> global_declaration global_statement
Rule 61    global_declaration -> empty
Rule 62    global_statement -> declare_function
Rule 63    global_statement -> declare_function_void
Rule 64    global_statement -> print
Rule 65    main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
Rule 66    statement_list -> statement_list statement
Rule 67    statement_list -> empty
Rule 68    statement -> declare_var
Rule 69    statement -> assign_statement
Rule 70    statement -> function_call
Rule 71    statement -> if_condition
Rule 72    statement -> while_loop
Rule 73    statement -> return
Rule 74    statement -> read
Rule 75    statement -> sort_array
Rule 76    statement -> print
Rule 77    declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 78    declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
Rule 79    function_type -> FLOAT_TYPE set_func_return_type
Rule 80    function_type -> INT_TYPE set_func_return_type
Rule 81    function_type -> STRING_TYPE set_func_return_type
Rule 82    function_type -> BOOL_TYPE set_func_return_type
Rule 83    params -> param
Rule 84    params -> param COMMA params
Rule 85    param -> var_type ID init_param
Rule 86    function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
Rule 87    function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
Rule 88    return -> RETURN mega_expression validate_return SEMICOLON
Rule 89    arg_list -> arg
Rule 90    arg_list -> arg COMMA increment_argument_counter arg_list
Rule 91    arg -> mega_expression check_arg_count_type
Rule 92    declare_var -> VAR var_type ID init_variable SEMICOLON
Rule 93    declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
Rule 94    assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 95    assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON
Rule 96    var_type -> FLOAT_TYPE set_current_type
Rule 97    var_type -> INT_TYPE set_current_type
Rule 98    var_type -> STRING_TYPE set_current_type
Rule 99    var_type -> BOOL_TYPE set_current_type
Rule 100   relational_operator -> GREATERTHAN add_operator_to_stack
Rule 101   relational_operator -> LESSTHAN add_operator_to_stack
Rule 102   relational_operator -> EQUALEQUAL add_operator_to_stack
Rule 103   relational_operator -> LESSTHANOREQUAL add_operator_to_stack
Rule 104   relational_operator -> GREATERTHANOREQUAL add_operator_to_stack
Rule 105   relational_operator -> NOTEQUAL add_operator_to_stack
Rule 106   mega_expression -> expression
Rule 107   mega_expression -> expression relational_operator expression process_relational_operator
Rule 108   expression -> term process_plus_minus_operators
Rule 109   expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression
Rule 110   expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression
Rule 111   term -> factor process_mult_div_operators
Rule 112   term -> factor process_mult_div_operators TIMES add_operator_to_stack term
Rule 113   term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term
Rule 114   factor -> LPARENT add_separator mega_expression RPARENT remove_separator
Rule 115   factor -> value
Rule 116   value -> literal
Rule 117   value -> reference
Rule 118   value -> function_call_value
Rule 119   value -> absolute_call_value
Rule 120   value -> sqrt_call_value
Rule 121   value -> trunc_call_value
Rule 122   value -> substr_call_value
Rule 123   value -> to_lower_call_value
Rule 124   value -> to_upper_call_value
Rule 125   value -> avg_call_value
Rule 126   value -> find_array_value
Rule 127   value -> max_array_value
Rule 128   value -> min_array_value
Rule 129   value -> sum_array_value
Rule 130   value -> len_array_value
Rule 131   literal -> FLOAT add_float_type_to_stack
Rule 132   literal -> INT add_int_type_to_stack
Rule 133   literal -> STRING add_string_type_stack
Rule 134   literal -> TRUE add_boolean_type_to_stack
Rule 135   literal -> FALSE add_boolean_type_to_stack
Rule 136   reference -> ID check_variable_exists add_id_type_to_stack
Rule 137   reference -> array_reference
Rule 138   array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
Rule 139   if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
Rule 140   else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
Rule 141   else_condition -> empty
Rule 142   while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
Rule 143   absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
Rule 144   sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
Rule 145   trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
Rule 146   to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
Rule 147   to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
Rule 148   substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
Rule 149   avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
Rule 150   sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
Rule 151   sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
Rule 152   find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
Rule 153   max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
Rule 154   min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
Rule 155   sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
Rule 156   len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
Rule 157   print -> PRINT LPARENT print_many RPARENT SEMICOLON
Rule 158   print_many -> mega_expression print_value
Rule 159   print_many -> mega_expression print_value COMMA print_many
Rule 160   read -> READ LPARENT reference read_value RPARENT SEMICOLON
Rule 161   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 143
AVG                  : 149
BOOL_TYPE            : 82 99
COMMA                : 84 90 148 148 150 151 152 159
DIVIDE               : 113
ELSE                 : 140
EQUAL                : 94 95
EQUALEQUAL           : 102
FALSE                : 135
FIND                 : 152
FLOAT                : 131
FLOAT_TYPE           : 79 96
FUNCTION             : 77 78
GREATERTHAN          : 77 78 100 151
GREATERTHANOREQUAL   : 104
ID                   : 55 77 78 85 86 87 92 93 94 136 138 149 150 151 152 153 154 155 156
IF                   : 139
INT                  : 93 132
INT_TYPE             : 80 97
LBRACE               : 65 77 78 139 140 142
LBRACKET             : 93 138
LEN                  : 156
LESSTHAN             : 77 78 101 150
LESSTHANOREQUAL      : 103
LPARENT              : 65 77 78 86 87 114 139 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 160
MAIN                 : 65
MAX                  : 153
MIN                  : 154
MINUS                : 110
NOTEQUAL             : 105
PLUS                 : 109
PRINT                : 157
PROGRAM              : 55
RBRACE               : 65 77 78 139 140 142
RBRACKET             : 93 138
READ                 : 160
RETURN               : 88
RPARENT              : 65 77 78 86 87 114 139 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 160
SEMICOLON            : 55 65 77 78 87 88 92 93 94 95 150 151 157 160
SORT                 : 150 151
SQRT                 : 144
STRING               : 133
STRING_TYPE          : 81 98
SUBSTR               : 148
SUM                  : 155
TIMES                : 112
TOLOWER              : 146
TOUPPER              : 147
TRUE                 : 134
TRUNC                : 145
VAR                  : 92 93 94
VOID_TYPE            : 78
WHILE                : 142
error                : 

Nonterminals, with rules where they appear

absolute_call_value  : 119
add_boolean_type_to_stack : 134 135
add_float_type_to_stack : 131
add_id_type_to_stack : 94 136 149 150 151 152 153 154 155 156
add_int_type_to_stack : 132
add_operator_to_stack : 94 95 100 101 102 103 104 105 109 110 112 113 150 151
add_separator        : 114 138
add_string_type_stack : 133
arg                  : 89 90
arg_list             : 86 87 90
array_name_reference : 138
array_reference      : 137
array_reference_value : 138
assign_statement     : 59 69
avg_call_value       : 125
check_absolute_argument_value : 143
check_arg_count_type : 91
check_avg_argument_value : 149
check_find_argument_value : 152
check_len_argument_value : 156
check_max_argument_value : 153
check_min_argument_value : 154
check_sort_argument_value : 150 151
check_sqrt_argument_value : 144
check_sum_argument_value : 155
check_to_lower_argument_value : 146
check_to_upper_argument_value : 147
check_trunc_argument_value : 145
check_variable_exists : 136
close_current_scope  : 65 77 78 139 140 142
create_gosub_quad    : 86 87
create_gotof_quad    : 139 142
declare_function     : 62
declare_function_void : 63
declare_var          : 58 68
else_condition       : 139
empty                : 57 61 67 141
end_program          : 55
endfunc_quad         : 77 78
expression           : 106 107 107 109 110
factor               : 111 112 113
find_array_value     : 126
function_call        : 70
function_call_value  : 118
function_start_quad  : 77 78
function_type        : 77
global_declaration   : 55 60
global_statement     : 60
global_vars          : 55 56
global_vars_actions  : 56
goto_end_position    : 139
goto_main            : 55
goto_return_position : 142
goto_skip_else       : 140
if_condition         : 71
increment_argument_counter : 90
init_array           : 93
init_array_size      : 93
init_array_variable  : 93
init_func_call       : 86 87
init_param           : 85
init_variable        : 92 94
len_array_value      : 130
literal              : 116
main_declaration     : 55
main_quad            : 65
max_array_value      : 127
mega_expression      : 88 91 94 95 114 138 139 142 143 144 145 146 147 148 148 152 158 159
min_array_value      : 128
new_function_scope   : 77 78
new_scope            : 65 139 140 142
param                : 83 84
params               : 77 78 84
print                : 64 76
print_many           : 157 159
print_value          : 158 159
process_mult_div_operators : 111 112 113
process_plus_minus_operators : 108 109 110
process_relational_operator : 107
program              : 0
read                 : 74
read_value           : 160
reference            : 95 117 148 160
relational_operator  : 107
remove_separator     : 114 138
return               : 73 77
return_end_jump_position : 142
set_current_type     : 96 97 98 99
set_func_return_type : 78 79 80 81 82
sort_array           : 75
sqrt_call_value      : 120
statement            : 66
statement_list       : 65 66 77 78 139 140 142
substr_call_value    : 122
substr_quad          : 148
sum_array_value      : 129
term                 : 108 109 110 112 113
to_lower_call_value  : 123
to_upper_call_value  : 124
trunc_call_value     : 121
validate_return      : 88
value                : 115
var_type             : 85 92 93 94
while_loop           : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (55) program -> . PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (55) program -> PROGRAM . ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    ID              shift and go to state 3


state 3

    (55) program -> PROGRAM ID . SEMICOLON global_vars goto_main global_declaration main_declaration end_program

    SEMICOLON       shift and go to state 4


state 4

    (55) program -> PROGRAM ID SEMICOLON . global_vars goto_main global_declaration main_declaration end_program
    (56) global_vars -> . global_vars global_vars_actions
    (57) global_vars -> . empty
    (161) empty -> .

    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    MAIN            reduce using rule 161 (empty -> .)
    FUNCTION        reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    global_vars                    shift and go to state 5
    empty                          shift and go to state 6

state 5

    (55) program -> PROGRAM ID SEMICOLON global_vars . goto_main global_declaration main_declaration end_program
    (56) global_vars -> global_vars . global_vars_actions
    (37) goto_main -> .
    (58) global_vars_actions -> . declare_var
    (59) global_vars_actions -> . assign_statement
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    MAIN            reduce using rule 37 (goto_main -> .)
    FUNCTION        reduce using rule 37 (goto_main -> .)
    PRINT           reduce using rule 37 (goto_main -> .)
    VAR             shift and go to state 12
    ID              shift and go to state 7

    goto_main                      shift and go to state 8
    global_vars_actions            shift and go to state 9
    declare_var                    shift and go to state 10
    assign_statement               shift and go to state 11
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 6

    (57) global_vars -> empty .

    VAR             reduce using rule 57 (global_vars -> empty .)
    ID              reduce using rule 57 (global_vars -> empty .)
    MAIN            reduce using rule 57 (global_vars -> empty .)
    FUNCTION        reduce using rule 57 (global_vars -> empty .)
    PRINT           reduce using rule 57 (global_vars -> empty .)


state 7

    (136) reference -> ID . check_variable_exists add_id_type_to_stack
    (138) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 8

    (55) program -> PROGRAM ID SEMICOLON global_vars goto_main . global_declaration main_declaration end_program
    (60) global_declaration -> . global_declaration global_statement
    (61) global_declaration -> . empty
    (161) empty -> .

    MAIN            reduce using rule 161 (empty -> .)
    FUNCTION        reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    global_declaration             shift and go to state 17
    empty                          shift and go to state 18

state 9

    (56) global_vars -> global_vars global_vars_actions .

    VAR             reduce using rule 56 (global_vars -> global_vars global_vars_actions .)
    ID              reduce using rule 56 (global_vars -> global_vars global_vars_actions .)
    MAIN            reduce using rule 56 (global_vars -> global_vars global_vars_actions .)
    FUNCTION        reduce using rule 56 (global_vars -> global_vars global_vars_actions .)
    PRINT           reduce using rule 56 (global_vars -> global_vars global_vars_actions .)


state 10

    (58) global_vars_actions -> declare_var .

    VAR             reduce using rule 58 (global_vars_actions -> declare_var .)
    ID              reduce using rule 58 (global_vars_actions -> declare_var .)
    MAIN            reduce using rule 58 (global_vars_actions -> declare_var .)
    FUNCTION        reduce using rule 58 (global_vars_actions -> declare_var .)
    PRINT           reduce using rule 58 (global_vars_actions -> declare_var .)


state 11

    (59) global_vars_actions -> assign_statement .

    VAR             reduce using rule 59 (global_vars_actions -> assign_statement .)
    ID              reduce using rule 59 (global_vars_actions -> assign_statement .)
    MAIN            reduce using rule 59 (global_vars_actions -> assign_statement .)
    FUNCTION        reduce using rule 59 (global_vars_actions -> assign_statement .)
    PRINT           reduce using rule 59 (global_vars_actions -> assign_statement .)


state 12

    (92) declare_var -> VAR . var_type ID init_variable SEMICOLON
    (93) declare_var -> VAR . var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> VAR . var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (96) var_type -> . FLOAT_TYPE set_current_type
    (97) var_type -> . INT_TYPE set_current_type
    (98) var_type -> . STRING_TYPE set_current_type
    (99) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    var_type                       shift and go to state 19

state 13

    (95) assign_statement -> reference . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 24


state 14

    (137) reference -> array_reference .

    EQUAL           reduce using rule 137 (reference -> array_reference .)
    TIMES           reduce using rule 137 (reference -> array_reference .)
    DIVIDE          reduce using rule 137 (reference -> array_reference .)
    PLUS            reduce using rule 137 (reference -> array_reference .)
    MINUS           reduce using rule 137 (reference -> array_reference .)
    GREATERTHAN     reduce using rule 137 (reference -> array_reference .)
    LESSTHAN        reduce using rule 137 (reference -> array_reference .)
    EQUALEQUAL      reduce using rule 137 (reference -> array_reference .)
    LESSTHANOREQUAL reduce using rule 137 (reference -> array_reference .)
    GREATERTHANOREQUAL reduce using rule 137 (reference -> array_reference .)
    NOTEQUAL        reduce using rule 137 (reference -> array_reference .)
    SEMICOLON       reduce using rule 137 (reference -> array_reference .)
    RBRACKET        reduce using rule 137 (reference -> array_reference .)
    COMMA           reduce using rule 137 (reference -> array_reference .)
    RPARENT         reduce using rule 137 (reference -> array_reference .)


state 15

    (136) reference -> ID check_variable_exists . add_id_type_to_stack
    (20) add_id_type_to_stack -> .

    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)
    TIMES           reduce using rule 20 (add_id_type_to_stack -> .)
    DIVIDE          reduce using rule 20 (add_id_type_to_stack -> .)
    PLUS            reduce using rule 20 (add_id_type_to_stack -> .)
    MINUS           reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHAN     reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHAN        reduce using rule 20 (add_id_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 20 (add_id_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 20 (add_id_type_to_stack -> .)
    NOTEQUAL        reduce using rule 20 (add_id_type_to_stack -> .)
    SEMICOLON       reduce using rule 20 (add_id_type_to_stack -> .)
    RBRACKET        reduce using rule 20 (add_id_type_to_stack -> .)
    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)
    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 25

state 16

    (138) array_reference -> ID array_name_reference . LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LBRACKET        shift and go to state 26


state 17

    (55) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration . main_declaration end_program
    (60) global_declaration -> global_declaration . global_statement
    (65) main_declaration -> . MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (62) global_statement -> . declare_function
    (63) global_statement -> . declare_function_void
    (64) global_statement -> . print
    (77) declare_function -> . FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (78) declare_function_void -> . FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON

    MAIN            shift and go to state 29
    FUNCTION        shift and go to state 33
    PRINT           shift and go to state 34

    main_declaration               shift and go to state 27
    global_statement               shift and go to state 28
    declare_function               shift and go to state 30
    declare_function_void          shift and go to state 31
    print                          shift and go to state 32

state 18

    (61) global_declaration -> empty .

    MAIN            reduce using rule 61 (global_declaration -> empty .)
    FUNCTION        reduce using rule 61 (global_declaration -> empty .)
    PRINT           reduce using rule 61 (global_declaration -> empty .)


state 19

    (92) declare_var -> VAR var_type . ID init_variable SEMICOLON
    (93) declare_var -> VAR var_type . ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> VAR var_type . ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON

    ID              shift and go to state 35


state 20

    (96) var_type -> FLOAT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 36

state 21

    (97) var_type -> INT_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 37

state 22

    (98) var_type -> STRING_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 38

state 23

    (99) var_type -> BOOL_TYPE . set_current_type
    (14) set_current_type -> .

    ID              reduce using rule 14 (set_current_type -> .)

    set_current_type               shift and go to state 39

state 24

    (95) assign_statement -> reference EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 40

state 25

    (136) reference -> ID check_variable_exists add_id_type_to_stack .

    EQUAL           reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    TIMES           reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    DIVIDE          reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    PLUS            reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    MINUS           reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHAN     reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHAN        reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    EQUALEQUAL      reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    NOTEQUAL        reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    SEMICOLON       reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RBRACKET        reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    COMMA           reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)
    RPARENT         reduce using rule 136 (reference -> ID check_variable_exists add_id_type_to_stack .)


state 26

    (138) array_reference -> ID array_name_reference LBRACKET . add_separator mega_expression RBRACKET remove_separator array_reference_value
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)
    FIND            reduce using rule 30 (add_separator -> .)
    MAX             reduce using rule 30 (add_separator -> .)
    MIN             reduce using rule 30 (add_separator -> .)
    SUM             reduce using rule 30 (add_separator -> .)
    LEN             reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 41

state 27

    (55) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration . end_program
    (54) end_program -> .

    $end            reduce using rule 54 (end_program -> .)

    end_program                    shift and go to state 42

state 28

    (60) global_declaration -> global_declaration global_statement .

    MAIN            reduce using rule 60 (global_declaration -> global_declaration global_statement .)
    FUNCTION        reduce using rule 60 (global_declaration -> global_declaration global_statement .)
    PRINT           reduce using rule 60 (global_declaration -> global_declaration global_statement .)


state 29

    (65) main_declaration -> MAIN . main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON
    (38) main_quad -> .

    LPARENT         reduce using rule 38 (main_quad -> .)

    main_quad                      shift and go to state 43

state 30

    (62) global_statement -> declare_function .

    MAIN            reduce using rule 62 (global_statement -> declare_function .)
    FUNCTION        reduce using rule 62 (global_statement -> declare_function .)
    PRINT           reduce using rule 62 (global_statement -> declare_function .)


state 31

    (63) global_statement -> declare_function_void .

    MAIN            reduce using rule 63 (global_statement -> declare_function_void .)
    FUNCTION        reduce using rule 63 (global_statement -> declare_function_void .)
    PRINT           reduce using rule 63 (global_statement -> declare_function_void .)


state 32

    (64) global_statement -> print .

    MAIN            reduce using rule 64 (global_statement -> print .)
    FUNCTION        reduce using rule 64 (global_statement -> print .)
    PRINT           reduce using rule 64 (global_statement -> print .)


state 33

    (77) declare_function -> FUNCTION . ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (78) declare_function_void -> FUNCTION . ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    ID              shift and go to state 44


state 34

    (157) print -> PRINT . LPARENT print_many RPARENT SEMICOLON

    LPARENT         shift and go to state 45


state 35

    (92) declare_var -> VAR var_type ID . init_variable SEMICOLON
    (93) declare_var -> VAR var_type ID . init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> VAR var_type ID . init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (15) init_variable -> .
    (17) init_array -> .

    SEMICOLON       reduce using rule 15 (init_variable -> .)
    EQUAL           reduce using rule 15 (init_variable -> .)
    LBRACKET        reduce using rule 17 (init_array -> .)

    init_variable                  shift and go to state 46
    init_array                     shift and go to state 47

state 36

    (96) var_type -> FLOAT_TYPE set_current_type .

    ID              reduce using rule 96 (var_type -> FLOAT_TYPE set_current_type .)


state 37

    (97) var_type -> INT_TYPE set_current_type .

    ID              reduce using rule 97 (var_type -> INT_TYPE set_current_type .)


state 38

    (98) var_type -> STRING_TYPE set_current_type .

    ID              reduce using rule 98 (var_type -> STRING_TYPE set_current_type .)


state 39

    (99) var_type -> BOOL_TYPE set_current_type .

    ID              reduce using rule 99 (var_type -> BOOL_TYPE set_current_type .)


state 40

    (95) assign_statement -> reference EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    reference                      shift and go to state 48
    mega_expression                shift and go to state 49
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 41

    (138) array_reference -> ID array_name_reference LBRACKET add_separator . mega_expression RBRACKET remove_separator array_reference_value
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 87
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 42

    (55) program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .

    $end            reduce using rule 55 (program -> PROGRAM ID SEMICOLON global_vars goto_main global_declaration main_declaration end_program .)


state 43

    (65) main_declaration -> MAIN main_quad . LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LPARENT         shift and go to state 88


state 44

    (77) declare_function -> FUNCTION ID . new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (78) declare_function_void -> FUNCTION ID . new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (4) new_function_scope -> .

    LESSTHAN        reduce using rule 4 (new_function_scope -> .)

    new_function_scope             shift and go to state 89

state 45

    (157) print -> PRINT LPARENT . print_many RPARENT SEMICOLON
    (158) print_many -> . mega_expression print_value
    (159) print_many -> . mega_expression print_value COMMA print_many
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    print_many                     shift and go to state 90
    mega_expression                shift and go to state 91
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 46

    (92) declare_var -> VAR var_type ID init_variable . SEMICOLON
    (94) assign_statement -> VAR var_type ID init_variable . add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (20) add_id_type_to_stack -> .

    SEMICOLON       shift and go to state 92
    EQUAL           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 93

state 47

    (93) declare_var -> VAR var_type ID init_array . LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON

    LBRACKET        shift and go to state 94


state 48

    (117) value -> reference .

    TIMES           reduce using rule 117 (value -> reference .)
    DIVIDE          reduce using rule 117 (value -> reference .)
    PLUS            reduce using rule 117 (value -> reference .)
    MINUS           reduce using rule 117 (value -> reference .)
    GREATERTHAN     reduce using rule 117 (value -> reference .)
    LESSTHAN        reduce using rule 117 (value -> reference .)
    EQUALEQUAL      reduce using rule 117 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 117 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 117 (value -> reference .)
    NOTEQUAL        reduce using rule 117 (value -> reference .)
    SEMICOLON       reduce using rule 117 (value -> reference .)
    RBRACKET        reduce using rule 117 (value -> reference .)
    COMMA           reduce using rule 117 (value -> reference .)
    RPARENT         reduce using rule 117 (value -> reference .)


state 49

    (95) assign_statement -> reference EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 95


state 50

    (106) mega_expression -> expression .
    (107) mega_expression -> expression . relational_operator expression process_relational_operator
    (100) relational_operator -> . GREATERTHAN add_operator_to_stack
    (101) relational_operator -> . LESSTHAN add_operator_to_stack
    (102) relational_operator -> . EQUALEQUAL add_operator_to_stack
    (103) relational_operator -> . LESSTHANOREQUAL add_operator_to_stack
    (104) relational_operator -> . GREATERTHANOREQUAL add_operator_to_stack
    (105) relational_operator -> . NOTEQUAL add_operator_to_stack

    SEMICOLON       reduce using rule 106 (mega_expression -> expression .)
    RBRACKET        reduce using rule 106 (mega_expression -> expression .)
    COMMA           reduce using rule 106 (mega_expression -> expression .)
    RPARENT         reduce using rule 106 (mega_expression -> expression .)
    GREATERTHAN     shift and go to state 97
    LESSTHAN        shift and go to state 98
    EQUALEQUAL      shift and go to state 99
    LESSTHANOREQUAL shift and go to state 100
    GREATERTHANOREQUAL shift and go to state 101
    NOTEQUAL        shift and go to state 102

    relational_operator            shift and go to state 96

state 51

    (108) expression -> term . process_plus_minus_operators
    (109) expression -> term . process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> term . process_plus_minus_operators MINUS add_operator_to_stack expression
    (26) process_plus_minus_operators -> .

    PLUS            reduce using rule 26 (process_plus_minus_operators -> .)
    MINUS           reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHAN     reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHAN        reduce using rule 26 (process_plus_minus_operators -> .)
    EQUALEQUAL      reduce using rule 26 (process_plus_minus_operators -> .)
    LESSTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    GREATERTHANOREQUAL reduce using rule 26 (process_plus_minus_operators -> .)
    NOTEQUAL        reduce using rule 26 (process_plus_minus_operators -> .)
    SEMICOLON       reduce using rule 26 (process_plus_minus_operators -> .)
    RBRACKET        reduce using rule 26 (process_plus_minus_operators -> .)
    COMMA           reduce using rule 26 (process_plus_minus_operators -> .)
    RPARENT         reduce using rule 26 (process_plus_minus_operators -> .)

    process_plus_minus_operators   shift and go to state 103

state 52

    (111) term -> factor . process_mult_div_operators
    (112) term -> factor . process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> factor . process_mult_div_operators DIVIDE add_operator_to_stack term
    (27) process_mult_div_operators -> .

    TIMES           reduce using rule 27 (process_mult_div_operators -> .)
    DIVIDE          reduce using rule 27 (process_mult_div_operators -> .)
    PLUS            reduce using rule 27 (process_mult_div_operators -> .)
    MINUS           reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHAN     reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHAN        reduce using rule 27 (process_mult_div_operators -> .)
    EQUALEQUAL      reduce using rule 27 (process_mult_div_operators -> .)
    LESSTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    GREATERTHANOREQUAL reduce using rule 27 (process_mult_div_operators -> .)
    NOTEQUAL        reduce using rule 27 (process_mult_div_operators -> .)
    SEMICOLON       reduce using rule 27 (process_mult_div_operators -> .)
    RBRACKET        reduce using rule 27 (process_mult_div_operators -> .)
    COMMA           reduce using rule 27 (process_mult_div_operators -> .)
    RPARENT         reduce using rule 27 (process_mult_div_operators -> .)

    process_mult_div_operators     shift and go to state 104

state 53

    (114) factor -> LPARENT . add_separator mega_expression RPARENT remove_separator
    (30) add_separator -> .

    LPARENT         reduce using rule 30 (add_separator -> .)
    FLOAT           reduce using rule 30 (add_separator -> .)
    INT             reduce using rule 30 (add_separator -> .)
    STRING          reduce using rule 30 (add_separator -> .)
    TRUE            reduce using rule 30 (add_separator -> .)
    FALSE           reduce using rule 30 (add_separator -> .)
    ID              reduce using rule 30 (add_separator -> .)
    ABSOLUTE        reduce using rule 30 (add_separator -> .)
    SQRT            reduce using rule 30 (add_separator -> .)
    TRUNC           reduce using rule 30 (add_separator -> .)
    SUBSTR          reduce using rule 30 (add_separator -> .)
    TOLOWER         reduce using rule 30 (add_separator -> .)
    TOUPPER         reduce using rule 30 (add_separator -> .)
    AVG             reduce using rule 30 (add_separator -> .)
    FIND            reduce using rule 30 (add_separator -> .)
    MAX             reduce using rule 30 (add_separator -> .)
    MIN             reduce using rule 30 (add_separator -> .)
    SUM             reduce using rule 30 (add_separator -> .)
    LEN             reduce using rule 30 (add_separator -> .)

    add_separator                  shift and go to state 105

state 54

    (115) factor -> value .

    TIMES           reduce using rule 115 (factor -> value .)
    DIVIDE          reduce using rule 115 (factor -> value .)
    PLUS            reduce using rule 115 (factor -> value .)
    MINUS           reduce using rule 115 (factor -> value .)
    GREATERTHAN     reduce using rule 115 (factor -> value .)
    LESSTHAN        reduce using rule 115 (factor -> value .)
    EQUALEQUAL      reduce using rule 115 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 115 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 115 (factor -> value .)
    NOTEQUAL        reduce using rule 115 (factor -> value .)
    SEMICOLON       reduce using rule 115 (factor -> value .)
    RBRACKET        reduce using rule 115 (factor -> value .)
    COMMA           reduce using rule 115 (factor -> value .)
    RPARENT         reduce using rule 115 (factor -> value .)


state 55

    (116) value -> literal .

    TIMES           reduce using rule 116 (value -> literal .)
    DIVIDE          reduce using rule 116 (value -> literal .)
    PLUS            reduce using rule 116 (value -> literal .)
    MINUS           reduce using rule 116 (value -> literal .)
    GREATERTHAN     reduce using rule 116 (value -> literal .)
    LESSTHAN        reduce using rule 116 (value -> literal .)
    EQUALEQUAL      reduce using rule 116 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 116 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 116 (value -> literal .)
    NOTEQUAL        reduce using rule 116 (value -> literal .)
    SEMICOLON       reduce using rule 116 (value -> literal .)
    RBRACKET        reduce using rule 116 (value -> literal .)
    COMMA           reduce using rule 116 (value -> literal .)
    RPARENT         reduce using rule 116 (value -> literal .)


state 56

    (118) value -> function_call_value .

    TIMES           reduce using rule 118 (value -> function_call_value .)
    DIVIDE          reduce using rule 118 (value -> function_call_value .)
    PLUS            reduce using rule 118 (value -> function_call_value .)
    MINUS           reduce using rule 118 (value -> function_call_value .)
    GREATERTHAN     reduce using rule 118 (value -> function_call_value .)
    LESSTHAN        reduce using rule 118 (value -> function_call_value .)
    EQUALEQUAL      reduce using rule 118 (value -> function_call_value .)
    LESSTHANOREQUAL reduce using rule 118 (value -> function_call_value .)
    GREATERTHANOREQUAL reduce using rule 118 (value -> function_call_value .)
    NOTEQUAL        reduce using rule 118 (value -> function_call_value .)
    SEMICOLON       reduce using rule 118 (value -> function_call_value .)
    RBRACKET        reduce using rule 118 (value -> function_call_value .)
    COMMA           reduce using rule 118 (value -> function_call_value .)
    RPARENT         reduce using rule 118 (value -> function_call_value .)


state 57

    (119) value -> absolute_call_value .

    TIMES           reduce using rule 119 (value -> absolute_call_value .)
    DIVIDE          reduce using rule 119 (value -> absolute_call_value .)
    PLUS            reduce using rule 119 (value -> absolute_call_value .)
    MINUS           reduce using rule 119 (value -> absolute_call_value .)
    GREATERTHAN     reduce using rule 119 (value -> absolute_call_value .)
    LESSTHAN        reduce using rule 119 (value -> absolute_call_value .)
    EQUALEQUAL      reduce using rule 119 (value -> absolute_call_value .)
    LESSTHANOREQUAL reduce using rule 119 (value -> absolute_call_value .)
    GREATERTHANOREQUAL reduce using rule 119 (value -> absolute_call_value .)
    NOTEQUAL        reduce using rule 119 (value -> absolute_call_value .)
    SEMICOLON       reduce using rule 119 (value -> absolute_call_value .)
    RBRACKET        reduce using rule 119 (value -> absolute_call_value .)
    COMMA           reduce using rule 119 (value -> absolute_call_value .)
    RPARENT         reduce using rule 119 (value -> absolute_call_value .)


state 58

    (120) value -> sqrt_call_value .

    TIMES           reduce using rule 120 (value -> sqrt_call_value .)
    DIVIDE          reduce using rule 120 (value -> sqrt_call_value .)
    PLUS            reduce using rule 120 (value -> sqrt_call_value .)
    MINUS           reduce using rule 120 (value -> sqrt_call_value .)
    GREATERTHAN     reduce using rule 120 (value -> sqrt_call_value .)
    LESSTHAN        reduce using rule 120 (value -> sqrt_call_value .)
    EQUALEQUAL      reduce using rule 120 (value -> sqrt_call_value .)
    LESSTHANOREQUAL reduce using rule 120 (value -> sqrt_call_value .)
    GREATERTHANOREQUAL reduce using rule 120 (value -> sqrt_call_value .)
    NOTEQUAL        reduce using rule 120 (value -> sqrt_call_value .)
    SEMICOLON       reduce using rule 120 (value -> sqrt_call_value .)
    RBRACKET        reduce using rule 120 (value -> sqrt_call_value .)
    COMMA           reduce using rule 120 (value -> sqrt_call_value .)
    RPARENT         reduce using rule 120 (value -> sqrt_call_value .)


state 59

    (121) value -> trunc_call_value .

    TIMES           reduce using rule 121 (value -> trunc_call_value .)
    DIVIDE          reduce using rule 121 (value -> trunc_call_value .)
    PLUS            reduce using rule 121 (value -> trunc_call_value .)
    MINUS           reduce using rule 121 (value -> trunc_call_value .)
    GREATERTHAN     reduce using rule 121 (value -> trunc_call_value .)
    LESSTHAN        reduce using rule 121 (value -> trunc_call_value .)
    EQUALEQUAL      reduce using rule 121 (value -> trunc_call_value .)
    LESSTHANOREQUAL reduce using rule 121 (value -> trunc_call_value .)
    GREATERTHANOREQUAL reduce using rule 121 (value -> trunc_call_value .)
    NOTEQUAL        reduce using rule 121 (value -> trunc_call_value .)
    SEMICOLON       reduce using rule 121 (value -> trunc_call_value .)
    RBRACKET        reduce using rule 121 (value -> trunc_call_value .)
    COMMA           reduce using rule 121 (value -> trunc_call_value .)
    RPARENT         reduce using rule 121 (value -> trunc_call_value .)


state 60

    (122) value -> substr_call_value .

    TIMES           reduce using rule 122 (value -> substr_call_value .)
    DIVIDE          reduce using rule 122 (value -> substr_call_value .)
    PLUS            reduce using rule 122 (value -> substr_call_value .)
    MINUS           reduce using rule 122 (value -> substr_call_value .)
    GREATERTHAN     reduce using rule 122 (value -> substr_call_value .)
    LESSTHAN        reduce using rule 122 (value -> substr_call_value .)
    EQUALEQUAL      reduce using rule 122 (value -> substr_call_value .)
    LESSTHANOREQUAL reduce using rule 122 (value -> substr_call_value .)
    GREATERTHANOREQUAL reduce using rule 122 (value -> substr_call_value .)
    NOTEQUAL        reduce using rule 122 (value -> substr_call_value .)
    SEMICOLON       reduce using rule 122 (value -> substr_call_value .)
    RBRACKET        reduce using rule 122 (value -> substr_call_value .)
    COMMA           reduce using rule 122 (value -> substr_call_value .)
    RPARENT         reduce using rule 122 (value -> substr_call_value .)


state 61

    (123) value -> to_lower_call_value .

    TIMES           reduce using rule 123 (value -> to_lower_call_value .)
    DIVIDE          reduce using rule 123 (value -> to_lower_call_value .)
    PLUS            reduce using rule 123 (value -> to_lower_call_value .)
    MINUS           reduce using rule 123 (value -> to_lower_call_value .)
    GREATERTHAN     reduce using rule 123 (value -> to_lower_call_value .)
    LESSTHAN        reduce using rule 123 (value -> to_lower_call_value .)
    EQUALEQUAL      reduce using rule 123 (value -> to_lower_call_value .)
    LESSTHANOREQUAL reduce using rule 123 (value -> to_lower_call_value .)
    GREATERTHANOREQUAL reduce using rule 123 (value -> to_lower_call_value .)
    NOTEQUAL        reduce using rule 123 (value -> to_lower_call_value .)
    SEMICOLON       reduce using rule 123 (value -> to_lower_call_value .)
    RBRACKET        reduce using rule 123 (value -> to_lower_call_value .)
    COMMA           reduce using rule 123 (value -> to_lower_call_value .)
    RPARENT         reduce using rule 123 (value -> to_lower_call_value .)


state 62

    (124) value -> to_upper_call_value .

    TIMES           reduce using rule 124 (value -> to_upper_call_value .)
    DIVIDE          reduce using rule 124 (value -> to_upper_call_value .)
    PLUS            reduce using rule 124 (value -> to_upper_call_value .)
    MINUS           reduce using rule 124 (value -> to_upper_call_value .)
    GREATERTHAN     reduce using rule 124 (value -> to_upper_call_value .)
    LESSTHAN        reduce using rule 124 (value -> to_upper_call_value .)
    EQUALEQUAL      reduce using rule 124 (value -> to_upper_call_value .)
    LESSTHANOREQUAL reduce using rule 124 (value -> to_upper_call_value .)
    GREATERTHANOREQUAL reduce using rule 124 (value -> to_upper_call_value .)
    NOTEQUAL        reduce using rule 124 (value -> to_upper_call_value .)
    SEMICOLON       reduce using rule 124 (value -> to_upper_call_value .)
    RBRACKET        reduce using rule 124 (value -> to_upper_call_value .)
    COMMA           reduce using rule 124 (value -> to_upper_call_value .)
    RPARENT         reduce using rule 124 (value -> to_upper_call_value .)


state 63

    (125) value -> avg_call_value .

    TIMES           reduce using rule 125 (value -> avg_call_value .)
    DIVIDE          reduce using rule 125 (value -> avg_call_value .)
    PLUS            reduce using rule 125 (value -> avg_call_value .)
    MINUS           reduce using rule 125 (value -> avg_call_value .)
    GREATERTHAN     reduce using rule 125 (value -> avg_call_value .)
    LESSTHAN        reduce using rule 125 (value -> avg_call_value .)
    EQUALEQUAL      reduce using rule 125 (value -> avg_call_value .)
    LESSTHANOREQUAL reduce using rule 125 (value -> avg_call_value .)
    GREATERTHANOREQUAL reduce using rule 125 (value -> avg_call_value .)
    NOTEQUAL        reduce using rule 125 (value -> avg_call_value .)
    SEMICOLON       reduce using rule 125 (value -> avg_call_value .)
    RBRACKET        reduce using rule 125 (value -> avg_call_value .)
    COMMA           reduce using rule 125 (value -> avg_call_value .)
    RPARENT         reduce using rule 125 (value -> avg_call_value .)


state 64

    (126) value -> find_array_value .

    TIMES           reduce using rule 126 (value -> find_array_value .)
    DIVIDE          reduce using rule 126 (value -> find_array_value .)
    PLUS            reduce using rule 126 (value -> find_array_value .)
    MINUS           reduce using rule 126 (value -> find_array_value .)
    GREATERTHAN     reduce using rule 126 (value -> find_array_value .)
    LESSTHAN        reduce using rule 126 (value -> find_array_value .)
    EQUALEQUAL      reduce using rule 126 (value -> find_array_value .)
    LESSTHANOREQUAL reduce using rule 126 (value -> find_array_value .)
    GREATERTHANOREQUAL reduce using rule 126 (value -> find_array_value .)
    NOTEQUAL        reduce using rule 126 (value -> find_array_value .)
    SEMICOLON       reduce using rule 126 (value -> find_array_value .)
    RBRACKET        reduce using rule 126 (value -> find_array_value .)
    COMMA           reduce using rule 126 (value -> find_array_value .)
    RPARENT         reduce using rule 126 (value -> find_array_value .)


state 65

    (127) value -> max_array_value .

    TIMES           reduce using rule 127 (value -> max_array_value .)
    DIVIDE          reduce using rule 127 (value -> max_array_value .)
    PLUS            reduce using rule 127 (value -> max_array_value .)
    MINUS           reduce using rule 127 (value -> max_array_value .)
    GREATERTHAN     reduce using rule 127 (value -> max_array_value .)
    LESSTHAN        reduce using rule 127 (value -> max_array_value .)
    EQUALEQUAL      reduce using rule 127 (value -> max_array_value .)
    LESSTHANOREQUAL reduce using rule 127 (value -> max_array_value .)
    GREATERTHANOREQUAL reduce using rule 127 (value -> max_array_value .)
    NOTEQUAL        reduce using rule 127 (value -> max_array_value .)
    SEMICOLON       reduce using rule 127 (value -> max_array_value .)
    RBRACKET        reduce using rule 127 (value -> max_array_value .)
    COMMA           reduce using rule 127 (value -> max_array_value .)
    RPARENT         reduce using rule 127 (value -> max_array_value .)


state 66

    (128) value -> min_array_value .

    TIMES           reduce using rule 128 (value -> min_array_value .)
    DIVIDE          reduce using rule 128 (value -> min_array_value .)
    PLUS            reduce using rule 128 (value -> min_array_value .)
    MINUS           reduce using rule 128 (value -> min_array_value .)
    GREATERTHAN     reduce using rule 128 (value -> min_array_value .)
    LESSTHAN        reduce using rule 128 (value -> min_array_value .)
    EQUALEQUAL      reduce using rule 128 (value -> min_array_value .)
    LESSTHANOREQUAL reduce using rule 128 (value -> min_array_value .)
    GREATERTHANOREQUAL reduce using rule 128 (value -> min_array_value .)
    NOTEQUAL        reduce using rule 128 (value -> min_array_value .)
    SEMICOLON       reduce using rule 128 (value -> min_array_value .)
    RBRACKET        reduce using rule 128 (value -> min_array_value .)
    COMMA           reduce using rule 128 (value -> min_array_value .)
    RPARENT         reduce using rule 128 (value -> min_array_value .)


state 67

    (129) value -> sum_array_value .

    TIMES           reduce using rule 129 (value -> sum_array_value .)
    DIVIDE          reduce using rule 129 (value -> sum_array_value .)
    PLUS            reduce using rule 129 (value -> sum_array_value .)
    MINUS           reduce using rule 129 (value -> sum_array_value .)
    GREATERTHAN     reduce using rule 129 (value -> sum_array_value .)
    LESSTHAN        reduce using rule 129 (value -> sum_array_value .)
    EQUALEQUAL      reduce using rule 129 (value -> sum_array_value .)
    LESSTHANOREQUAL reduce using rule 129 (value -> sum_array_value .)
    GREATERTHANOREQUAL reduce using rule 129 (value -> sum_array_value .)
    NOTEQUAL        reduce using rule 129 (value -> sum_array_value .)
    SEMICOLON       reduce using rule 129 (value -> sum_array_value .)
    RBRACKET        reduce using rule 129 (value -> sum_array_value .)
    COMMA           reduce using rule 129 (value -> sum_array_value .)
    RPARENT         reduce using rule 129 (value -> sum_array_value .)


state 68

    (130) value -> len_array_value .

    TIMES           reduce using rule 130 (value -> len_array_value .)
    DIVIDE          reduce using rule 130 (value -> len_array_value .)
    PLUS            reduce using rule 130 (value -> len_array_value .)
    MINUS           reduce using rule 130 (value -> len_array_value .)
    GREATERTHAN     reduce using rule 130 (value -> len_array_value .)
    LESSTHAN        reduce using rule 130 (value -> len_array_value .)
    EQUALEQUAL      reduce using rule 130 (value -> len_array_value .)
    LESSTHANOREQUAL reduce using rule 130 (value -> len_array_value .)
    GREATERTHANOREQUAL reduce using rule 130 (value -> len_array_value .)
    NOTEQUAL        reduce using rule 130 (value -> len_array_value .)
    SEMICOLON       reduce using rule 130 (value -> len_array_value .)
    RBRACKET        reduce using rule 130 (value -> len_array_value .)
    COMMA           reduce using rule 130 (value -> len_array_value .)
    RPARENT         reduce using rule 130 (value -> len_array_value .)


state 69

    (131) literal -> FLOAT . add_float_type_to_stack
    (21) add_float_type_to_stack -> .

    TIMES           reduce using rule 21 (add_float_type_to_stack -> .)
    DIVIDE          reduce using rule 21 (add_float_type_to_stack -> .)
    PLUS            reduce using rule 21 (add_float_type_to_stack -> .)
    MINUS           reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHAN     reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHAN        reduce using rule 21 (add_float_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 21 (add_float_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 21 (add_float_type_to_stack -> .)
    NOTEQUAL        reduce using rule 21 (add_float_type_to_stack -> .)
    SEMICOLON       reduce using rule 21 (add_float_type_to_stack -> .)
    RBRACKET        reduce using rule 21 (add_float_type_to_stack -> .)
    COMMA           reduce using rule 21 (add_float_type_to_stack -> .)
    RPARENT         reduce using rule 21 (add_float_type_to_stack -> .)

    add_float_type_to_stack        shift and go to state 106

state 70

    (132) literal -> INT . add_int_type_to_stack
    (22) add_int_type_to_stack -> .

    TIMES           reduce using rule 22 (add_int_type_to_stack -> .)
    DIVIDE          reduce using rule 22 (add_int_type_to_stack -> .)
    PLUS            reduce using rule 22 (add_int_type_to_stack -> .)
    MINUS           reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHAN     reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHAN        reduce using rule 22 (add_int_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 22 (add_int_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 22 (add_int_type_to_stack -> .)
    NOTEQUAL        reduce using rule 22 (add_int_type_to_stack -> .)
    SEMICOLON       reduce using rule 22 (add_int_type_to_stack -> .)
    RBRACKET        reduce using rule 22 (add_int_type_to_stack -> .)
    COMMA           reduce using rule 22 (add_int_type_to_stack -> .)
    RPARENT         reduce using rule 22 (add_int_type_to_stack -> .)

    add_int_type_to_stack          shift and go to state 107

state 71

    (133) literal -> STRING . add_string_type_stack
    (23) add_string_type_stack -> .

    TIMES           reduce using rule 23 (add_string_type_stack -> .)
    DIVIDE          reduce using rule 23 (add_string_type_stack -> .)
    PLUS            reduce using rule 23 (add_string_type_stack -> .)
    MINUS           reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHAN     reduce using rule 23 (add_string_type_stack -> .)
    LESSTHAN        reduce using rule 23 (add_string_type_stack -> .)
    EQUALEQUAL      reduce using rule 23 (add_string_type_stack -> .)
    LESSTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    GREATERTHANOREQUAL reduce using rule 23 (add_string_type_stack -> .)
    NOTEQUAL        reduce using rule 23 (add_string_type_stack -> .)
    SEMICOLON       reduce using rule 23 (add_string_type_stack -> .)
    RBRACKET        reduce using rule 23 (add_string_type_stack -> .)
    COMMA           reduce using rule 23 (add_string_type_stack -> .)
    RPARENT         reduce using rule 23 (add_string_type_stack -> .)

    add_string_type_stack          shift and go to state 108

state 72

    (134) literal -> TRUE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 109

state 73

    (135) literal -> FALSE . add_boolean_type_to_stack
    (24) add_boolean_type_to_stack -> .

    TIMES           reduce using rule 24 (add_boolean_type_to_stack -> .)
    DIVIDE          reduce using rule 24 (add_boolean_type_to_stack -> .)
    PLUS            reduce using rule 24 (add_boolean_type_to_stack -> .)
    MINUS           reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHAN     reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHAN        reduce using rule 24 (add_boolean_type_to_stack -> .)
    EQUALEQUAL      reduce using rule 24 (add_boolean_type_to_stack -> .)
    LESSTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    GREATERTHANOREQUAL reduce using rule 24 (add_boolean_type_to_stack -> .)
    NOTEQUAL        reduce using rule 24 (add_boolean_type_to_stack -> .)
    SEMICOLON       reduce using rule 24 (add_boolean_type_to_stack -> .)
    RBRACKET        reduce using rule 24 (add_boolean_type_to_stack -> .)
    COMMA           reduce using rule 24 (add_boolean_type_to_stack -> .)
    RPARENT         reduce using rule 24 (add_boolean_type_to_stack -> .)

    add_boolean_type_to_stack      shift and go to state 110

state 74

    (136) reference -> ID . check_variable_exists add_id_type_to_stack
    (86) function_call_value -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (138) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (16) check_variable_exists -> .
    (8) init_func_call -> .
    (28) array_name_reference -> .

    TIMES           reduce using rule 16 (check_variable_exists -> .)
    DIVIDE          reduce using rule 16 (check_variable_exists -> .)
    PLUS            reduce using rule 16 (check_variable_exists -> .)
    MINUS           reduce using rule 16 (check_variable_exists -> .)
    GREATERTHAN     reduce using rule 16 (check_variable_exists -> .)
    LESSTHAN        reduce using rule 16 (check_variable_exists -> .)
    EQUALEQUAL      reduce using rule 16 (check_variable_exists -> .)
    LESSTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    GREATERTHANOREQUAL reduce using rule 16 (check_variable_exists -> .)
    NOTEQUAL        reduce using rule 16 (check_variable_exists -> .)
    SEMICOLON       reduce using rule 16 (check_variable_exists -> .)
    RBRACKET        reduce using rule 16 (check_variable_exists -> .)
    COMMA           reduce using rule 16 (check_variable_exists -> .)
    RPARENT         reduce using rule 16 (check_variable_exists -> .)
    LPARENT         reduce using rule 8 (init_func_call -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    check_variable_exists          shift and go to state 15
    init_func_call                 shift and go to state 111
    array_name_reference           shift and go to state 16

state 75

    (143) absolute_call_value -> ABSOLUTE . LPARENT mega_expression check_absolute_argument_value RPARENT

    LPARENT         shift and go to state 112


state 76

    (144) sqrt_call_value -> SQRT . LPARENT mega_expression check_sqrt_argument_value RPARENT

    LPARENT         shift and go to state 113


state 77

    (145) trunc_call_value -> TRUNC . LPARENT mega_expression check_trunc_argument_value RPARENT

    LPARENT         shift and go to state 114


state 78

    (148) substr_call_value -> SUBSTR . LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    LPARENT         shift and go to state 115


state 79

    (146) to_lower_call_value -> TOLOWER . LPARENT mega_expression check_to_lower_argument_value RPARENT

    LPARENT         shift and go to state 116


state 80

    (147) to_upper_call_value -> TOUPPER . LPARENT mega_expression check_to_upper_argument_value RPARENT

    LPARENT         shift and go to state 117


state 81

    (149) avg_call_value -> AVG . LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT

    LPARENT         shift and go to state 118


state 82

    (152) find_array_value -> FIND . LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT

    LPARENT         shift and go to state 119


state 83

    (153) max_array_value -> MAX . LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT

    LPARENT         shift and go to state 120


state 84

    (154) min_array_value -> MIN . LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT

    LPARENT         shift and go to state 121


state 85

    (155) sum_array_value -> SUM . LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT

    LPARENT         shift and go to state 122


state 86

    (156) len_array_value -> LEN . LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT

    LPARENT         shift and go to state 123


state 87

    (138) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression . RBRACKET remove_separator array_reference_value

    RBRACKET        shift and go to state 124


state 88

    (65) main_declaration -> MAIN main_quad LPARENT . RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    RPARENT         shift and go to state 125


state 89

    (77) declare_function -> FUNCTION ID new_function_scope . LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (78) declare_function_void -> FUNCTION ID new_function_scope . LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LESSTHAN        shift and go to state 126


state 90

    (157) print -> PRINT LPARENT print_many . RPARENT SEMICOLON

    RPARENT         shift and go to state 127


state 91

    (158) print_many -> mega_expression . print_value
    (159) print_many -> mega_expression . print_value COMMA print_many
    (52) print_value -> .

    COMMA           reduce using rule 52 (print_value -> .)
    RPARENT         reduce using rule 52 (print_value -> .)

    print_value                    shift and go to state 128

state 92

    (92) declare_var -> VAR var_type ID init_variable SEMICOLON .

    VAR             reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    ID              reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    MAIN            reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    FUNCTION        reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    PRINT           reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RBRACE          reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    IF              reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    WHILE           reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    RETURN          reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    READ            reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)
    SORT            reduce using rule 92 (declare_var -> VAR var_type ID init_variable SEMICOLON .)


state 93

    (94) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack . EQUAL add_operator_to_stack mega_expression SEMICOLON

    EQUAL           shift and go to state 129


state 94

    (93) declare_var -> VAR var_type ID init_array LBRACKET . INT init_array_size RBRACKET init_array_variable SEMICOLON

    INT             shift and go to state 130


state 95

    (95) assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    SORT            reduce using rule 95 (assign_statement -> reference EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 96

    (107) mega_expression -> expression relational_operator . expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    expression                     shift and go to state 131
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 97

    (100) relational_operator -> GREATERTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 132

state 98

    (101) relational_operator -> LESSTHAN . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 133

state 99

    (102) relational_operator -> EQUALEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 134

state 100

    (103) relational_operator -> LESSTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 135

state 101

    (104) relational_operator -> GREATERTHANOREQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 136

state 102

    (105) relational_operator -> NOTEQUAL . add_operator_to_stack
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 137

state 103

    (108) expression -> term process_plus_minus_operators .
    (109) expression -> term process_plus_minus_operators . PLUS add_operator_to_stack expression
    (110) expression -> term process_plus_minus_operators . MINUS add_operator_to_stack expression

    GREATERTHAN     reduce using rule 108 (expression -> term process_plus_minus_operators .)
    LESSTHAN        reduce using rule 108 (expression -> term process_plus_minus_operators .)
    EQUALEQUAL      reduce using rule 108 (expression -> term process_plus_minus_operators .)
    LESSTHANOREQUAL reduce using rule 108 (expression -> term process_plus_minus_operators .)
    GREATERTHANOREQUAL reduce using rule 108 (expression -> term process_plus_minus_operators .)
    NOTEQUAL        reduce using rule 108 (expression -> term process_plus_minus_operators .)
    SEMICOLON       reduce using rule 108 (expression -> term process_plus_minus_operators .)
    RBRACKET        reduce using rule 108 (expression -> term process_plus_minus_operators .)
    COMMA           reduce using rule 108 (expression -> term process_plus_minus_operators .)
    RPARENT         reduce using rule 108 (expression -> term process_plus_minus_operators .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139


state 104

    (111) term -> factor process_mult_div_operators .
    (112) term -> factor process_mult_div_operators . TIMES add_operator_to_stack term
    (113) term -> factor process_mult_div_operators . DIVIDE add_operator_to_stack term

    PLUS            reduce using rule 111 (term -> factor process_mult_div_operators .)
    MINUS           reduce using rule 111 (term -> factor process_mult_div_operators .)
    GREATERTHAN     reduce using rule 111 (term -> factor process_mult_div_operators .)
    LESSTHAN        reduce using rule 111 (term -> factor process_mult_div_operators .)
    EQUALEQUAL      reduce using rule 111 (term -> factor process_mult_div_operators .)
    LESSTHANOREQUAL reduce using rule 111 (term -> factor process_mult_div_operators .)
    GREATERTHANOREQUAL reduce using rule 111 (term -> factor process_mult_div_operators .)
    NOTEQUAL        reduce using rule 111 (term -> factor process_mult_div_operators .)
    SEMICOLON       reduce using rule 111 (term -> factor process_mult_div_operators .)
    RBRACKET        reduce using rule 111 (term -> factor process_mult_div_operators .)
    COMMA           reduce using rule 111 (term -> factor process_mult_div_operators .)
    RPARENT         reduce using rule 111 (term -> factor process_mult_div_operators .)
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141


state 105

    (114) factor -> LPARENT add_separator . mega_expression RPARENT remove_separator
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 142
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 106

    (131) literal -> FLOAT add_float_type_to_stack .

    TIMES           reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    DIVIDE          reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    PLUS            reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    MINUS           reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHAN     reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHAN        reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    EQUALEQUAL      reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    NOTEQUAL        reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    SEMICOLON       reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    RBRACKET        reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    COMMA           reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)
    RPARENT         reduce using rule 131 (literal -> FLOAT add_float_type_to_stack .)


state 107

    (132) literal -> INT add_int_type_to_stack .

    TIMES           reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    DIVIDE          reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    PLUS            reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    MINUS           reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    GREATERTHAN     reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    LESSTHAN        reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    EQUALEQUAL      reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    NOTEQUAL        reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    SEMICOLON       reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    RBRACKET        reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    COMMA           reduce using rule 132 (literal -> INT add_int_type_to_stack .)
    RPARENT         reduce using rule 132 (literal -> INT add_int_type_to_stack .)


state 108

    (133) literal -> STRING add_string_type_stack .

    TIMES           reduce using rule 133 (literal -> STRING add_string_type_stack .)
    DIVIDE          reduce using rule 133 (literal -> STRING add_string_type_stack .)
    PLUS            reduce using rule 133 (literal -> STRING add_string_type_stack .)
    MINUS           reduce using rule 133 (literal -> STRING add_string_type_stack .)
    GREATERTHAN     reduce using rule 133 (literal -> STRING add_string_type_stack .)
    LESSTHAN        reduce using rule 133 (literal -> STRING add_string_type_stack .)
    EQUALEQUAL      reduce using rule 133 (literal -> STRING add_string_type_stack .)
    LESSTHANOREQUAL reduce using rule 133 (literal -> STRING add_string_type_stack .)
    GREATERTHANOREQUAL reduce using rule 133 (literal -> STRING add_string_type_stack .)
    NOTEQUAL        reduce using rule 133 (literal -> STRING add_string_type_stack .)
    SEMICOLON       reduce using rule 133 (literal -> STRING add_string_type_stack .)
    RBRACKET        reduce using rule 133 (literal -> STRING add_string_type_stack .)
    COMMA           reduce using rule 133 (literal -> STRING add_string_type_stack .)
    RPARENT         reduce using rule 133 (literal -> STRING add_string_type_stack .)


state 109

    (134) literal -> TRUE add_boolean_type_to_stack .

    TIMES           reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    PLUS            reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    MINUS           reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    COMMA           reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 134 (literal -> TRUE add_boolean_type_to_stack .)


state 110

    (135) literal -> FALSE add_boolean_type_to_stack .

    TIMES           reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    DIVIDE          reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    PLUS            reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    MINUS           reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHAN     reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHAN        reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    EQUALEQUAL      reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    LESSTHANOREQUAL reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    GREATERTHANOREQUAL reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    NOTEQUAL        reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    SEMICOLON       reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    RBRACKET        reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    COMMA           reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)
    RPARENT         reduce using rule 135 (literal -> FALSE add_boolean_type_to_stack .)


state 111

    (86) function_call_value -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad

    LPARENT         shift and go to state 143


state 112

    (143) absolute_call_value -> ABSOLUTE LPARENT . mega_expression check_absolute_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 144
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 113

    (144) sqrt_call_value -> SQRT LPARENT . mega_expression check_sqrt_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 145
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 114

    (145) trunc_call_value -> TRUNC LPARENT . mega_expression check_trunc_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 146
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 115

    (148) substr_call_value -> SUBSTR LPARENT . reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 147
    array_reference                shift and go to state 14

state 116

    (146) to_lower_call_value -> TOLOWER LPARENT . mega_expression check_to_lower_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 148
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 117

    (147) to_upper_call_value -> TOUPPER LPARENT . mega_expression check_to_upper_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 149
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 118

    (149) avg_call_value -> AVG LPARENT . ID add_id_type_to_stack check_avg_argument_value RPARENT

    ID              shift and go to state 150


state 119

    (152) find_array_value -> FIND LPARENT . ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT

    ID              shift and go to state 151


state 120

    (153) max_array_value -> MAX LPARENT . ID add_id_type_to_stack check_max_argument_value RPARENT

    ID              shift and go to state 152


state 121

    (154) min_array_value -> MIN LPARENT . ID add_id_type_to_stack check_min_argument_value RPARENT

    ID              shift and go to state 153


state 122

    (155) sum_array_value -> SUM LPARENT . ID add_id_type_to_stack check_sum_argument_value RPARENT

    ID              shift and go to state 154


state 123

    (156) len_array_value -> LEN LPARENT . ID add_id_type_to_stack check_len_argument_value RPARENT

    ID              shift and go to state 155


state 124

    (138) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET . remove_separator array_reference_value
    (31) remove_separator -> .

    EQUAL           reduce using rule 31 (remove_separator -> .)
    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 156

state 125

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT . LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON

    LBRACE          shift and go to state 157


state 126

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN . function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN . VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (79) function_type -> . FLOAT_TYPE set_func_return_type
    (80) function_type -> . INT_TYPE set_func_return_type
    (81) function_type -> . STRING_TYPE set_func_return_type
    (82) function_type -> . BOOL_TYPE set_func_return_type

    VOID_TYPE       shift and go to state 159
    FLOAT_TYPE      shift and go to state 160
    INT_TYPE        shift and go to state 161
    STRING_TYPE     shift and go to state 162
    BOOL_TYPE       shift and go to state 163

    function_type                  shift and go to state 158

state 127

    (157) print -> PRINT LPARENT print_many RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 164


state 128

    (158) print_many -> mega_expression print_value .
    (159) print_many -> mega_expression print_value . COMMA print_many

    RPARENT         reduce using rule 158 (print_many -> mega_expression print_value .)
    COMMA           shift and go to state 165


state 129

    (94) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL . add_operator_to_stack mega_expression SEMICOLON
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 166

state 130

    (93) declare_var -> VAR var_type ID init_array LBRACKET INT . init_array_size RBRACKET init_array_variable SEMICOLON
    (18) init_array_size -> .

    RBRACKET        reduce using rule 18 (init_array_size -> .)

    init_array_size                shift and go to state 167

state 131

    (107) mega_expression -> expression relational_operator expression . process_relational_operator
    (25) process_relational_operator -> .

    SEMICOLON       reduce using rule 25 (process_relational_operator -> .)
    RBRACKET        reduce using rule 25 (process_relational_operator -> .)
    COMMA           reduce using rule 25 (process_relational_operator -> .)
    RPARENT         reduce using rule 25 (process_relational_operator -> .)

    process_relational_operator    shift and go to state 168

state 132

    (100) relational_operator -> GREATERTHAN add_operator_to_stack .

    LPARENT         reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    INT             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    STRING          reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUE            reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FALSE           reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ID              reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SQRT            reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    AVG             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    FIND            reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    MAX             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    MIN             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    SUM             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)
    LEN             reduce using rule 100 (relational_operator -> GREATERTHAN add_operator_to_stack .)


state 133

    (101) relational_operator -> LESSTHAN add_operator_to_stack .

    LPARENT         reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FLOAT           reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    INT             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    STRING          reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUE            reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FALSE           reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ID              reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    ABSOLUTE        reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SQRT            reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TRUNC           reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SUBSTR          reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOLOWER         reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    TOUPPER         reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    AVG             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    FIND            reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    MAX             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    MIN             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    SUM             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)
    LEN             reduce using rule 101 (relational_operator -> LESSTHAN add_operator_to_stack .)


state 134

    (102) relational_operator -> EQUALEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    INT             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    STRING          reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ID              reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    AVG             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    FIND            reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    MAX             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    MIN             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    SUM             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)
    LEN             reduce using rule 102 (relational_operator -> EQUALEQUAL add_operator_to_stack .)


state 135

    (103) relational_operator -> LESSTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    FIND            reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    MAX             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    MIN             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    SUM             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)
    LEN             reduce using rule 103 (relational_operator -> LESSTHANOREQUAL add_operator_to_stack .)


state 136

    (104) relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .

    LPARENT         reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    INT             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    STRING          reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUE            reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FALSE           reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ID              reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SQRT            reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    AVG             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    FIND            reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    MAX             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    MIN             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    SUM             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)
    LEN             reduce using rule 104 (relational_operator -> GREATERTHANOREQUAL add_operator_to_stack .)


state 137

    (105) relational_operator -> NOTEQUAL add_operator_to_stack .

    LPARENT         reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FLOAT           reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    INT             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    STRING          reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUE            reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FALSE           reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ID              reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    ABSOLUTE        reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SQRT            reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TRUNC           reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SUBSTR          reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOLOWER         reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    TOUPPER         reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    AVG             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    FIND            reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    MAX             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    MIN             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    SUM             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)
    LEN             reduce using rule 105 (relational_operator -> NOTEQUAL add_operator_to_stack .)


state 138

    (109) expression -> term process_plus_minus_operators PLUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 169

state 139

    (110) expression -> term process_plus_minus_operators MINUS . add_operator_to_stack expression
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 170

state 140

    (112) term -> factor process_mult_div_operators TIMES . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 171

state 141

    (113) term -> factor process_mult_div_operators DIVIDE . add_operator_to_stack term
    (13) add_operator_to_stack -> .

    LPARENT         reduce using rule 13 (add_operator_to_stack -> .)
    FLOAT           reduce using rule 13 (add_operator_to_stack -> .)
    INT             reduce using rule 13 (add_operator_to_stack -> .)
    STRING          reduce using rule 13 (add_operator_to_stack -> .)
    TRUE            reduce using rule 13 (add_operator_to_stack -> .)
    FALSE           reduce using rule 13 (add_operator_to_stack -> .)
    ID              reduce using rule 13 (add_operator_to_stack -> .)
    ABSOLUTE        reduce using rule 13 (add_operator_to_stack -> .)
    SQRT            reduce using rule 13 (add_operator_to_stack -> .)
    TRUNC           reduce using rule 13 (add_operator_to_stack -> .)
    SUBSTR          reduce using rule 13 (add_operator_to_stack -> .)
    TOLOWER         reduce using rule 13 (add_operator_to_stack -> .)
    TOUPPER         reduce using rule 13 (add_operator_to_stack -> .)
    AVG             reduce using rule 13 (add_operator_to_stack -> .)
    FIND            reduce using rule 13 (add_operator_to_stack -> .)
    MAX             reduce using rule 13 (add_operator_to_stack -> .)
    MIN             reduce using rule 13 (add_operator_to_stack -> .)
    SUM             reduce using rule 13 (add_operator_to_stack -> .)
    LEN             reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 172

state 142

    (114) factor -> LPARENT add_separator mega_expression . RPARENT remove_separator

    RPARENT         shift and go to state 173


state 143

    (86) function_call_value -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad
    (89) arg_list -> . arg
    (90) arg_list -> . arg COMMA increment_argument_counter arg_list
    (91) arg -> . mega_expression check_arg_count_type
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    arg_list                       shift and go to state 174
    arg                            shift and go to state 175
    mega_expression                shift and go to state 176
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 144

    (143) absolute_call_value -> ABSOLUTE LPARENT mega_expression . check_absolute_argument_value RPARENT
    (39) check_absolute_argument_value -> .

    RPARENT         reduce using rule 39 (check_absolute_argument_value -> .)

    check_absolute_argument_value  shift and go to state 177

state 145

    (144) sqrt_call_value -> SQRT LPARENT mega_expression . check_sqrt_argument_value RPARENT
    (41) check_sqrt_argument_value -> .

    RPARENT         reduce using rule 41 (check_sqrt_argument_value -> .)

    check_sqrt_argument_value      shift and go to state 178

state 146

    (145) trunc_call_value -> TRUNC LPARENT mega_expression . check_trunc_argument_value RPARENT
    (40) check_trunc_argument_value -> .

    RPARENT         reduce using rule 40 (check_trunc_argument_value -> .)

    check_trunc_argument_value     shift and go to state 179

state 147

    (148) substr_call_value -> SUBSTR LPARENT reference . COMMA mega_expression COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 180


state 148

    (146) to_lower_call_value -> TOLOWER LPARENT mega_expression . check_to_lower_argument_value RPARENT
    (43) check_to_lower_argument_value -> .

    RPARENT         reduce using rule 43 (check_to_lower_argument_value -> .)

    check_to_lower_argument_value  shift and go to state 181

state 149

    (147) to_upper_call_value -> TOUPPER LPARENT mega_expression . check_to_upper_argument_value RPARENT
    (44) check_to_upper_argument_value -> .

    RPARENT         reduce using rule 44 (check_to_upper_argument_value -> .)

    check_to_upper_argument_value  shift and go to state 182

state 150

    (149) avg_call_value -> AVG LPARENT ID . add_id_type_to_stack check_avg_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 183

state 151

    (152) find_array_value -> FIND LPARENT ID . add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 184

state 152

    (153) max_array_value -> MAX LPARENT ID . add_id_type_to_stack check_max_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 185

state 153

    (154) min_array_value -> MIN LPARENT ID . add_id_type_to_stack check_min_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 186

state 154

    (155) sum_array_value -> SUM LPARENT ID . add_id_type_to_stack check_sum_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 187

state 155

    (156) len_array_value -> LEN LPARENT ID . add_id_type_to_stack check_len_argument_value RPARENT
    (20) add_id_type_to_stack -> .

    RPARENT         reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 188

state 156

    (138) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator . array_reference_value
    (29) array_reference_value -> .

    EQUAL           reduce using rule 29 (array_reference_value -> .)
    TIMES           reduce using rule 29 (array_reference_value -> .)
    DIVIDE          reduce using rule 29 (array_reference_value -> .)
    PLUS            reduce using rule 29 (array_reference_value -> .)
    MINUS           reduce using rule 29 (array_reference_value -> .)
    GREATERTHAN     reduce using rule 29 (array_reference_value -> .)
    LESSTHAN        reduce using rule 29 (array_reference_value -> .)
    EQUALEQUAL      reduce using rule 29 (array_reference_value -> .)
    LESSTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    GREATERTHANOREQUAL reduce using rule 29 (array_reference_value -> .)
    NOTEQUAL        reduce using rule 29 (array_reference_value -> .)
    SEMICOLON       reduce using rule 29 (array_reference_value -> .)
    RBRACKET        reduce using rule 29 (array_reference_value -> .)
    COMMA           reduce using rule 29 (array_reference_value -> .)
    RPARENT         reduce using rule 29 (array_reference_value -> .)

    array_reference_value          shift and go to state 189

state 157

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE . new_scope statement_list RBRACE close_current_scope SEMICOLON
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 190

state 158

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 191


state 159

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE . set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 192

state 160

    (79) function_type -> FLOAT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 193

state 161

    (80) function_type -> INT_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 194

state 162

    (81) function_type -> STRING_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 195

state 163

    (82) function_type -> BOOL_TYPE . set_func_return_type
    (3) set_func_return_type -> .

    GREATERTHAN     reduce using rule 3 (set_func_return_type -> .)

    set_func_return_type           shift and go to state 196

state 164

    (157) print -> PRINT LPARENT print_many RPARENT SEMICOLON .

    MAIN            reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    PRINT           reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RBRACE          reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    VAR             reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    ID              reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    IF              reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    WHILE           reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    RETURN          reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    READ            reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)
    SORT            reduce using rule 157 (print -> PRINT LPARENT print_many RPARENT SEMICOLON .)


state 165

    (159) print_many -> mega_expression print_value COMMA . print_many
    (158) print_many -> . mega_expression print_value
    (159) print_many -> . mega_expression print_value COMMA print_many
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 91
    print_many                     shift and go to state 197
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 166

    (94) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack . mega_expression SEMICOLON
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 198
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 167

    (93) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size . RBRACKET init_array_variable SEMICOLON

    RBRACKET        shift and go to state 199


state 168

    (107) mega_expression -> expression relational_operator expression process_relational_operator .

    SEMICOLON       reduce using rule 107 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RBRACKET        reduce using rule 107 (mega_expression -> expression relational_operator expression process_relational_operator .)
    COMMA           reduce using rule 107 (mega_expression -> expression relational_operator expression process_relational_operator .)
    RPARENT         reduce using rule 107 (mega_expression -> expression relational_operator expression process_relational_operator .)


state 169

    (109) expression -> term process_plus_minus_operators PLUS add_operator_to_stack . expression
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    term                           shift and go to state 51
    expression                     shift and go to state 200
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 170

    (110) expression -> term process_plus_minus_operators MINUS add_operator_to_stack . expression
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    term                           shift and go to state 51
    expression                     shift and go to state 201
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 171

    (112) term -> factor process_mult_div_operators TIMES add_operator_to_stack . term
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    factor                         shift and go to state 52
    term                           shift and go to state 202
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 172

    (113) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack . term
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    factor                         shift and go to state 52
    term                           shift and go to state 203
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 173

    (114) factor -> LPARENT add_separator mega_expression RPARENT . remove_separator
    (31) remove_separator -> .

    TIMES           reduce using rule 31 (remove_separator -> .)
    DIVIDE          reduce using rule 31 (remove_separator -> .)
    PLUS            reduce using rule 31 (remove_separator -> .)
    MINUS           reduce using rule 31 (remove_separator -> .)
    GREATERTHAN     reduce using rule 31 (remove_separator -> .)
    LESSTHAN        reduce using rule 31 (remove_separator -> .)
    EQUALEQUAL      reduce using rule 31 (remove_separator -> .)
    LESSTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    GREATERTHANOREQUAL reduce using rule 31 (remove_separator -> .)
    NOTEQUAL        reduce using rule 31 (remove_separator -> .)
    SEMICOLON       reduce using rule 31 (remove_separator -> .)
    RBRACKET        reduce using rule 31 (remove_separator -> .)
    COMMA           reduce using rule 31 (remove_separator -> .)
    RPARENT         reduce using rule 31 (remove_separator -> .)

    remove_separator               shift and go to state 204

state 174

    (86) function_call_value -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad

    RPARENT         shift and go to state 205


state 175

    (89) arg_list -> arg .
    (90) arg_list -> arg . COMMA increment_argument_counter arg_list

    RPARENT         reduce using rule 89 (arg_list -> arg .)
    COMMA           shift and go to state 206


state 176

    (91) arg -> mega_expression . check_arg_count_type
    (10) check_arg_count_type -> .

    COMMA           reduce using rule 10 (check_arg_count_type -> .)
    RPARENT         reduce using rule 10 (check_arg_count_type -> .)

    check_arg_count_type           shift and go to state 207

state 177

    (143) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value . RPARENT

    RPARENT         shift and go to state 208


state 178

    (144) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value . RPARENT

    RPARENT         shift and go to state 209


state 179

    (145) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value . RPARENT

    RPARENT         shift and go to state 210


state 180

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA . mega_expression COMMA mega_expression substr_quad RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    reference                      shift and go to state 48
    mega_expression                shift and go to state 211
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 181

    (146) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value . RPARENT

    RPARENT         shift and go to state 212


state 182

    (147) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value . RPARENT

    RPARENT         shift and go to state 213


state 183

    (149) avg_call_value -> AVG LPARENT ID add_id_type_to_stack . check_avg_argument_value RPARENT
    (45) check_avg_argument_value -> .

    RPARENT         reduce using rule 45 (check_avg_argument_value -> .)

    check_avg_argument_value       shift and go to state 214

state 184

    (152) find_array_value -> FIND LPARENT ID add_id_type_to_stack . COMMA mega_expression check_find_argument_value RPARENT

    COMMA           shift and go to state 215


state 185

    (153) max_array_value -> MAX LPARENT ID add_id_type_to_stack . check_max_argument_value RPARENT
    (47) check_max_argument_value -> .

    RPARENT         reduce using rule 47 (check_max_argument_value -> .)

    check_max_argument_value       shift and go to state 216

state 186

    (154) min_array_value -> MIN LPARENT ID add_id_type_to_stack . check_min_argument_value RPARENT
    (48) check_min_argument_value -> .

    RPARENT         reduce using rule 48 (check_min_argument_value -> .)

    check_min_argument_value       shift and go to state 217

state 187

    (155) sum_array_value -> SUM LPARENT ID add_id_type_to_stack . check_sum_argument_value RPARENT
    (46) check_sum_argument_value -> .

    RPARENT         reduce using rule 46 (check_sum_argument_value -> .)

    check_sum_argument_value       shift and go to state 218

state 188

    (156) len_array_value -> LEN LPARENT ID add_id_type_to_stack . check_len_argument_value RPARENT
    (49) check_len_argument_value -> .

    RPARENT         reduce using rule 49 (check_len_argument_value -> .)

    check_len_argument_value       shift and go to state 219

state 189

    (138) array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .

    EQUAL           reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    TIMES           reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    DIVIDE          reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    PLUS            reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    MINUS           reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHAN     reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHAN        reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    EQUALEQUAL      reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    LESSTHANOREQUAL reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    GREATERTHANOREQUAL reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    NOTEQUAL        reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    SEMICOLON       reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RBRACKET        reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    COMMA           reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)
    RPARENT         reduce using rule 138 (array_reference -> ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value .)


state 190

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope . statement_list RBRACE close_current_scope SEMICOLON
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 220
    empty                          shift and go to state 221

state 191

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 222


state 192

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type . GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    GREATERTHAN     shift and go to state 223


state 193

    (79) function_type -> FLOAT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 79 (function_type -> FLOAT_TYPE set_func_return_type .)


state 194

    (80) function_type -> INT_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 80 (function_type -> INT_TYPE set_func_return_type .)


state 195

    (81) function_type -> STRING_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 81 (function_type -> STRING_TYPE set_func_return_type .)


state 196

    (82) function_type -> BOOL_TYPE set_func_return_type .

    GREATERTHAN     reduce using rule 82 (function_type -> BOOL_TYPE set_func_return_type .)


state 197

    (159) print_many -> mega_expression print_value COMMA print_many .

    RPARENT         reduce using rule 159 (print_many -> mega_expression print_value COMMA print_many .)


state 198

    (94) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression . SEMICOLON

    SEMICOLON       shift and go to state 224


state 199

    (93) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET . init_array_variable SEMICOLON
    (19) init_array_variable -> .

    SEMICOLON       reduce using rule 19 (init_array_variable -> .)

    init_array_variable            shift and go to state 225

state 200

    (109) expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    COMMA           reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 109 (expression -> term process_plus_minus_operators PLUS add_operator_to_stack expression .)


state 201

    (110) expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .

    GREATERTHAN     reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHAN        reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    EQUALEQUAL      reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    LESSTHANOREQUAL reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    GREATERTHANOREQUAL reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    NOTEQUAL        reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    SEMICOLON       reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RBRACKET        reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    COMMA           reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)
    RPARENT         reduce using rule 110 (expression -> term process_plus_minus_operators MINUS add_operator_to_stack expression .)


state 202

    (112) term -> factor process_mult_div_operators TIMES add_operator_to_stack term .

    PLUS            reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    MINUS           reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHAN        reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    SEMICOLON       reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RBRACKET        reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    COMMA           reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)
    RPARENT         reduce using rule 112 (term -> factor process_mult_div_operators TIMES add_operator_to_stack term .)


state 203

    (113) term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .

    PLUS            reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    MINUS           reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHAN     reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHAN        reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    EQUALEQUAL      reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    LESSTHANOREQUAL reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    GREATERTHANOREQUAL reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    NOTEQUAL        reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    SEMICOLON       reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RBRACKET        reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    COMMA           reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)
    RPARENT         reduce using rule 113 (term -> factor process_mult_div_operators DIVIDE add_operator_to_stack term .)


state 204

    (114) factor -> LPARENT add_separator mega_expression RPARENT remove_separator .

    TIMES           reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    DIVIDE          reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    PLUS            reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    MINUS           reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHAN     reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHAN        reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    EQUALEQUAL      reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    LESSTHANOREQUAL reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    GREATERTHANOREQUAL reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    NOTEQUAL        reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    SEMICOLON       reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RBRACKET        reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    COMMA           reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)
    RPARENT         reduce using rule 114 (factor -> LPARENT add_separator mega_expression RPARENT remove_separator .)


state 205

    (86) function_call_value -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad
    (11) create_gosub_quad -> .

    TIMES           reduce using rule 11 (create_gosub_quad -> .)
    DIVIDE          reduce using rule 11 (create_gosub_quad -> .)
    PLUS            reduce using rule 11 (create_gosub_quad -> .)
    MINUS           reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHAN     reduce using rule 11 (create_gosub_quad -> .)
    LESSTHAN        reduce using rule 11 (create_gosub_quad -> .)
    EQUALEQUAL      reduce using rule 11 (create_gosub_quad -> .)
    LESSTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    GREATERTHANOREQUAL reduce using rule 11 (create_gosub_quad -> .)
    NOTEQUAL        reduce using rule 11 (create_gosub_quad -> .)
    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)
    RBRACKET        reduce using rule 11 (create_gosub_quad -> .)
    COMMA           reduce using rule 11 (create_gosub_quad -> .)
    RPARENT         reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 226

state 206

    (90) arg_list -> arg COMMA . increment_argument_counter arg_list
    (9) increment_argument_counter -> .

    LPARENT         reduce using rule 9 (increment_argument_counter -> .)
    FLOAT           reduce using rule 9 (increment_argument_counter -> .)
    INT             reduce using rule 9 (increment_argument_counter -> .)
    STRING          reduce using rule 9 (increment_argument_counter -> .)
    TRUE            reduce using rule 9 (increment_argument_counter -> .)
    FALSE           reduce using rule 9 (increment_argument_counter -> .)
    ID              reduce using rule 9 (increment_argument_counter -> .)
    ABSOLUTE        reduce using rule 9 (increment_argument_counter -> .)
    SQRT            reduce using rule 9 (increment_argument_counter -> .)
    TRUNC           reduce using rule 9 (increment_argument_counter -> .)
    SUBSTR          reduce using rule 9 (increment_argument_counter -> .)
    TOLOWER         reduce using rule 9 (increment_argument_counter -> .)
    TOUPPER         reduce using rule 9 (increment_argument_counter -> .)
    AVG             reduce using rule 9 (increment_argument_counter -> .)
    FIND            reduce using rule 9 (increment_argument_counter -> .)
    MAX             reduce using rule 9 (increment_argument_counter -> .)
    MIN             reduce using rule 9 (increment_argument_counter -> .)
    SUM             reduce using rule 9 (increment_argument_counter -> .)
    LEN             reduce using rule 9 (increment_argument_counter -> .)

    increment_argument_counter     shift and go to state 227

state 207

    (91) arg -> mega_expression check_arg_count_type .

    COMMA           reduce using rule 91 (arg -> mega_expression check_arg_count_type .)
    RPARENT         reduce using rule 91 (arg -> mega_expression check_arg_count_type .)


state 208

    (143) absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .

    TIMES           reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    DIVIDE          reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    PLUS            reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    MINUS           reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHAN        reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    SEMICOLON       reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RBRACKET        reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    COMMA           reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)
    RPARENT         reduce using rule 143 (absolute_call_value -> ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT .)


state 209

    (144) sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .

    TIMES           reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    DIVIDE          reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    PLUS            reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    MINUS           reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHAN        reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    SEMICOLON       reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RBRACKET        reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    COMMA           reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)
    RPARENT         reduce using rule 144 (sqrt_call_value -> SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT .)


state 210

    (145) trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .

    TIMES           reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    DIVIDE          reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    PLUS            reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    MINUS           reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHAN        reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    SEMICOLON       reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RBRACKET        reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    COMMA           reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)
    RPARENT         reduce using rule 145 (trunc_call_value -> TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT .)


state 211

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression . COMMA mega_expression substr_quad RPARENT

    COMMA           shift and go to state 228


state 212

    (146) to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .

    TIMES           reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    DIVIDE          reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    PLUS            reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    MINUS           reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHAN        reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    SEMICOLON       reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RBRACKET        reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    COMMA           reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)
    RPARENT         reduce using rule 146 (to_lower_call_value -> TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT .)


state 213

    (147) to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .

    TIMES           reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    DIVIDE          reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    PLUS            reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    MINUS           reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHAN        reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    SEMICOLON       reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RBRACKET        reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    COMMA           reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)
    RPARENT         reduce using rule 147 (to_upper_call_value -> TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT .)


state 214

    (149) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value . RPARENT

    RPARENT         shift and go to state 229


state 215

    (152) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA . mega_expression check_find_argument_value RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 230
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 216

    (153) max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value . RPARENT

    RPARENT         shift and go to state 231


state 217

    (154) min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value . RPARENT

    RPARENT         shift and go to state 232


state 218

    (155) sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value . RPARENT

    RPARENT         shift and go to state 233


state 219

    (156) len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value . RPARENT

    RPARENT         shift and go to state 234


state 220

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list . RBRACE close_current_scope SEMICOLON
    (66) statement_list -> statement_list . statement
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 235
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    RETURN          shift and go to state 249
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    return                         shift and go to state 242
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 221

    (67) statement_list -> empty .

    RBRACE          reduce using rule 67 (statement_list -> empty .)
    VAR             reduce using rule 67 (statement_list -> empty .)
    ID              reduce using rule 67 (statement_list -> empty .)
    IF              reduce using rule 67 (statement_list -> empty .)
    WHILE           reduce using rule 67 (statement_list -> empty .)
    RETURN          reduce using rule 67 (statement_list -> empty .)
    READ            reduce using rule 67 (statement_list -> empty .)
    SORT            reduce using rule 67 (statement_list -> empty .)
    PRINT           reduce using rule 67 (statement_list -> empty .)


state 222

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . var_type ID init_param
    (96) var_type -> . FLOAT_TYPE set_current_type
    (97) var_type -> . INT_TYPE set_current_type
    (98) var_type -> . STRING_TYPE set_current_type
    (99) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 252
    param                          shift and go to state 253
    var_type                       shift and go to state 254

state 223

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN . LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LPARENT         shift and go to state 255


state 224

    (94) assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .

    VAR             reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    ID              reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    MAIN            reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    FUNCTION        reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    PRINT           reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RBRACE          reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    IF              reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    WHILE           reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    RETURN          reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    READ            reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)
    SORT            reduce using rule 94 (assign_statement -> VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON .)


state 225

    (93) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable . SEMICOLON

    SEMICOLON       shift and go to state 256


state 226

    (86) function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .

    TIMES           reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    DIVIDE          reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    PLUS            reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    MINUS           reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHAN     reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHAN        reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    EQUALEQUAL      reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    LESSTHANOREQUAL reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    GREATERTHANOREQUAL reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    NOTEQUAL        reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    SEMICOLON       reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RBRACKET        reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    COMMA           reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)
    RPARENT         reduce using rule 86 (function_call_value -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad .)


state 227

    (90) arg_list -> arg COMMA increment_argument_counter . arg_list
    (89) arg_list -> . arg
    (90) arg_list -> . arg COMMA increment_argument_counter arg_list
    (91) arg -> . mega_expression check_arg_count_type
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    arg                            shift and go to state 175
    arg_list                       shift and go to state 257
    mega_expression                shift and go to state 176
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 228

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA . mega_expression substr_quad RPARENT
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    reference                      shift and go to state 48
    mega_expression                shift and go to state 258
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 229

    (149) avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .

    TIMES           reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    DIVIDE          reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    PLUS            reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    MINUS           reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHAN        reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    SEMICOLON       reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RBRACKET        reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    COMMA           reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)
    RPARENT         reduce using rule 149 (avg_call_value -> AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT .)


state 230

    (152) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression . check_find_argument_value RPARENT
    (51) check_find_argument_value -> .

    RPARENT         reduce using rule 51 (check_find_argument_value -> .)

    check_find_argument_value      shift and go to state 259

state 231

    (153) max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .

    TIMES           reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    DIVIDE          reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    PLUS            reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    MINUS           reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    LESSTHAN        reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    SEMICOLON       reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    RBRACKET        reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    COMMA           reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)
    RPARENT         reduce using rule 153 (max_array_value -> MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT .)


state 232

    (154) min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .

    TIMES           reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    DIVIDE          reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    PLUS            reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    MINUS           reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    LESSTHAN        reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    SEMICOLON       reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    RBRACKET        reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    COMMA           reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)
    RPARENT         reduce using rule 154 (min_array_value -> MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT .)


state 233

    (155) sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .

    TIMES           reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    DIVIDE          reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    PLUS            reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    MINUS           reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    LESSTHAN        reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    SEMICOLON       reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    RBRACKET        reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    COMMA           reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)
    RPARENT         reduce using rule 155 (sum_array_value -> SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT .)


state 234

    (156) len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .

    TIMES           reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    DIVIDE          reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    PLUS            reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    MINUS           reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    LESSTHAN        reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    SEMICOLON       reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    RBRACKET        reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    COMMA           reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)
    RPARENT         reduce using rule 156 (len_array_value -> LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT .)


state 235

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 260

state 236

    (66) statement_list -> statement_list statement .

    RBRACE          reduce using rule 66 (statement_list -> statement_list statement .)
    VAR             reduce using rule 66 (statement_list -> statement_list statement .)
    ID              reduce using rule 66 (statement_list -> statement_list statement .)
    IF              reduce using rule 66 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 66 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 66 (statement_list -> statement_list statement .)
    READ            reduce using rule 66 (statement_list -> statement_list statement .)
    SORT            reduce using rule 66 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 66 (statement_list -> statement_list statement .)


state 237

    (68) statement -> declare_var .

    RBRACE          reduce using rule 68 (statement -> declare_var .)
    VAR             reduce using rule 68 (statement -> declare_var .)
    ID              reduce using rule 68 (statement -> declare_var .)
    IF              reduce using rule 68 (statement -> declare_var .)
    WHILE           reduce using rule 68 (statement -> declare_var .)
    RETURN          reduce using rule 68 (statement -> declare_var .)
    READ            reduce using rule 68 (statement -> declare_var .)
    SORT            reduce using rule 68 (statement -> declare_var .)
    PRINT           reduce using rule 68 (statement -> declare_var .)


state 238

    (69) statement -> assign_statement .

    RBRACE          reduce using rule 69 (statement -> assign_statement .)
    VAR             reduce using rule 69 (statement -> assign_statement .)
    ID              reduce using rule 69 (statement -> assign_statement .)
    IF              reduce using rule 69 (statement -> assign_statement .)
    WHILE           reduce using rule 69 (statement -> assign_statement .)
    RETURN          reduce using rule 69 (statement -> assign_statement .)
    READ            reduce using rule 69 (statement -> assign_statement .)
    SORT            reduce using rule 69 (statement -> assign_statement .)
    PRINT           reduce using rule 69 (statement -> assign_statement .)


state 239

    (70) statement -> function_call .

    RBRACE          reduce using rule 70 (statement -> function_call .)
    VAR             reduce using rule 70 (statement -> function_call .)
    ID              reduce using rule 70 (statement -> function_call .)
    IF              reduce using rule 70 (statement -> function_call .)
    WHILE           reduce using rule 70 (statement -> function_call .)
    RETURN          reduce using rule 70 (statement -> function_call .)
    READ            reduce using rule 70 (statement -> function_call .)
    SORT            reduce using rule 70 (statement -> function_call .)
    PRINT           reduce using rule 70 (statement -> function_call .)


state 240

    (71) statement -> if_condition .

    RBRACE          reduce using rule 71 (statement -> if_condition .)
    VAR             reduce using rule 71 (statement -> if_condition .)
    ID              reduce using rule 71 (statement -> if_condition .)
    IF              reduce using rule 71 (statement -> if_condition .)
    WHILE           reduce using rule 71 (statement -> if_condition .)
    RETURN          reduce using rule 71 (statement -> if_condition .)
    READ            reduce using rule 71 (statement -> if_condition .)
    SORT            reduce using rule 71 (statement -> if_condition .)
    PRINT           reduce using rule 71 (statement -> if_condition .)


state 241

    (72) statement -> while_loop .

    RBRACE          reduce using rule 72 (statement -> while_loop .)
    VAR             reduce using rule 72 (statement -> while_loop .)
    ID              reduce using rule 72 (statement -> while_loop .)
    IF              reduce using rule 72 (statement -> while_loop .)
    WHILE           reduce using rule 72 (statement -> while_loop .)
    RETURN          reduce using rule 72 (statement -> while_loop .)
    READ            reduce using rule 72 (statement -> while_loop .)
    SORT            reduce using rule 72 (statement -> while_loop .)
    PRINT           reduce using rule 72 (statement -> while_loop .)


state 242

    (73) statement -> return .

    RBRACE          reduce using rule 73 (statement -> return .)
    VAR             reduce using rule 73 (statement -> return .)
    ID              reduce using rule 73 (statement -> return .)
    IF              reduce using rule 73 (statement -> return .)
    WHILE           reduce using rule 73 (statement -> return .)
    RETURN          reduce using rule 73 (statement -> return .)
    READ            reduce using rule 73 (statement -> return .)
    SORT            reduce using rule 73 (statement -> return .)
    PRINT           reduce using rule 73 (statement -> return .)


state 243

    (74) statement -> read .

    RBRACE          reduce using rule 74 (statement -> read .)
    VAR             reduce using rule 74 (statement -> read .)
    ID              reduce using rule 74 (statement -> read .)
    IF              reduce using rule 74 (statement -> read .)
    WHILE           reduce using rule 74 (statement -> read .)
    RETURN          reduce using rule 74 (statement -> read .)
    READ            reduce using rule 74 (statement -> read .)
    SORT            reduce using rule 74 (statement -> read .)
    PRINT           reduce using rule 74 (statement -> read .)


state 244

    (75) statement -> sort_array .

    RBRACE          reduce using rule 75 (statement -> sort_array .)
    VAR             reduce using rule 75 (statement -> sort_array .)
    ID              reduce using rule 75 (statement -> sort_array .)
    IF              reduce using rule 75 (statement -> sort_array .)
    WHILE           reduce using rule 75 (statement -> sort_array .)
    RETURN          reduce using rule 75 (statement -> sort_array .)
    READ            reduce using rule 75 (statement -> sort_array .)
    SORT            reduce using rule 75 (statement -> sort_array .)
    PRINT           reduce using rule 75 (statement -> sort_array .)


state 245

    (76) statement -> print .

    RBRACE          reduce using rule 76 (statement -> print .)
    VAR             reduce using rule 76 (statement -> print .)
    ID              reduce using rule 76 (statement -> print .)
    IF              reduce using rule 76 (statement -> print .)
    WHILE           reduce using rule 76 (statement -> print .)
    RETURN          reduce using rule 76 (statement -> print .)
    READ            reduce using rule 76 (statement -> print .)
    SORT            reduce using rule 76 (statement -> print .)
    PRINT           reduce using rule 76 (statement -> print .)


state 246

    (87) function_call -> ID . init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (136) reference -> ID . check_variable_exists add_id_type_to_stack
    (138) array_reference -> ID . array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value
    (8) init_func_call -> .
    (16) check_variable_exists -> .
    (28) array_name_reference -> .

    LPARENT         reduce using rule 8 (init_func_call -> .)
    EQUAL           reduce using rule 16 (check_variable_exists -> .)
    LBRACKET        reduce using rule 28 (array_name_reference -> .)

    init_func_call                 shift and go to state 261
    check_variable_exists          shift and go to state 15
    array_name_reference           shift and go to state 16

state 247

    (139) if_condition -> IF . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LPARENT         shift and go to state 262


state 248

    (142) while_loop -> WHILE . goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (35) goto_return_position -> .

    LPARENT         reduce using rule 35 (goto_return_position -> .)

    goto_return_position           shift and go to state 263

state 249

    (88) return -> RETURN . mega_expression validate_return SEMICOLON
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 264
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 250

    (160) read -> READ . LPARENT reference read_value RPARENT SEMICOLON

    LPARENT         shift and go to state 265


state 251

    (150) sort_array -> SORT . LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> SORT . LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    LPARENT         shift and go to state 266


state 252

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 267


state 253

    (83) params -> param .
    (84) params -> param . COMMA params

    RPARENT         reduce using rule 83 (params -> param .)
    COMMA           shift and go to state 268


state 254

    (85) param -> var_type . ID init_param

    ID              shift and go to state 269


state 255

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT . params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . var_type ID init_param
    (96) var_type -> . FLOAT_TYPE set_current_type
    (97) var_type -> . INT_TYPE set_current_type
    (98) var_type -> . STRING_TYPE set_current_type
    (99) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    params                         shift and go to state 270
    param                          shift and go to state 253
    var_type                       shift and go to state 254

state 256

    (93) declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .

    VAR             reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    ID              reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    MAIN            reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    FUNCTION        reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    PRINT           reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RBRACE          reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    IF              reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    WHILE           reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    RETURN          reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    READ            reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)
    SORT            reduce using rule 93 (declare_var -> VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON .)


state 257

    (90) arg_list -> arg COMMA increment_argument_counter arg_list .

    RPARENT         reduce using rule 90 (arg_list -> arg COMMA increment_argument_counter arg_list .)


state 258

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression . substr_quad RPARENT
    (42) substr_quad -> .

    RPARENT         reduce using rule 42 (substr_quad -> .)

    substr_quad                    shift and go to state 271

state 259

    (152) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value . RPARENT

    RPARENT         shift and go to state 272


state 260

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 273


state 261

    (87) function_call -> ID init_func_call . LPARENT arg_list RPARENT create_gosub_quad SEMICOLON

    LPARENT         shift and go to state 274


state 262

    (139) if_condition -> IF LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 275
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 263

    (142) while_loop -> WHILE goto_return_position . LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LPARENT         shift and go to state 276


state 264

    (88) return -> RETURN mega_expression . validate_return SEMICOLON
    (12) validate_return -> .

    SEMICOLON       reduce using rule 12 (validate_return -> .)

    validate_return                shift and go to state 277

state 265

    (160) read -> READ LPARENT . reference read_value RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    ID              shift and go to state 7

    reference                      shift and go to state 278
    array_reference                shift and go to state 14

state 266

    (150) sort_array -> SORT LPARENT . ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> SORT LPARENT . ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    ID              shift and go to state 279


state 267

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 280


state 268

    (84) params -> param COMMA . params
    (83) params -> . param
    (84) params -> . param COMMA params
    (85) param -> . var_type ID init_param
    (96) var_type -> . FLOAT_TYPE set_current_type
    (97) var_type -> . INT_TYPE set_current_type
    (98) var_type -> . STRING_TYPE set_current_type
    (99) var_type -> . BOOL_TYPE set_current_type

    FLOAT_TYPE      shift and go to state 20
    INT_TYPE        shift and go to state 21
    STRING_TYPE     shift and go to state 22
    BOOL_TYPE       shift and go to state 23

    param                          shift and go to state 253
    params                         shift and go to state 281
    var_type                       shift and go to state 254

state 269

    (85) param -> var_type ID . init_param
    (5) init_param -> .

    COMMA           reduce using rule 5 (init_param -> .)
    RPARENT         reduce using rule 5 (init_param -> .)

    init_param                     shift and go to state 282

state 270

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params . RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    RPARENT         shift and go to state 283


state 271

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad . RPARENT

    RPARENT         shift and go to state 284


state 272

    (152) find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .

    TIMES           reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    DIVIDE          reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    PLUS            reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    MINUS           reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    GREATERTHAN     reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    LESSTHAN        reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    EQUALEQUAL      reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    LESSTHANOREQUAL reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    GREATERTHANOREQUAL reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    NOTEQUAL        reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    SEMICOLON       reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    RBRACKET        reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    COMMA           reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)
    RPARENT         reduce using rule 152 (find_array_value -> FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT .)


state 273

    (65) main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .

    $end            reduce using rule 65 (main_declaration -> MAIN main_quad LPARENT RPARENT LBRACE new_scope statement_list RBRACE close_current_scope SEMICOLON .)


state 274

    (87) function_call -> ID init_func_call LPARENT . arg_list RPARENT create_gosub_quad SEMICOLON
    (89) arg_list -> . arg
    (90) arg_list -> . arg COMMA increment_argument_counter arg_list
    (91) arg -> . mega_expression check_arg_count_type
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    arg_list                       shift and go to state 285
    arg                            shift and go to state 175
    mega_expression                shift and go to state 176
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 275

    (139) if_condition -> IF LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    RPARENT         shift and go to state 286


state 276

    (142) while_loop -> WHILE goto_return_position LPARENT . mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (106) mega_expression -> . expression
    (107) mega_expression -> . expression relational_operator expression process_relational_operator
    (108) expression -> . term process_plus_minus_operators
    (109) expression -> . term process_plus_minus_operators PLUS add_operator_to_stack expression
    (110) expression -> . term process_plus_minus_operators MINUS add_operator_to_stack expression
    (111) term -> . factor process_mult_div_operators
    (112) term -> . factor process_mult_div_operators TIMES add_operator_to_stack term
    (113) term -> . factor process_mult_div_operators DIVIDE add_operator_to_stack term
    (114) factor -> . LPARENT add_separator mega_expression RPARENT remove_separator
    (115) factor -> . value
    (116) value -> . literal
    (117) value -> . reference
    (118) value -> . function_call_value
    (119) value -> . absolute_call_value
    (120) value -> . sqrt_call_value
    (121) value -> . trunc_call_value
    (122) value -> . substr_call_value
    (123) value -> . to_lower_call_value
    (124) value -> . to_upper_call_value
    (125) value -> . avg_call_value
    (126) value -> . find_array_value
    (127) value -> . max_array_value
    (128) value -> . min_array_value
    (129) value -> . sum_array_value
    (130) value -> . len_array_value
    (131) literal -> . FLOAT add_float_type_to_stack
    (132) literal -> . INT add_int_type_to_stack
    (133) literal -> . STRING add_string_type_stack
    (134) literal -> . TRUE add_boolean_type_to_stack
    (135) literal -> . FALSE add_boolean_type_to_stack
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (86) function_call_value -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad
    (143) absolute_call_value -> . ABSOLUTE LPARENT mega_expression check_absolute_argument_value RPARENT
    (144) sqrt_call_value -> . SQRT LPARENT mega_expression check_sqrt_argument_value RPARENT
    (145) trunc_call_value -> . TRUNC LPARENT mega_expression check_trunc_argument_value RPARENT
    (148) substr_call_value -> . SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT
    (146) to_lower_call_value -> . TOLOWER LPARENT mega_expression check_to_lower_argument_value RPARENT
    (147) to_upper_call_value -> . TOUPPER LPARENT mega_expression check_to_upper_argument_value RPARENT
    (149) avg_call_value -> . AVG LPARENT ID add_id_type_to_stack check_avg_argument_value RPARENT
    (152) find_array_value -> . FIND LPARENT ID add_id_type_to_stack COMMA mega_expression check_find_argument_value RPARENT
    (153) max_array_value -> . MAX LPARENT ID add_id_type_to_stack check_max_argument_value RPARENT
    (154) min_array_value -> . MIN LPARENT ID add_id_type_to_stack check_min_argument_value RPARENT
    (155) sum_array_value -> . SUM LPARENT ID add_id_type_to_stack check_sum_argument_value RPARENT
    (156) len_array_value -> . LEN LPARENT ID add_id_type_to_stack check_len_argument_value RPARENT
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    LPARENT         shift and go to state 53
    FLOAT           shift and go to state 69
    INT             shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 74
    ABSOLUTE        shift and go to state 75
    SQRT            shift and go to state 76
    TRUNC           shift and go to state 77
    SUBSTR          shift and go to state 78
    TOLOWER         shift and go to state 79
    TOUPPER         shift and go to state 80
    AVG             shift and go to state 81
    FIND            shift and go to state 82
    MAX             shift and go to state 83
    MIN             shift and go to state 84
    SUM             shift and go to state 85
    LEN             shift and go to state 86

    mega_expression                shift and go to state 287
    expression                     shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    value                          shift and go to state 54
    literal                        shift and go to state 55
    reference                      shift and go to state 48
    function_call_value            shift and go to state 56
    absolute_call_value            shift and go to state 57
    sqrt_call_value                shift and go to state 58
    trunc_call_value               shift and go to state 59
    substr_call_value              shift and go to state 60
    to_lower_call_value            shift and go to state 61
    to_upper_call_value            shift and go to state 62
    avg_call_value                 shift and go to state 63
    find_array_value               shift and go to state 64
    max_array_value                shift and go to state 65
    min_array_value                shift and go to state 66
    sum_array_value                shift and go to state 67
    len_array_value                shift and go to state 68
    array_reference                shift and go to state 14

state 277

    (88) return -> RETURN mega_expression validate_return . SEMICOLON

    SEMICOLON       shift and go to state 288


state 278

    (160) read -> READ LPARENT reference . read_value RPARENT SEMICOLON
    (53) read_value -> .

    RPARENT         reduce using rule 53 (read_value -> .)

    read_value                     shift and go to state 289

state 279

    (150) sort_array -> SORT LPARENT ID . add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> SORT LPARENT ID . add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (20) add_id_type_to_stack -> .

    COMMA           reduce using rule 20 (add_id_type_to_stack -> .)

    add_id_type_to_stack           shift and go to state 290

state 280

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RETURN          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    SORT            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 291

state 281

    (84) params -> param COMMA params .

    RPARENT         reduce using rule 84 (params -> param COMMA params .)


state 282

    (85) param -> var_type ID init_param .

    COMMA           reduce using rule 85 (param -> var_type ID init_param .)
    RPARENT         reduce using rule 85 (param -> var_type ID init_param .)


state 283

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT . LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON

    LBRACE          shift and go to state 292


state 284

    (148) substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .

    TIMES           reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    DIVIDE          reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    PLUS            reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    MINUS           reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHAN     reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHAN        reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    EQUALEQUAL      reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    LESSTHANOREQUAL reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    GREATERTHANOREQUAL reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    NOTEQUAL        reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    SEMICOLON       reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RBRACKET        reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    COMMA           reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)
    RPARENT         reduce using rule 148 (substr_call_value -> SUBSTR LPARENT reference COMMA mega_expression COMMA mega_expression substr_quad RPARENT .)


state 285

    (87) function_call -> ID init_func_call LPARENT arg_list . RPARENT create_gosub_quad SEMICOLON

    RPARENT         shift and go to state 293


state 286

    (139) if_condition -> IF LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position

    LBRACE          shift and go to state 294


state 287

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression . RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    RPARENT         shift and go to state 295


state 288

    (88) return -> RETURN mega_expression validate_return SEMICOLON .

    RBRACE          reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    VAR             reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    ID              reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    IF              reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    WHILE           reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    RETURN          reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    READ            reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    SORT            reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)
    PRINT           reduce using rule 88 (return -> RETURN mega_expression validate_return SEMICOLON .)


state 289

    (160) read -> READ LPARENT reference read_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 296


state 290

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack . COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack . COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    COMMA           shift and go to state 297


state 291

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RETURN          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 298
    empty                          shift and go to state 221

state 292

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE . function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (6) function_start_quad -> .

    RBRACE          reduce using rule 6 (function_start_quad -> .)
    VAR             reduce using rule 6 (function_start_quad -> .)
    ID              reduce using rule 6 (function_start_quad -> .)
    IF              reduce using rule 6 (function_start_quad -> .)
    WHILE           reduce using rule 6 (function_start_quad -> .)
    RETURN          reduce using rule 6 (function_start_quad -> .)
    READ            reduce using rule 6 (function_start_quad -> .)
    SORT            reduce using rule 6 (function_start_quad -> .)
    PRINT           reduce using rule 6 (function_start_quad -> .)

    function_start_quad            shift and go to state 299

state 293

    (87) function_call -> ID init_func_call LPARENT arg_list RPARENT . create_gosub_quad SEMICOLON
    (11) create_gosub_quad -> .

    SEMICOLON       reduce using rule 11 (create_gosub_quad -> .)

    create_gosub_quad              shift and go to state 300

state 294

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    SORT            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 301

state 295

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT . LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope

    LBRACE          shift and go to state 302


state 296

    (160) read -> READ LPARENT reference read_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 303


state 297

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA . LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA . GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON

    LESSTHAN        shift and go to state 304
    GREATERTHAN     shift and go to state 305


state 298

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . return RBRACE endfunc_quad close_current_scope SEMICOLON
    (66) statement_list -> statement_list . statement
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RETURN          shift and go to state 249
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    return                         shift and go to state 306
    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 299

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad . statement_list RBRACE endfunc_quad close_current_scope SEMICOLON
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 307
    empty                          shift and go to state 221

state 300

    (87) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad . SEMICOLON

    SEMICOLON       shift and go to state 308


state 301

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 309

state 302

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE . create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (32) create_gotof_quad -> .

    RBRACE          reduce using rule 32 (create_gotof_quad -> .)
    VAR             reduce using rule 32 (create_gotof_quad -> .)
    ID              reduce using rule 32 (create_gotof_quad -> .)
    IF              reduce using rule 32 (create_gotof_quad -> .)
    WHILE           reduce using rule 32 (create_gotof_quad -> .)
    RETURN          reduce using rule 32 (create_gotof_quad -> .)
    READ            reduce using rule 32 (create_gotof_quad -> .)
    SORT            reduce using rule 32 (create_gotof_quad -> .)
    PRINT           reduce using rule 32 (create_gotof_quad -> .)

    create_gotof_quad              shift and go to state 310

state 303

    (160) read -> READ LPARENT reference read_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    VAR             reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    ID              reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    IF              reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    READ            reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    SORT            reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 160 (read -> READ LPARENT reference read_value RPARENT SEMICOLON .)


state 304

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN . add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (13) add_operator_to_stack -> .

    RPARENT         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 311

state 305

    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN . add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (13) add_operator_to_stack -> .

    RPARENT         reduce using rule 13 (add_operator_to_stack -> .)

    add_operator_to_stack          shift and go to state 312

state 306

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return . RBRACE endfunc_quad close_current_scope SEMICOLON
    (73) statement -> return .

    RBRACE          shift and go to state 313
    RETURN          reduce using rule 73 (statement -> return .)
    VAR             reduce using rule 73 (statement -> return .)
    ID              reduce using rule 73 (statement -> return .)
    IF              reduce using rule 73 (statement -> return .)
    WHILE           reduce using rule 73 (statement -> return .)
    READ            reduce using rule 73 (statement -> return .)
    SORT            reduce using rule 73 (statement -> return .)
    PRINT           reduce using rule 73 (statement -> return .)


state 307

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list . RBRACE endfunc_quad close_current_scope SEMICOLON
    (66) statement_list -> statement_list . statement
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 314
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    RETURN          shift and go to state 249
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    return                         shift and go to state 242
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 308

    (87) function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .

    RBRACE          reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    VAR             reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    ID              reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    IF              reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    WHILE           reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    RETURN          reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    READ            reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    SORT            reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)
    PRINT           reduce using rule 87 (function_call -> ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON .)


state 309

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE close_current_scope else_condition goto_end_position
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 315
    empty                          shift and go to state 221

state 310

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad . new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 316

state 311

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack . check_sort_argument_value RPARENT SEMICOLON
    (50) check_sort_argument_value -> .

    RPARENT         reduce using rule 50 (check_sort_argument_value -> .)

    check_sort_argument_value      shift and go to state 317

state 312

    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack . check_sort_argument_value RPARENT SEMICOLON
    (50) check_sort_argument_value -> .

    RPARENT         reduce using rule 50 (check_sort_argument_value -> .)

    check_sort_argument_value      shift and go to state 318

state 313

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 319

state 314

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE . endfunc_quad close_current_scope SEMICOLON
    (7) endfunc_quad -> .

    SEMICOLON       reduce using rule 7 (endfunc_quad -> .)

    endfunc_quad                   shift and go to state 320

state 315

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE close_current_scope else_condition goto_end_position
    (66) statement_list -> statement_list . statement
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 321
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    RETURN          shift and go to state 249
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    return                         shift and go to state 242
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 316

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope . statement_list RBRACE return_end_jump_position close_current_scope
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 322
    empty                          shift and go to state 221

state 317

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 323


state 318

    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value . RPARENT SEMICOLON

    RPARENT         shift and go to state 324


state 319

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 325

state 320

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad . close_current_scope SEMICOLON
    (2) close_current_scope -> .

    SEMICOLON       reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 326

state 321

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . close_current_scope else_condition goto_end_position
    (2) close_current_scope -> .

    ELSE            reduce using rule 2 (close_current_scope -> .)
    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 327

state 322

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list . RBRACE return_end_jump_position close_current_scope
    (66) statement_list -> statement_list . statement
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 328
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    RETURN          shift and go to state 249
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    return                         shift and go to state 242
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 323

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 329


state 324

    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 330


state 325

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 331


state 326

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope . SEMICOLON

    SEMICOLON       shift and go to state 332


state 327

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope . else_condition goto_end_position
    (140) else_condition -> . ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (141) else_condition -> . empty
    (161) empty -> .

    ELSE            shift and go to state 334
    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    else_condition                 shift and go to state 333
    empty                          shift and go to state 335

state 328

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE . return_end_jump_position close_current_scope
    (36) return_end_jump_position -> .

    RBRACE          reduce using rule 36 (return_end_jump_position -> .)
    VAR             reduce using rule 36 (return_end_jump_position -> .)
    ID              reduce using rule 36 (return_end_jump_position -> .)
    IF              reduce using rule 36 (return_end_jump_position -> .)
    WHILE           reduce using rule 36 (return_end_jump_position -> .)
    RETURN          reduce using rule 36 (return_end_jump_position -> .)
    READ            reduce using rule 36 (return_end_jump_position -> .)
    SORT            reduce using rule 36 (return_end_jump_position -> .)
    PRINT           reduce using rule 36 (return_end_jump_position -> .)

    return_end_jump_position       shift and go to state 336

state 329

    (150) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    VAR             reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    ID              reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    IF              reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    READ            reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    SORT            reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 150 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)


state 330

    (151) sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .

    RBRACE          reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    VAR             reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    ID              reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    IF              reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    WHILE           reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    RETURN          reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    READ            reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    SORT            reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)
    PRINT           reduce using rule 151 (sort_array -> SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON .)


state 331

    (77) declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 77 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 77 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 77 (declare_function -> FUNCTION ID new_function_scope LESSTHAN function_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list return RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 332

    (78) declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .

    MAIN            reduce using rule 78 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    FUNCTION        reduce using rule 78 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)
    PRINT           reduce using rule 78 (declare_function_void -> FUNCTION ID new_function_scope LESSTHAN VOID_TYPE set_func_return_type GREATERTHAN LPARENT params RPARENT LBRACE function_start_quad statement_list RBRACE endfunc_quad close_current_scope SEMICOLON .)


state 333

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition . goto_end_position
    (34) goto_end_position -> .

    RBRACE          reduce using rule 34 (goto_end_position -> .)
    VAR             reduce using rule 34 (goto_end_position -> .)
    ID              reduce using rule 34 (goto_end_position -> .)
    IF              reduce using rule 34 (goto_end_position -> .)
    WHILE           reduce using rule 34 (goto_end_position -> .)
    RETURN          reduce using rule 34 (goto_end_position -> .)
    READ            reduce using rule 34 (goto_end_position -> .)
    SORT            reduce using rule 34 (goto_end_position -> .)
    PRINT           reduce using rule 34 (goto_end_position -> .)

    goto_end_position              shift and go to state 337

state 334

    (140) else_condition -> ELSE . goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope
    (33) goto_skip_else -> .

    LBRACE          reduce using rule 33 (goto_skip_else -> .)

    goto_skip_else                 shift and go to state 338

state 335

    (141) else_condition -> empty .

    RBRACE          reduce using rule 141 (else_condition -> empty .)
    VAR             reduce using rule 141 (else_condition -> empty .)
    ID              reduce using rule 141 (else_condition -> empty .)
    IF              reduce using rule 141 (else_condition -> empty .)
    WHILE           reduce using rule 141 (else_condition -> empty .)
    RETURN          reduce using rule 141 (else_condition -> empty .)
    READ            reduce using rule 141 (else_condition -> empty .)
    SORT            reduce using rule 141 (else_condition -> empty .)
    PRINT           reduce using rule 141 (else_condition -> empty .)


state 336

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 339

state 337

    (139) if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .

    RBRACE          reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    VAR             reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    ID              reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    IF              reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    WHILE           reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    RETURN          reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    READ            reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    SORT            reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)
    PRINT           reduce using rule 139 (if_condition -> IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position .)


state 338

    (140) else_condition -> ELSE goto_skip_else . LBRACE new_scope statement_list RBRACE close_current_scope

    LBRACE          shift and go to state 340


state 339

    (142) while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .

    RBRACE          reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    VAR             reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    ID              reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    IF              reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    WHILE           reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    RETURN          reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    READ            reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    SORT            reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)
    PRINT           reduce using rule 142 (while_loop -> WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope .)


state 340

    (140) else_condition -> ELSE goto_skip_else LBRACE . new_scope statement_list RBRACE close_current_scope
    (1) new_scope -> .

    RBRACE          reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    ID              reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    SORT            reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 341

state 341

    (140) else_condition -> ELSE goto_skip_else LBRACE new_scope . statement_list RBRACE close_current_scope
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . empty
    (161) empty -> .

    RBRACE          reduce using rule 161 (empty -> .)
    VAR             reduce using rule 161 (empty -> .)
    ID              reduce using rule 161 (empty -> .)
    IF              reduce using rule 161 (empty -> .)
    WHILE           reduce using rule 161 (empty -> .)
    RETURN          reduce using rule 161 (empty -> .)
    READ            reduce using rule 161 (empty -> .)
    SORT            reduce using rule 161 (empty -> .)
    PRINT           reduce using rule 161 (empty -> .)

    statement_list                 shift and go to state 342
    empty                          shift and go to state 221

state 342

    (140) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list . RBRACE close_current_scope
    (66) statement_list -> statement_list . statement
    (68) statement -> . declare_var
    (69) statement -> . assign_statement
    (70) statement -> . function_call
    (71) statement -> . if_condition
    (72) statement -> . while_loop
    (73) statement -> . return
    (74) statement -> . read
    (75) statement -> . sort_array
    (76) statement -> . print
    (92) declare_var -> . VAR var_type ID init_variable SEMICOLON
    (93) declare_var -> . VAR var_type ID init_array LBRACKET INT init_array_size RBRACKET init_array_variable SEMICOLON
    (94) assign_statement -> . VAR var_type ID init_variable add_id_type_to_stack EQUAL add_operator_to_stack mega_expression SEMICOLON
    (95) assign_statement -> . reference EQUAL add_operator_to_stack mega_expression SEMICOLON
    (87) function_call -> . ID init_func_call LPARENT arg_list RPARENT create_gosub_quad SEMICOLON
    (139) if_condition -> . IF LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE close_current_scope else_condition goto_end_position
    (142) while_loop -> . WHILE goto_return_position LPARENT mega_expression RPARENT LBRACE create_gotof_quad new_scope statement_list RBRACE return_end_jump_position close_current_scope
    (88) return -> . RETURN mega_expression validate_return SEMICOLON
    (160) read -> . READ LPARENT reference read_value RPARENT SEMICOLON
    (150) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA LESSTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (151) sort_array -> . SORT LPARENT ID add_id_type_to_stack COMMA GREATERTHAN add_operator_to_stack check_sort_argument_value RPARENT SEMICOLON
    (157) print -> . PRINT LPARENT print_many RPARENT SEMICOLON
    (136) reference -> . ID check_variable_exists add_id_type_to_stack
    (137) reference -> . array_reference
    (138) array_reference -> . ID array_name_reference LBRACKET add_separator mega_expression RBRACKET remove_separator array_reference_value

    RBRACE          shift and go to state 343
    VAR             shift and go to state 12
    ID              shift and go to state 246
    IF              shift and go to state 247
    WHILE           shift and go to state 248
    RETURN          shift and go to state 249
    READ            shift and go to state 250
    SORT            shift and go to state 251
    PRINT           shift and go to state 34

    statement                      shift and go to state 236
    declare_var                    shift and go to state 237
    assign_statement               shift and go to state 238
    function_call                  shift and go to state 239
    if_condition                   shift and go to state 240
    while_loop                     shift and go to state 241
    return                         shift and go to state 242
    read                           shift and go to state 243
    sort_array                     shift and go to state 244
    print                          shift and go to state 245
    reference                      shift and go to state 13
    array_reference                shift and go to state 14

state 343

    (140) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE . close_current_scope
    (2) close_current_scope -> .

    RBRACE          reduce using rule 2 (close_current_scope -> .)
    VAR             reduce using rule 2 (close_current_scope -> .)
    ID              reduce using rule 2 (close_current_scope -> .)
    IF              reduce using rule 2 (close_current_scope -> .)
    WHILE           reduce using rule 2 (close_current_scope -> .)
    RETURN          reduce using rule 2 (close_current_scope -> .)
    READ            reduce using rule 2 (close_current_scope -> .)
    SORT            reduce using rule 2 (close_current_scope -> .)
    PRINT           reduce using rule 2 (close_current_scope -> .)

    close_current_scope            shift and go to state 344

state 344

    (140) else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .

    RBRACE          reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    VAR             reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    ID              reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    IF              reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    WHILE           reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    RETURN          reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    READ            reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    SORT            reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)
    PRINT           reduce using rule 140 (else_condition -> ELSE goto_skip_else LBRACE new_scope statement_list RBRACE close_current_scope .)

